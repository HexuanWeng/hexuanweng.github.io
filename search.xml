<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Google Get Ahead+ Program</title>
    <url>/2020/11/08/Get-Ahead/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>In September, when I checked my gmail regularly, I noticed one email sent from Google to invite me to express interest in Get Ahead+, which is a Google’s exclusive, invite-only development program. I registered and in few day, I recieved the confirmation email from Google and I am one of the members to study with Google. </p>
<img src="/2020/11/08/Get-Ahead/comfirmation.jpg" class="" title="Get-Ahead+ Comfirmation">

<h2 id="Get-Ahead-program-Overview-and-Timeline"><a href="#Get-Ahead-program-Overview-and-Timeline" class="headerlink" title="Get Ahead program Overview and Timeline"></a>Get Ahead program Overview and Timeline</h2><p><em>Get Ahead+ takes place between Monday 7th September to Friday 16th October via live interactive virtual events and group sessions led by Google Engineers with times to be confirmed.</em></p>
<img src="/2020/11/08/Get-Ahead/schedule.jpg" class="" title="Get-Ahead+ Schedule">

<p>The program is designed to run alongside work or study. The time commitment will be approx 2 - 3 hours per week, including Google Meet sessions along with coding challenges throughout the duration of the program and you can work through the material at your own pace.</p>
<h3 id="Weekly-Email-Update"><a href="#Weekly-Email-Update" class="headerlink" title="Weekly Email Update"></a>Weekly Email Update</h3><p>A weekly email update will be shared with you every Monday throughout the program. It will include a weekly technical challenge, updates about upcoming virtual events and useful links. Each week you’ll have a scheduled group session with a small team of students and Google mentor to discuss the technical challenge, life at Google &amp; much more! </p>
<p>The deadline to submit challenge answers will be each Sunday and the Google team will select 1 student at random to win a cool <strong>Google swag prize</strong>. 😭 Sadly, I am not a lucky dog to be selected during this section. </p>
<p>Well, I can get a Google Swag because I submitted all the assignment on time! Yeah~ Looking forward to receiving my Swag!</p>
<h3 id="Google-Meets-Events"><a href="#Google-Meets-Events" class="headerlink" title="Google Meets Events"></a>Google Meets Events</h3><p>Google Meets events will be conducted across different topics, one each week. </p>
<ul>
<li>Opening session</li>
<li>resume workshop</li>
<li>Virtual Go Game</li>
<li>Python Interview Workshop</li>
<li>The art of clean workshop</li>
<li>the 10x thinking workshop</li>
<li>Trivia and TGIF</li>
<li><strong>Python peer to peer mock interviews</strong></li>
<li><strong>Collaborative interviews with Googlers</strong></li>
</ul>
<p>The interview workshops will be in 3 different programming languages including C++, Java and Python where students will solve a problem in real time with a Google engineer. Keep a look out for the calendar invite. </p>
<h3 id="Weekly-Challenge"><a href="#Weekly-Challenge" class="headerlink" title="Weekly Challenge"></a>Weekly Challenge</h3><p>I was assigned to <strong>Justin</strong>‘s group, and the coding language we use is Python. Each week, we have a tutorial session to meet via google meeting to express our opinion on the weekly challenge. Justin guided us to express our own solution to weekly challenge, and then he will provide us with an optimate algorithm to the question. He also helped us to analyze the time and space complexity between different algorithm we selected. </p>
<p>Justin has a very cute cat, who sometimes appeared in the tutorial session. 💗</p>
<h2 id="Certificate"><a href="#Certificate" class="headerlink" title="Certificate"></a>Certificate</h2><img src="/2020/11/08/Get-Ahead/certificate.png" class="" title="Get-Ahead+ Certificate">
]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-Candy</title>
    <url>/2021/01/29/Leetcode-Candy/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><blockquote>
<p>There are N children standing in a line. Each child is assigned a rating value.<br>You are giving candies to these children subjected to the following requirements:<br>Each child must have at least one candy.<br>Children with a higher rating get more candies than their neighbors.<br>What is the minimum candies you must give?</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Input: [<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">Output: <span class="number">5</span></span><br><span class="line"><span class="comment">#Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.</span></span><br><span class="line"></span><br><span class="line">Input: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">Output: <span class="number">4</span></span><br><span class="line">Explanation: You can allocate to the first, second <span class="keyword">and</span> third child <span class="keyword">with</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span> candies respectively.</span><br><span class="line">             The third child gets <span class="number">1</span> candy because it satisfies the above two conditions.</span><br></pre></td></tr></table></figure>

<h2 id="Key-Point"><a href="#Key-Point" class="headerlink" title="Key Point"></a>Key Point</h2><ul>
<li><p>This question can have the same number in succession. The peaks and valleys method is not very practical for this question. Because there are many situations to consider, there will be many special situations.</p>
</li>
<li><p>The more recommended is the left-right, right-left method~</p>
</li>
<li><p>It is equivalent to using the Approach3 method in <strong>Min Rewards</strong>.</p>
</li>
</ul>
<h2 id="My-Solution"><a href="#My-Solution" class="headerlink" title="My Solution"></a>My Solution</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) Space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">candy</span>(<span class="params">self, ratings: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        candies = [<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> ratings]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(ratings)):</span><br><span class="line">            <span class="keyword">if</span> ratings[i-<span class="number">1</span>] &lt; ratings[i]:</span><br><span class="line">                candies[i] = candies[i-<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(ratings)-<span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">if</span> ratings[j] &gt; ratings[j+<span class="number">1</span>]:</span><br><span class="line">                candies[j] = <span class="built_in">max</span>(candies[j], candies[j+<span class="number">1</span>]+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(candies)</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/candy/">Candy-Leetcode challenge question </a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="http://hexuanweng.github.io/2021/01/28/Algo-MinRewards/">Similiar Question: Min Rewards </a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
      <tags>
        <tag>array</tag>
        <tag>hard</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Algo-MinRewards</title>
    <url>/2021/01/28/Algo-MinRewards/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h2><blockquote>
<p>Imagine that you are a teacher who is just graded the final exam in a class. You have a list of student scores on the final exam in a particular order (not necessarily sorted), and you want to reward your students. You decide to do so fairly by giving them arbitrary rewards following two rules:</p>
<ol>
<li>All students must receive at least one reward</li>
<li>Any given student must receive strictly more rewards than an adjacent student (a student immediately to the left or to the right) with a lower score and must receive strictly fewer rewards than an adjacent student with a higher score.<br>Write a function that takes in a list of scores and returns the minimum number of rewards that you must give out to students to satisfy the two rules.<br>You can assume that all students have different scores; in other words, the scores are all unique.</li>
</ol>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#input</span></span><br><span class="line">scores = [<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment">#output</span></span><br><span class="line"><span class="number">25</span> <span class="comment"># you would give out the following rewards: [4, 3, 2, 1, 2, 3, 4, 5, 1]</span></span><br></pre></td></tr></table></figure>

<h2 id="Ideas"><a href="#Ideas" class="headerlink" title="Ideas"></a>Ideas</h2><p>I am very happy to pass this question once in 15 minutes. The main personal ideas are as follows:</p>
<ul>
<li>For the first traverse, first find out the local minimum and local maximum. The local minimum is directly set to 1, and the local maximum is set to’x’ because I don’t know what it is.</li>
<li>For the second traverse, expand left to right in the direction of 1, during the process of expanding to the left, if it exceeds the boundary and encounters’x’ and stops, during the process of expanding to the right, if it exceeds the boundary and encounters’x’ stop</li>
<li>For the third traverse, it stops where it encounters ‘x’, compare the numbers on the left and right, the larger number + 1 is the value of x</li>
<li>Return sum (rewards)</li>
</ul>
<h3 id="Several-key-points"><a href="#Several-key-points" class="headerlink" title="Several key points"></a>Several key points</h3><ul>
<li>orders matter</li>
<li>the scores are unique</li>
<li>all numbers are positive</li>
</ul>
<h3 id="Several-methods-given-in-AlgoExpert"><a href="#Several-methods-given-in-AlgoExpert" class="headerlink" title="Several methods given in AlgoExpert:"></a>Several methods given in AlgoExpert:</h3><h4 id="1-naive-algorithm"><a href="#1-naive-algorithm" class="headerlink" title="1. naive algorithm"></a>1. naive algorithm</h4><ul>
<li>Starting from the first number, the first number is set to 1, from left to right, if it is smaller than the previous number, it is currently changed to 1, and 1 is added to the front</li>
<li><strong>Disadvantages</strong>: need back tracking&#x2F;iterate back to the previous one.<br>   Time: O(n^2), Space: O(n)</li>
</ul>
<h4 id="2-techniques-peaks-and-valleys-high-points-and-low-points-local-maxes-and-local-mins"><a href="#2-techniques-peaks-and-valleys-high-points-and-low-points-local-maxes-and-local-mins" class="headerlink" title="2. techniques: peaks and valleys&#x2F;high points and low points&#x2F; local maxes and local mins"></a>2. techniques: peaks and valleys&#x2F;high points and low points&#x2F; local maxes and local mins</h4><ul>
<li>I use this method</li>
<li>if I am at a local min, start expanding to the left and expanding to the right, until I reach the peaks and incrementing</li>
<li>stop once I get a peak or boundary</li>
<li>But unlike my method, I found peaks and valleys, but the video only needs valleys, not peaks</li>
<li>Time: O(n), Space: O(n)</li>
<li><strong>Disadvantages</strong>: The code is relatively long, so many edge cases need to be considered</li>
</ul>
<h4 id="3-The-best-way-cleverest-solution"><a href="#3-The-best-way-cleverest-solution" class="headerlink" title="3. The best way, cleverest solution"></a>3. The best way, cleverest solution</h4><ul>
<li>the idea of ​​expanding to left and to right of local mins doesn’t actually have to happen by starting at the local mins</li>
<li>Just go from left to right, then from right to left, traverse twice, and set all numbers at the beginning to be 1.</li>
<li>From left to right: start from the second number, compare with the left, if the current number is smaller than the left, skip it, if it is larger, start adding 1</li>
<li>From right to left: If the current number is smaller than the right, the right starts to add</li>
<li><strong>Advantages</strong>: There is no need to consider many edge cases, and the code is clearer, but no faster than method two</li>
<li>Time: O(n), Space: O(n)</li>
</ul>
<h2 id="My-Solution"><a href="#My-Solution" class="headerlink" title="My Solution"></a>My Solution</h2><h3 id="Peaks-and-Valleys"><a href="#Peaks-and-Valleys" class="headerlink" title="Peaks and Valleys"></a>Peaks and Valleys</h3><p>First solution</p>
<ul>
<li>peaks and valleys (original solution without refering to any materials)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">minRewards</span>(<span class="params">scores</span>):</span><br><span class="line">    <span class="comment"># Write your code here.</span></span><br><span class="line">	rewards = [<span class="number">0</span>] * <span class="built_in">len</span>(scores)</span><br><span class="line">	cur = <span class="number">0</span></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(scores) == <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">if</span> scores[<span class="number">0</span>] &lt; scores[<span class="number">1</span>]:</span><br><span class="line">		rewards[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">	<span class="keyword">if</span> scores[-<span class="number">1</span>] &lt; scores[-<span class="number">2</span>]:</span><br><span class="line">		rewards[-<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(scores)-<span class="number">1</span>):</span><br><span class="line">		<span class="keyword">if</span> scores[i] &lt; scores[i-<span class="number">1</span>] <span class="keyword">and</span> scores[i] &lt; scores[i+<span class="number">1</span>]:</span><br><span class="line">			rewards[i] = <span class="number">1</span></span><br><span class="line">		<span class="keyword">elif</span> scores[i] &gt; scores[i-<span class="number">1</span>] <span class="keyword">and</span> scores[i] &gt; scores[i+<span class="number">1</span>]:</span><br><span class="line">			rewards[i] = <span class="string">&quot;x&quot;</span></span><br><span class="line">		</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(rewards)):</span><br><span class="line">		<span class="keyword">if</span> rewards[j] == <span class="number">1</span>:</span><br><span class="line">			left = j-<span class="number">1</span></span><br><span class="line">			<span class="keyword">while</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> rewards[left] != <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">				rewards[left] += rewards[left+<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line">				left-=<span class="number">1</span></span><br><span class="line">			right = j+<span class="number">1</span></span><br><span class="line">			<span class="keyword">while</span> right &lt; <span class="built_in">len</span>(rewards) <span class="keyword">and</span> rewards[right] !=<span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">				rewards[right] = rewards[right-<span class="number">1</span>]+<span class="number">1</span></span><br><span class="line">				right+=<span class="number">1</span></span><br><span class="line">				</span><br><span class="line">	<span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(rewards)):</span><br><span class="line">		<span class="keyword">if</span> rewards[k] == <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">			rewards[k] = <span class="built_in">max</span>(rewards[k-<span class="number">1</span>], rewards[k+<span class="number">1</span>])+<span class="number">1</span>	</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">sum</span>(rewards)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Best-Solution"><a href="#Best-Solution" class="headerlink" title="Best Solution"></a>Best Solution</h3><p>Clean and better solution</p>
<ul>
<li>Need to pay attation to researsed traverse.<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#看了视频以后写的代码，比较绕的是reversed traverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">minRewards</span>(<span class="params">scores</span>):</span><br><span class="line">    <span class="comment"># Write your code here.</span></span><br><span class="line">    rewards = [<span class="number">1</span>] * <span class="built_in">len</span>(scores)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(scores)):</span><br><span class="line">		<span class="keyword">if</span> scores[i-<span class="number">1</span>] &lt; scores[i]:</span><br><span class="line">			rewards[i] +=rewards[i-<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(scores))):</span><br><span class="line">		<span class="keyword">if</span> scores[j-<span class="number">1</span>] &gt; scores[j]:</span><br><span class="line">			rewards[j-<span class="number">1</span>] = <span class="built_in">max</span>(rewards[j-<span class="number">1</span>], <span class="number">1</span>+rewards[j])</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">sum</span>(rewards)</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><p>my way:</p>
<ul>
<li>rewards &#x3D; [1]*len(scores)<br>better way:</li>
<li>rewards &#x3D; [1 for _ in scores]</li>
</ul>
]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
      <tags>
        <tag>array</tag>
        <tag>hard</tag>
        <tag>AlgoExpert</tag>
      </tags>
  </entry>
  <entry>
    <title>DSA - Binary Gap</title>
    <url>/2020/11/01/Binary-Gap/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Qeustion"><a href="#Qeustion" class="headerlink" title="Qeustion"></a>Qeustion</h2><blockquote>
<p>A binary gap within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones at both ends in the binary representation of N.<br>For example, number 9 has binary representation 1001 and contains a binary gap of length 2. The number 529 has binary representation 1000010001 and contains two binary gaps: one of length 4 and one of length 3. The number 20 has binary representation 10100 and contains one binary gap of length 1. The number 15 has binary representation 1111 and has no binary gaps. The number 32 has binary representation 100000 and has no binary gaps.<br>Write a function:<br>class Solution { public int solution(int N); }<br>that, given a positive integer N, returns the length of its longest binary gap. The function should return 0 if N doesn’t contain a binary gap.<br>For example, given N &#x3D; 1041 the function should return 5, because N has binary representation 10000010001 and so its longest binary gap is of length 5. Given N &#x3D; 32 the function should return 0, because N has binary representation ‘100000’ and thus no binary gaps.<br>Write an efficient algorithm for the following assumptions:<br>N is an integer within the range [1..2,147,483,647].</p>
</blockquote>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>use a list to store the index of each “1”</li>
<li>calculate the maximum gap<br>note: need to omit distance &#x3D;&#x3D; 1~</li>
</ol>
<h2 id="Python-Coding"><a href="#Python-Coding" class="headerlink" title="Python Coding"></a>Python Coding</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">N</span>):</span><br><span class="line">    one_list = []</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    bin_n = <span class="built_in">str</span>(<span class="built_in">format</span>(N, <span class="string">&#x27;b&#x27;</span>))</span><br><span class="line">    <span class="comment"># get the index list of each one</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bin_n)):</span><br><span class="line">        <span class="keyword">if</span> bin_n[i] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            one_list.append(i)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#calculate the largest gap between each index</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(one_list)-<span class="number">1</span>):</span><br><span class="line">        distance = one_list[j+<span class="number">1</span>] - one_list[j]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(one_list) == <span class="number">1</span> <span class="keyword">and</span> j == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> distance == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> distance &gt; res:</span><br><span class="line">                res = distance -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(res, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><img src="/2020/11/01/Binary-Gap/binarygap_codility.png" class="" title="Binary Gap">
]]></content>
      <categories>
        <category>Data Structure and Algorithm</category>
      </categories>
      <tags>
        <tag>array</tag>
        <tag>easy</tag>
      </tags>
  </entry>
  <entry>
    <title>Access-Google-BigQuery-Metadata-From-AWS-Lambda</title>
    <url>/2021/10/06/Access-Google-BigQuery-Metadata-From-AWS-Lambda/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements:"></a>Requirements:</h1><ul>
<li>Try to get the Metadata from Google BigQuery by using AWS Lambda function</li>
<li>Build connection between AWS Lambda and Google BigQuery</li>
<li>Write Python code to get metadata from Google BigQuery</li>
<li>format the metadata schema</li>
</ul>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><img src="/2021/10/06/Access-Google-BigQuery-Metadata-From-AWS-Lambda/architecture.png" class="" title="Solution Architecture">

<h2 id="Get-google-cloud-bigquery-zip-Method-1"><a href="#Get-google-cloud-bigquery-zip-Method-1" class="headerlink" title="Get google-cloud-bigquery.zip Method 1"></a>Get google-cloud-bigquery.zip Method 1</h2><ul>
<li>Instead of getting the GCP Layer via EC2 and Session, You can also download the zip file locally by running the following code</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install google-cloud-bigquery -t ./python/</span><br><span class="line"><span class="built_in">zip</span> -r google-cloud-bigquery.<span class="built_in">zip</span> python</span><br></pre></td></tr></table></figure>

<ul>
<li>Add the zip file to Lambda function as a layer from your local device</li>
</ul>
<h2 id="Get-google-cloud-bigquery-zip-Method-2"><a href="#Get-google-cloud-bigquery-zip-Method-2" class="headerlink" title="Get google-cloud-bigquery.zip Method 2"></a>Get google-cloud-bigquery.zip Method 2</h2><h3 id="Create-EC2-in-AWS"><a href="#Create-EC2-in-AWS" class="headerlink" title="Create EC2 in AWS"></a>Create EC2 in AWS</h3><ul>
<li>create an EC2</li>
<li>Amazon Linux 2</li>
<li>free tier is enough- instance type: t2.micro</li>
<li>the IAM role grants only “<strong>Amazon EC2Role for SSM</strong>“ so that Session Manager of Systems Manager can connect to this EC2</li>
<li>leave the other options as default</li>
</ul>
<img src="/2021/10/06/Access-Google-BigQuery-Metadata-From-AWS-Lambda/ec2.jpg" class="" title="EC2">

<h3 id="Get-AWS-Access-Key-ID-and-Secret-Access-Key"><a href="#Get-AWS-Access-Key-ID-and-Secret-Access-Key" class="headerlink" title="Get AWS Access Key ID and Secret Access Key"></a>Get AWS Access Key ID and Secret Access Key</h3><ul>
<li>Go to service “Identity and Access Management”</li>
<li>click “Users” and find your user name</li>
<li>click “Security credentials”</li>
<li>create access key and please remember that you can only view the credential once.</li>
</ul>
<img src="/2021/10/06/Access-Google-BigQuery-Metadata-From-AWS-Lambda/iam.jpg" class="" title="IAM">

<h3 id="Start-a-Session-in-AWS"><a href="#Start-a-Session-in-AWS" class="headerlink" title="Start a Session in AWS"></a>Start a Session in AWS</h3><ul>
<li>go to service “AWS System Manager”</li>
<li>click the tab “Session Manager”</li>
<li>click “Start a Session”</li>
</ul>
<img src="/2021/10/06/Access-Google-BigQuery-Metadata-From-AWS-Lambda/session.jpg" class="" title="Start a Session">

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ec2-Become a user</span></span><br><span class="line"><span class="built_in">sudo</span> su - ec2-user</span><br><span class="line"><span class="comment">#pip installation</span></span><br><span class="line"><span class="built_in">sudo</span> yum install python3 -y</span><br><span class="line">curl -O https://bootstrap.pypa.io/get-pip.py</span><br><span class="line"><span class="built_in">sudo</span> python3 get-pip.py</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/bin</span><br><span class="line"><span class="comment">#sdk installation&amp;Zip</span></span><br><span class="line">pip install google-cloud-bigquery -t ./python/</span><br><span class="line">zip -r google-cloud-bigquery.zip python</span><br><span class="line"><span class="comment">#Added because protobuf is required</span></span><br><span class="line">pip install protobuf --upgrade -t ./python/</span><br><span class="line">zip -r google-cloud-bigquery.zip ./python/google/protobuf</span><br><span class="line"></span><br><span class="line"><span class="comment">#aws cli settings</span></span><br><span class="line">aws configure</span><br><span class="line"><span class="comment">#Set the following:</span></span><br><span class="line">  AWS Access Key ID [None]: &lt;my-access-key&gt;</span><br><span class="line">  AWS Secret Access Key [None]: &lt;my-secret-key&gt;</span><br><span class="line">  Default region name [None]: ap-southeast-2</span><br><span class="line">  Default output format [None]: json</span><br><span class="line"></span><br><span class="line"><span class="comment">#Save to s3</span></span><br><span class="line">aws s3 mb s3://&lt;my-bucket&gt;</span><br><span class="line">aws s3 <span class="built_in">cp</span> google-cloud-bigquery.zip s3://&lt;my-bucket&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Check-S3-Bucket-in-AWS"><a href="#Check-S3-Bucket-in-AWS" class="headerlink" title="Check S3 Bucket in AWS"></a>Check S3 Bucket in AWS</h3><ul>
<li>go to the s3 bucket you created just now by using Session Manager</li>
<li>You should see google-cloud-bigquery.zip should be uploaded</li>
</ul>
<img src="/2021/10/06/Access-Google-BigQuery-Metadata-From-AWS-Lambda/gcp-zip.png" class="" title="Environment Layer Zip in S3">

<h2 id="Other-Steps"><a href="#Other-Steps" class="headerlink" title="Other Steps"></a>Other Steps</h2><h3 id="create-a-lambda-function-and-register-the-created-library-in-the-lambda-layer-in-AWS"><a href="#create-a-lambda-function-and-register-the-created-library-in-the-lambda-layer-in-AWS" class="headerlink" title="create a lambda function and register the created library in the lambda layer in AWS"></a>create a lambda function and register the created library in the lambda layer in AWS</h3><ul>
<li>go to Lambda service</li>
<li>Click “Function” and “create function”</li>
<li>changes settings:</li>
<li>Timeout: 30 seconds</li>
</ul>
<img src="/2021/10/06/Access-Google-BigQuery-Metadata-From-AWS-Lambda/timeout.png" class="" title="Timeout Configuration">

<ul>
<li>create Layer</li>
</ul>
<img src="/2021/10/06/Access-Google-BigQuery-Metadata-From-AWS-Lambda/create-layer.png" class="" title="Create Layer">

<ul>
<li>add Layer: gcp-bigquery</li>
</ul>
<img src="/2021/10/06/Access-Google-BigQuery-Metadata-From-AWS-Lambda/add-layer.png" class="" title="Add Layer">

<ul>
<li>And you should see the data has been created successfully</li>
</ul>
<img src="/2021/10/06/Access-Google-BigQuery-Metadata-From-AWS-Lambda/lambda-layer.png" class="" title="Lambda Page">

<h3 id="Get-GCP-certificate-file-in-Google-Cloud-Platform"><a href="#Get-GCP-certificate-file-in-Google-Cloud-Platform" class="headerlink" title="Get GCP certificate file in Google Cloud Platform"></a>Get GCP certificate file in Google Cloud Platform</h3><ul>
<li>Log into Google Cloud Platform</li>
<li>go to “IAM&amp;Admin” service and go to “Service Accounts”</li>
<li>Click “Create Service Account”: please make sure that you choose “BigQuery Admin” as the Role</li>
</ul>
<img src="/2021/10/06/Access-Google-BigQuery-Metadata-From-AWS-Lambda/gcp-service-account.png" class="" title="Service Account">

<ul>
<li>Once you created the account, please click the account and “ADD KEY”</li>
</ul>
<img src="/2021/10/06/Access-Google-BigQuery-Metadata-From-AWS-Lambda/service-account-key.png" class="" title="Key">

<ul>
<li>You are able to download the JSON file in the following format</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;project_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private_key_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">  <span class="attr">&quot;client_email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;client_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auth_uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;token_uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auth_provider_x509_cert_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;client_x509_cert_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Add-functions-and-credential-file-in-AWS-Lambda-Function"><a href="#Add-functions-and-credential-file-in-AWS-Lambda-Function" class="headerlink" title="Add functions and credential file in AWS Lambda Function"></a>Add functions and credential file in AWS Lambda Function</h3><ul>
<li>copy the JSON file into “bq.manager.json”</li>
</ul>


<ul>
<li>copy the following codes into “lambda_function.py”</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> bigquery</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_handler</span>(<span class="params">event, context</span>):</span><br><span class="line">    client = bigquery.Client()</span><br><span class="line">    sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        SELECT *</span></span><br><span class="line"><span class="string">        FROM `&lt;project name&gt;.&lt;dataset name&gt;.&lt;table name&gt;`</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Run a Standard SQL query using the environment&#x27;s default project</span></span><br><span class="line">    results = client.query(sql).result()</span><br><span class="line">    metadata_objects = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">        id_dic = &#123;<span class="string">&quot;id&quot;</span>: <span class="built_in">list</span>(row)[<span class="number">0</span>]&#125;</span><br><span class="line">        other_dic = &#123;<span class="string">&quot;metadata&quot;</span>: <span class="built_in">list</span>(row)[<span class="number">1</span>]&#125;</span><br><span class="line">        metadata_objects.append(&#123;**id_dic, **other_dic&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> metadata_objects</span><br></pre></td></tr></table></figure>

<ul>
<li>Add “GOOGLE_APPLICATION_CREDENTIALS: bq-manager.json” as Environment Variables</li>
</ul>
<img src="/2021/10/06/Access-Google-BigQuery-Metadata-From-AWS-Lambda/bq-credentials.png" class="" title="Credentials">

<h1 id="Test-Result"><a href="#Test-Result" class="headerlink" title="Test Result"></a>Test Result</h1><p>You should be able to get the JSON result like the format in the BigQuery. </p>
<p>By default, you should get a SQL table. You can modify the result baesd on your code.</p>
<img src="/2021/10/06/Access-Google-BigQuery-Metadata-From-AWS-Lambda/result.jpg" class="" title="Test Result">

<h1 id="Updated-Solutions"><a href="#Updated-Solutions" class="headerlink" title="Updated Solutions"></a>Updated Solutions</h1><h2 id="AWS-SSM-Parameter-Store"><a href="#AWS-SSM-Parameter-Store" class="headerlink" title="AWS SSM - Parameter Store"></a>AWS SSM - Parameter Store</h2><ul>
<li>Store the credential paths in the SSM Parameter Store like a Python Dictionary<img src="/2021/10/06/Access-Google-BigQuery-Metadata-From-AWS-Lambda/ssm.png" class="" title="Parameter Store"></li>
</ul>
<h2 id="AWS-Lambda-Environment-Variable"><a href="#AWS-Lambda-Environment-Variable" class="headerlink" title="AWS Lambda - Environment Variable"></a>AWS Lambda - Environment Variable</h2><ul>
<li>Set all the paths as an environment variables<img src="/2021/10/06/Access-Google-BigQuery-Metadata-From-AWS-Lambda/var.png" class="" title="Environment Variable"></li>
</ul>
<h2 id="Updated-Lambda-code"><a href="#Updated-Lambda-code" class="headerlink" title="Updated Lambda code"></a>Updated Lambda code</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> bigquery</span><br><span class="line"><span class="keyword">from</span> google.oauth2 <span class="keyword">import</span> service_account</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">ssm = boto3.client(<span class="string">&#x27;ssm&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lambda_handler</span>(<span class="params">event, context</span>):</span><br><span class="line"></span><br><span class="line">		<span class="comment">#retrieve parameters from ssm/appconfig and prepare for connection with BigQuery</span></span><br><span class="line">		client_email_var = ssm.get_parameter(Name=os.getenv(<span class="string">&#x27;SSM_BQ_CLIENT_EMAIL&#x27;</span>))[<span class="string">&#x27;Parameter&#x27;</span>][<span class="string">&#x27;Value&#x27;</span>]</span><br><span class="line">		private_key_var = ssm.get_parameter(Name=os.getenv(<span class="string">&#x27;SSM_BQ_PRIVATE_KEY&#x27;</span>))[<span class="string">&#x27;Parameter&#x27;</span>][<span class="string">&#x27;Value&#x27;</span>].replace(<span class="string">&#x27;\\n&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">		token_uri_var = os.getenv(<span class="string">&#x27;SSM_BQ_TOKEN_URI&#x27;</span>)</span><br><span class="line">		credentials = service_account.Credentials.from_service_account_info(</span><br><span class="line">		    &#123;</span><br><span class="line">		        <span class="string">&quot;client_email&quot;</span>: client_email_var,</span><br><span class="line">		        <span class="string">&quot;private_key&quot;</span>: private_key_var,</span><br><span class="line">		        <span class="string">&quot;token_uri&quot;</span>: token_uri_var</span><br><span class="line">		    &#125;</span><br><span class="line">		)</span><br><span class="line">		</span><br><span class="line">		project_id_var = os.getenv(<span class="string">&#x27;BQ_PROJECT_ID&#x27;</span>)</span><br><span class="line">		dataset_name_var = os.getenv(<span class="string">&#x27;BQ_DATASET_NAME&#x27;</span>)</span><br><span class="line">		table_name_var = os.getenv(<span class="string">&#x27;BQ_TABLE_NAME&#x27;</span>)</span><br><span class="line">		<span class="keyword">if</span> bigquery.Client(credentials = credentials,project=project_id_var):</span><br><span class="line">		    client = bigquery.Client(credentials = credentials,project=project_id_var)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">		    <span class="keyword">raise</span> GCPConnectionError</span><br><span class="line">		</span><br><span class="line">		sql = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">		    SELECT *</span></span><br><span class="line"><span class="string">		    FROM <span class="subst">&#123;project_id_var&#125;</span>.<span class="subst">&#123;dataset_name_var&#125;</span>.<span class="subst">&#123;table_name_var&#125;</span></span></span><br><span class="line"><span class="string">		&quot;&quot;&quot;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment"># Run a Standard SQL query using the environment&#x27;s default project</span></span><br><span class="line">		<span class="comment">#retrieve metadata from Bigquery and transfer it to JSON</span></span><br><span class="line">		results = client.query(sql).result()</span><br><span class="line">		metadata_objects = []</span><br><span class="line">		<span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">		    id_dic = &#123;<span class="string">&quot;id&quot;</span>: <span class="built_in">list</span>(row)[<span class="number">0</span>]&#125;</span><br><span class="line">		    other_dic = &#123;<span class="string">&quot;metadata&quot;</span>: <span class="built_in">list</span>(row)[<span class="number">1</span>]&#125;</span><br><span class="line">		    metadata_objects.append(&#123;**id_dic, **other_dic&#125;)</span><br><span class="line">    <span class="keyword">return</span> metadata_objects</span><br></pre></td></tr></table></figure>






<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.client.Client.html">google-cloud-bigquery</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://cloud.google.com/docs/authentication#oauth-2.0-clients">Authentication overview | Google Cloud</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://linuxtut.com/en/c99c2fba0ebf633cfb0b/">Run BigQuery from Lambda</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>AWS</category>
      </categories>
      <tags>
        <tag>AWS Lambda</tag>
        <tag>Google BigQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Machine Learning Foundation Concept</title>
    <url>/2020/12/22/Machine-Learning/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="A-Gentle-Introduction-to-Machine-Learning"><a href="#A-Gentle-Introduction-to-Machine-Learning" class="headerlink" title="A Gentle Introduction to Machine Learning"></a>A Gentle Introduction to Machine Learning</h2><ul>
<li>the goal of Machine Learning is to make <ul>
<li><strong>predictions</strong></li>
<li><strong>classifications</strong></li>
</ul>
</li>
<li>two main ideas about ML:<ul>
<li>we use testing data to evaluate Machine Learning methods</li>
<li>don’t be fooled by how well a Machine Learning method fits the Training Data</li>
</ul>
</li>
<li>Fitting the Training Data well but make poor predictions is called <strong>Bias-Variance Tradeoff</strong></li>
<li>There are tons of fancy Machine Learning methods, but the most important thing is to know abou them is not what makes them so fancy, it is that we decide which method fits our needs the best by using <strong>Testing Data</strong></li>
</ul>
<h2 id="Cross-Validation"><a href="#Cross-Validation" class="headerlink" title="Cross Validation"></a>Cross Validation</h2><ul>
<li><strong>Cross Validation</strong> allows us to compare different machine learning methods and get a sense of how well they will work in practice</li>
<li><strong>Four-Fold Cross Validation</strong>: divide the data into 4 blocks (numbers change dynamically). In practice, it is very common to divide the data into 10 blocks–<strong>Ten-Fold-Cross Validation</strong></li>
<li><strong>Leave One Out Cross Validation</strong>: call each individual patient (or sample) a block</li>
<li>Using machine learning lingo, we need the data to     <ul>
<li>train the machine learning methods</li>
<li>test the machine learning methods</li>
</ul>
</li>
<li>Reusing the same data for both training and testing is a bad idea because we need to know how the method will work on data it was not trained on. </li>
<li>A slightly better idea would be to use the first 75% of the data for training and the last 25% of the data for testing. </li>
<li>Rather than worry too much about which block would be best for testing, <strong>cross validation</strong> uses them all, one at a time, and summarizes the results at the end.</li>
<li><strong>Tuning parameter</strong>: a parameter that is not estimated, but just sort of guessed. Then we could use 10-fold cross validation to help find the best value for that tuning parameter.<img src="/2020/12/22/Machine-Learning/K-fold_cross_validation_EN.svg" class="" title="Cross Validation"></li>
</ul>
<h2 id="The-Confusion-Matrix"><a href="#The-Confusion-Matrix" class="headerlink" title="The Confusion Matrix"></a>The Confusion Matrix</h2><ul>
<li>steps:<ul>
<li>we start by dividing the data into <strong>Training</strong> and <strong>Testing set</strong></li>
<li>Then we train all of the methods we are interested in with the <strong>Training data</strong></li>
<li>And then test each method on the <strong>Testing set</strong></li>
<li>summarize how each method performed on the <strong>Testing data</strong><ul>
<li>create a <strong>Confusion Matrix</strong> for each method</li>
</ul>
</li>
</ul>
</li>
<li><strong>Confusion Matrix</strong><ul>
<li><strong>rows</strong>: what the machine learning algorithm predicted </li>
<li><strong>columns</strong>: the known truth </li>
<li>the result is (Positive&#x2F;Negative) and (True&#x2F;False) shows whether they predict right or wrong</li>
</ul>
</li>
<li>diagonal<ul>
<li>the numbers along the diagonal (top-left, right-bottom) tell us how many times the samples were correctly classified</li>
<li>the number not on the diagonal are samples the algorithm messed up</li>
</ul>
</li>
<li>the size of the confusion matrix is determined by the number of things we want to predict</li>
<li>a <strong>Confusion Matrix</strong> tells you what your machine learning algorithm did right and what it did wrong<img src="/2020/12/22/Machine-Learning/confusion-matrix.jpg" class="" title="Confusion Matrix"></li>
</ul>
<h2 id="Sensitivity-and-Specificity"><a href="#Sensitivity-and-Specificity" class="headerlink" title="Sensitivity and Specificity"></a>Sensitivity and Specificity</h2><ul>
<li>2 rows and 2 columns<ul>
<li><strong>Sensitivity</strong>: tells us what percentage of items with some certain features were correctly identified<ul>
<li><strong>True Positives &#x2F; (True Positives + False Negatives)</strong></li>
</ul>
</li>
<li><strong>Specificity</strong>: tells us what percentage of items without some certain features were correctly identified<ul>
<li><strong>True Negatives &#x2F; (True Negatives + False Positives)</strong></li>
</ul>
</li>
</ul>
</li>
<li>larger confusion matrices<ul>
<li>the big difference when calculating <strong>Sensitivity</strong> and <strong>Specifity</strong> for larger confusion matrices is that there are no single values that work for the entire matrix, instead we calculate a different <strong>Sensitivity</strong> and <strong>Specificity</strong> for each category</li>
</ul>
</li>
<li>we can use <strong>Sensetivity</strong> and <strong>Specificity</strong> to help us decide which machine learning method would be best for our data<ul>
<li>If correctly identifying <em>positives</em> is the most important thing to do with the data, we should choose a method with higher <em>sensitivity</em></li>
<li>If corretly identifying negatives is more important, than we should put more emphasis on <em>specificity</em></li>
</ul>
</li>
</ul>
<h2 id="Machine-Learning-Models"><a href="#Machine-Learning-Models" class="headerlink" title="Machine Learning Models"></a>Machine Learning Models</h2><ul>
<li><a href="http://hexuanweng.github.io/2020/12/23/SVM-Concept/">SVM - Support Vector Machines</a></li>
</ul>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.youtube.com/playlist?list=PLblh5JKOoLUICTaGLRoHQDuF_7q2GfuJF">Machine Learning</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Data Science</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>video course</tag>
      </tags>
  </entry>
  <entry>
    <title>Statistics Foundation Concept</title>
    <url>/2020/12/21/Statistics-Fundation/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Histogram"><a href="#Histogram" class="headerlink" title="Histogram"></a>Histogram</h2><p>Histograms are one of the most basic statistical tools that we have. </p>
<ul>
<li>divide into bins: the taller the stack within a bin, the more measurements we made that fall into that bin. (figure out how wide is the bin is a tricky)</li>
<li>we can use histogram to predict the probability of getting future measurements</li>
<li>If you want to use a <strong>“distribution”</strong> to approximate your data (or future measurements). Histograms are a good way to justify your decision. <ul>
<li>normal distribution</li>
<li>exponential distribution</li>
</ul>
</li>
</ul>
<h2 id="Distribution"><a href="#Distribution" class="headerlink" title="Distribution"></a>Distribution</h2><ul>
<li>we can use a curve to approximate the histogram. The curve tells us the same thing that the histogram tells us. </li>
<li>advantage over Histogram<ul>
<li>we can use the curve to calculate the probability</li>
<li>the curve is not limited by the width of the bins</li>
<li>if we don’t have enough time or money to get a ton of measurements. The approximate curve (based on the mean and standard deviation of the data we were able to collect), is usually good enough</li>
</ul>
</li>
<li>both the histogram and the curve are <strong>Distributions</strong><ul>
<li>show us how the probabilities of measurements are distributed.</li>
</ul>
</li>
</ul>
<h3 id="The-Normal-Distribution"><a href="#The-Normal-Distribution" class="headerlink" title="The Normal Distribution"></a>The Normal Distribution</h3><ul>
<li><strong>Normal&#x2F;Gaussian</strong> distribution: it is also called a “bell shaped curve” because it is a symmetrical curve<img src="/2020/12/21/Statistics-Fundation/normal_distribution.jpg" class="" title="Normal Distribution"></li>
<li>To draw a normal distribution, you need to know:<ul>
<li>The average measurement. This tells you where the center of the curve goes</li>
<li>The standard deviation of the measurements, this tells you how wide the curve should be. And the width of the curve determines how tall it is. The wider the curve the shorter. The narror the curve, the taller.</li>
</ul>
</li>
<li><strong>The Central Limit Theorem</strong><ul>
<li>the normal distribution is kind of magical in that we see it a lot in nature. But there is a reason for that, and that reason makes it super useful for statistics as well.</li>
</ul>
</li>
</ul>
<h2 id="Population-Parameters"><a href="#Population-Parameters" class="headerlink" title="Population Parameters"></a>Population Parameters</h2><ul>
<li><strong>Population</strong>: whatever unit it is you are measuring something awesome</li>
<li><strong>Population parameters</strong>: the parameters that determine how a distribution fits the population data</li>
</ul>
<p><strong>Normal distribution</strong></p>
<ul>
<li><p>The mean and standard deviation of the normal curve, which represents the population, are called <strong>Population parameters</strong></p>
<ul>
<li>population Mean</li>
<li>population Standard Deviation<br><strong>Exponential Distribution</strong></li>
</ul>
</li>
<li><p>we could use the exponential distribution to calculate probabilities and statistics just like when we had a Normal Distribution</p>
<ul>
<li>population rate<br><strong>Gamma Distribution</strong></li>
</ul>
</li>
<li><p>two parameters:</p>
<ul>
<li>population shape</li>
<li>population rate</li>
</ul>
</li>
<li><p>the reason why we want to know the population parameters is to ensure that the results drawn from our experiment are <em>reproducible</em></p>
</li>
<li><p>the more data that we have, the more confidence we can have in the accuracy of the estimates. One of the main goals in statistics is quantifying how much confidence we can hsve in population estimates</p>
<ul>
<li>specially, statisticians often calculate <strong>p-values</strong> and <strong>confidence intervals</strong> to quantify the confidence in the estimated parameters</li>
</ul>
</li>
</ul>
<h3 id="Estimating-the-Mean-Variance-and-Standard-Deviation"><a href="#Estimating-the-Mean-Variance-and-Standard-Deviation" class="headerlink" title="Estimating the Mean, Variance and Standard Deviation"></a>Estimating the Mean, Variance and Standard Deviation</h3><ul>
<li><strong>sample mean</strong>: statisticians often use the symbol x-bar to refer to the <strong>estimated mean</strong> &#x3D;&#x3D; <strong>sample mean</strong> and they use the Greek symbol U(mu) to refer to the <strong>population mean</strong></li>
<li>The estimated mean is different from the population mean, but with more and more data, x-bar should get closer and closer</li>
<li><strong>population variance</strong> and <strong>standard deviation</strong><ul>
<li>determine how wide to make the curve</li>
<li>we want to calculate how the data are spread around the <strong>population mean</strong><img src="/2020/12/21/Statistics-Fundation/population-variance.png" class="" title="Population Variance"></li>
</ul>
</li>
<li>in the <strong>variance</strong> the unit is squared.<ul>
<li>the population variance is the average of the squared differences between the data and the population mean U.</li>
<li>we square these differences to prevent the ones on the left from canceling the ones on the right, and then take the average</li>
</ul>
</li>
<li><strong>population standard deviation</strong>: <ul>
<li>square root of <strong>population variance</strong></li>
<li>the standard deviation is the original units that we measured, we can draw it on the graph.</li>
</ul>
</li>
<li><strong>estimated population variance</strong><ul>
<li>change population mean to estimated population mean</li>
<li>change n to n-1: dividing by <strong>n-1</strong> compensates for the fact that we are calculating differences from the <strong>sample mean</strong> instead of the <strong>population mean</strong></li>
</ul>
</li>
<li><strong>estimated population standard deviation</strong><ul>
<li>square root of <strong>estimated population variance</strong></li>
</ul>
</li>
<li>Summary<ul>
<li>if we have all of the data from a population, we can calculate the <strong>population mean</strong>. when we don’t have the population data, we can <strong>estimate the population mean</strong> with the same formula</li>
<li>when we have the population data, we can calculate the <strong>population variance</strong> and <strong>standard deviation</strong></li>
<li>However, we almost never have the <strong>population data</strong> so chances are you should not use these formulas. Instead, we almost always estimate the <strong>variance</strong> and <strong>standard deviation</strong></li>
</ul>
</li>
</ul>
<h2 id="What-is-a-Model"><a href="#What-is-a-Model" class="headerlink" title="What is a Model"></a>What is a Model</h2><ol>
<li>we use models to explore <strong>relationships</strong></li>
<li>we use statistices to determine how useful and how reliable our model is.</li>
</ol>
<h3 id="Hypothesis-Testing-Null-Hypothesis-and-Alternative-Hypothesese"><a href="#Hypothesis-Testing-Null-Hypothesis-and-Alternative-Hypothesese" class="headerlink" title="Hypothesis Testing, Null Hypothesis and Alternative Hypothesese"></a>Hypothesis Testing, Null Hypothesis and Alternative Hypothesese</h3><p>We can create a hypothesis, and if data give us strong evidence that the hypothesis is wrong, then we can <strong>reject the hypothesis</strong>.<br>But when we have data that is similar to the hypothesis, but not exactly the same then the best we can do is <strong>fail to reject the hypothesis</strong></p>
<ul>
<li><p><strong>Null Hypothesis</strong>: the hypothesis that is no difference between things</p>
<ul>
<li>the Null Hypothesis does not require preliminary data, because the only value that represents no difference is 0.</li>
</ul>
</li>
<li><p>in the statistical test, it needs three things</p>
<ul>
<li>it needs datas</li>
<li>it needs a <strong>Null</strong> or <strong>Primary Hypothesis</strong> (i.e. it needs something to <strong>reject</strong> or <strong>fail to reject</strong>)</li>
<li>it needs alternative hypothesis</li>
</ul>
</li>
<li><p>When we only have two groups of data, the <strong>Alternative Hypothesis</strong> is pretty obvious because it is simply the opposite of the <strong>Null Hypothesis</strong></p>
</li>
</ul>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.youtube.com/playlist?list=PLblh5JKOoLUK0FLuzwntyYI10UQFUhsY9">StatQuest with Josh Starmer</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <tags>
        <tag>video course</tag>
        <tag>Statistics</tag>
      </tags>
  </entry>
  <entry>
    <title>Support Vector Machines Main Idea</title>
    <url>/2020/12/23/SVM-Concept/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="SVM-Support-Vector-Machines"><a href="#SVM-Support-Vector-Machines" class="headerlink" title="SVM - Support Vector Machines"></a>SVM - Support Vector Machines</h2><ul>
<li>The shortest distance between the <strong>observations</strong> and the threshold is called the <strong>margin</strong>. The distances between the observations and the threshold are the same and both reflect the <strong>margin</strong>. When the threshold is halfway between the two observations, the <strong>margin</strong> is as large as it can be<ul>
<li><strong>observation</strong>: records on the tables&#x2F;rows</li>
</ul>
</li>
<li><strong>Maximal Margin Classifier</strong>: when we use the threshold that gives us the largest <strong>margin</strong> to make classifications<ul>
<li><strong>Maximal Margin Classifiers</strong> are super sensitive to outliers in the training data and that makes them pretty lame</li>
</ul>
</li>
<li><strong>Soft Margin</strong>: when we allow misclassifications, the distance between the observations and the threshold is called soft margin<ul>
<li>To make a threshold that is not so sensitive to outliers we must <strong>allow misclassifications</strong></li>
<li>choosing a threshold that allows a misclassifications is an example of the <strong>Bias&#x2F;Variance Tradeoff</strong>. </li>
<li>In other words, before we alloed misclassifications, we picked a threshold that was very sensitive to the training data (low bias) and it performed poorly when we got new data (high variance)</li>
<li>In contrast, when we picked a threshold that was less sensitive to the training data and allowed misclassifications (higher bias) but it performed better when we got new data (low variance)</li>
</ul>
</li>
<li>How to determin which <strong>Soft Margin</strong><ul>
<li>we use cross validation to determine how many classifications and observations to allow inside of the <strong>Soft Margin</strong> to get the best classification</li>
</ul>
</li>
<li>when we use a <strong>Soft Margin</strong> to determine the location of a threshold, then we are using a <strong>Soft Margin Classifier</strong> aka a <strong>Support Vector Classifier</strong> to classify observations <ul>
<li>the name <strong>Support Vector Classifier</strong> comes from the fact that the observations on the edge and within the <strong>Soft Margin</strong> are called <strong>Support Vectors</strong></li>
<li>when the data are <strong>2-Dimentional</strong>, the <strong>Support Vector Classifier</strong> forms a line</li>
<li>when the data are <strong>3-Dimentional</strong>, the <strong>Support Vector Classifier</strong> forms a plane instead of a line, and we classify new observations by determining which side of the plane they are on.</li>
</ul>
</li>
<li>all flat affine subspaces are called <strong>hyperplanes</strong></li>
<li><strong>Support Vector Classifier</strong> can <ul>
<li>handle outliers</li>
<li>allow misclassifications</li>
<li>handle overlapping classifications</li>
</ul>
</li>
<li><strong>Support Vector Machines</strong><ol>
<li>start with data in a relatively low dimension</li>
<li>move the data into a higher dimension</li>
<li>find a <strong>Support Vector Classifier</strong> that separates the higher dimensional data into two groups</li>
</ol>
</li>
<li>Question: How to transform data from low dimension to higher dimension?<ul>
<li>In order to make the mathematics possible, <strong>Support Vector Machines</strong> use something called <strong>Kernel Functions</strong> to systemaically find <strong>Support Vector Classifiers</strong> in higher dimensions<img src="/2020/12/23/SVM-Concept/kernel.jpg" class="" title="Kernel">
<ul>
<li><strong>Polynomial Kernel</strong> <ul>
<li>it systematically increases dimensions by setting <em>d</em>, the degree of the polynomial and the relationships between each pair of observations are used to find a <strong>Support Vector Classifier</strong> </li>
<li>we can find a good value for <em>d</em> with <strong>Cross Validation</strong></li>
</ul>
</li>
<li><strong>Radial Kernel</strong><ul>
<li>aka <strong>Radial Basis Function (RBF) Kernel</strong></li>
<li>it finds <strong>Support Vector Classifiers</strong> in infinite dimensions</li>
<li>when using it on a new observation, the <strong>Radial Kernel</strong> behaves like a <strong>Weighted Nearest Neighbour</strong> model. The closest observations aka the nearest neighours have a lot of influence on how we classify the new observation and the observations that are further away have relatively little influence on the classification</li>
</ul>
</li>
</ul>
</li>
<li><strong>Kernel Functions</strong> only calculate the relationships between every pair of points as if they are in the higher dimensions; they don’t actually do the transformation. <ul>
<li>This trick, calculating the high dimensional relationships without actually transforming the data to the higher dimensions, is called <strong>The Kernel Trick</strong></li>
<li><strong>The Kernel Trick</strong> reduces the amount of computation required for <strong>Support Vector Machines</strong> by avoiding the math that transforms the data from low to high dimensions and it makes calculating relationships in the infinite dimensions used by the <strong>Radial Kernel</strong> possible</li>
</ul>
</li>
</ul>
</li>
</ul>
<img src="/2020/12/23/SVM-Concept/SVM.png" class="" title="SVM">

<h3 id="The-Polynomial-Kernel"><a href="#The-Polynomial-Kernel" class="headerlink" title="The Polynomial Kernel"></a>The Polynomial Kernel</h3><ul>
<li>Formula: <strong>(a*b+r)^d</strong><ul>
<li><strong>a</strong> and <strong>b</strong> refer to two different observations in the dataset</li>
<li><strong>r</strong> determines the coefficient of the polynomial</li>
<li><strong>d</strong> sets the degree of the polynomial</li>
<li>r and d are determined using <strong>Cross Validation</strong></li>
</ul>
</li>
<li><strong>Dot Product</strong><ul>
<li>the first terms multiplied together (x axis) + the second therms multiplied together (y axis) + the third terms multiplied together (z axis)</li>
<li>the <strong>dot product</strong> gives us the high-dimensional coordinates for the data</li>
</ul>
</li>
<li><strong>Polynomial Kernel</strong> computes relationships between pairs of observations<ul>
<li>once we deicde on values for <strong>r</strong> and <strong>d</strong>, we just plug in the observations and do the math to get the high-dimensional relationships</li>
</ul>
</li>
</ul>
<h3 id="The-Radial-Kernel"><a href="#The-Radial-Kernel" class="headerlink" title="The Radial Kernel"></a>The Radial Kernel</h3><p>aka <strong>the Radial Basis Function, RBF</strong></p>
<ul>
<li>Formula: <img src="/2020/12/23/SVM-Concept/the-radial-kernel-formula.png" class="" title="Radial Kernel Formula"> <ul>
<li>&#x3D; high-dimensional relationships</li>
<li><strong>a</strong> and <strong>b</strong> refer to two different observations in the dataset</li>
<li>the difference between the measurements is then squared, giving us the squared distance between the two observations</li>
<li>the amount of influence one observation has on another is a function of the squared distance</li>
<li><strong>gamma</strong>, which is determined by <strong>Cross Validation</strong>, scales the squared distance, and thus, it scales the influence<ul>
<li>the further two observations are from each other, the less influence they have on each other</li>
</ul>
</li>
</ul>
</li>
<li>Just like with the <strong>Polynomial Kernel</strong>, when we plug values into the Radial Kernel, we get the high-dimensional relationship</li>
<li>Based on the <strong>Taylor Series Expansion</strong>, we can see when we plug numbers into the <strong>Radial Kernel</strong> and do the math. The value we get at the end is the relationship between the two points in <strong>infinite-dimensions</strong></li>
</ul>
<h4 id="Taylor-Series-Expansion-Based-on-The-Radial-Kernel"><a href="#Taylor-Series-Expansion-Based-on-The-Radial-Kernel" class="headerlink" title="Taylor Series Expansion Based on The Radial Kernel"></a>Taylor Series Expansion Based on The Radial Kernel</h4><p><strong>Taylor Series</strong>: f(x) can be split into an infinite sum</p>
<ul>
<li><p><strong>a</strong> can be any value as long as <strong>f(a)</strong> exists</p>
<img src="/2020/12/23/SVM-Concept/taylor-series.jpeg" class="" title="Taylor Series">
<p>set gamma as 1&#x2F;2, and let’s create the <strong>Taylor Series Expansion</strong> of this last term</p>
<img src="/2020/12/23/SVM-Concept/taylor-series-1.png" class="" title="Taylor Series Expansion"></li>
<li><p>the derivative of e^x &#x3D; e^x</p>
</li>
<li><p>set x0 &#x3D; 0</p>
<img src="/2020/12/23/SVM-Concept/taylor-series-expension.png" class="" title="Taylor Series Expension">
</li>
<li><p>when we added up a bunch of <strong>Polynomial Kernels</strong> with r&#x3D;0 and <strong>d</strong> going from <strong>0</strong> to <strong>infinity</strong>, we got a <strong>Dot Product</strong> with coordinates for an infinite number of dimensions</p>
<img src="/2020/12/23/SVM-Concept/polynomial-kernels-0.jpg" class="" title="Polynomial Kernel">
</li>
<li><p>Thus each term in this <strong>Taylor Series Expension</strong> contains a <strong>Polynomial Kernel</strong> with <strong>r&#x3D;0</strong> and <strong>d</strong> going from 0 to infinity</p>
</li>
<li><p><strong>Dot Product</strong> for <strong>e^ab</strong> is</p>
<img src="/2020/12/23/SVM-Concept/dot-product-taylor.jpg" class="" title="Dot Product for e^ab">
<ul>
<li>we can verify that the <strong>Dot Product</strong> is correct by multiplying each term together</li>
<li>add up the new terms to get the <strong>Taylor Series Expansion</strong> of <strong>e^ab</strong></li>
</ul>
</li>
</ul>
<img src="/2020/12/23/SVM-Concept/radial-kernel-taylor.jpg" class="" title="Radial Kernel Taylor Expension">
<ul>
<li>we just multiply both parts of the <strong>Dot Product</strong> by the square root of this term<img src="/2020/12/23/SVM-Concept/radial-kernel-root.jpg" class="" title="Radial Kernel Root"></li>
<li>we see that the <strong>Radial Kernel</strong> is equal to a <strong>Dot Product</strong> that has coordinates for an infinite number of dimensions<img src="/2020/12/23/SVM-Concept/dot-product-radial-kernel.jpg" class="" title="Radial Kernel Dot Product"></li>
</ul>
<h4 id="Maclaurine’s-series"><a href="#Maclaurine’s-series" class="headerlink" title="Maclaurine’s series"></a>Maclaurine’s series</h4><p>A <strong>Maclaurin Series</strong> is a Taylor Series where <strong>a &#x3D; 0</strong></p>
<img src="/2020/12/23/SVM-Concept/maclaurin-expansion.png" class="" title="Maclaurin Series Basics">

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.youtube.com/watch?v=efR1C6CvhmE">Support Vector Machines, Main Ideas</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.youtube.com/watch?v=Toet3EiSFcM">Support Vector Machines Part 2: The Polynomial Kernel</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.youtube.com/watch?v=Qc5IyLW_hns">Support Vector Machines Part 3: The Radial (RBF) Kernel</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Data Science</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>video course</tag>
        <tag>Support Vector Machine</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1200MinimumAbsoluteDifference</title>
    <url>/2022/07/04/LC1200MinimumAbsoluteDifference/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements.<br>Return a list of pairs in ascending order(with respect to pairs), each pair [a, b] follows</p>
<ul>
<li>a, b are from arr</li>
<li>a &lt; b</li>
<li>b - a equals to the minimum absolute difference of any two elements in arr</li>
</ul>
<p>Example 1:<br>Input: arr &#x3D; [4,2,1,3]<br>Output: [[1,2],[2,3],[3,4]]<br>Explanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.</p>
<p>Example 2:<br>Input: arr &#x3D; [1,3,6,10,15]<br>Output: [[1,3]]</p>
<p>Example 3:<br>Input: arr &#x3D; [3,8,-10,23,19,-4,-14,27]<br>Output: [[-14,-10],[19,23],[23,27]]</p>
<p>Constraints:<br>2 &lt;&#x3D; arr.length &lt;&#x3D; 105<br>-106 &lt;&#x3D; arr[i] &lt;&#x3D; 106</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The smallest difference must exist in the difference between two adjacent numbers after sorting</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(nlogn) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minimumAbsDifference</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        diff = &#123;&#125;</span><br><span class="line">        arr.sort()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">            gap = arr[i] - arr[i-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> gap <span class="keyword">not</span> <span class="keyword">in</span> diff:</span><br><span class="line">                diff[gap] = [[arr[i-<span class="number">1</span>], arr[i]]]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                diff[gap].append([arr[i-<span class="number">1</span>], arr[i]])</span><br><span class="line">        minKey = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> key, val <span class="keyword">in</span> diff.items():</span><br><span class="line">            <span class="keyword">if</span> key &lt; minKey:</span><br><span class="line">                minKey= key</span><br><span class="line">                ans = val</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p>Optimize space complexity</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(nlogn) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minimumAbsDifference</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        arr.sort()</span><br><span class="line">        minDiff = arr[<span class="number">1</span>] - arr[<span class="number">0</span>]</span><br><span class="line">        ans = [[arr[<span class="number">0</span>], arr[<span class="number">1</span>]]]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(arr) &gt;<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">                diff = arr[i] - arr[i-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span> diff &lt; minDiff:</span><br><span class="line">                    minDiff = diff</span><br><span class="line">                    ans = [[arr[i-<span class="number">1</span>], arr[i]]]</span><br><span class="line">                <span class="keyword">elif</span> diff == minDiff:</span><br><span class="line">                    ans.append([arr[i-<span class="number">1</span>], arr[i]])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="comment">#Runtime: 335 ms, faster than 99.47% of Python3 online submissions for Minimum Absolute Difference.</span></span><br><span class="line"><span class="comment">#Memory Usage: 28.8 MB, less than 83.82% of Python3 online submissions for Minimum Absolute Difference.</span></span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/minimum-absolute-difference/">1200. Minimum Absolute Difference</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>easy</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello, Notion!!</title>
    <url>/2020/12/24/Notion-2021-v1/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Techo"><a href="#Techo" class="headerlink" title="Techo"></a>Techo</h2><p>I am a big fan of kinds of notebooks and I am addicted to taking notes. In November 2019, I spend $50 on Kokuyo Jibun Techo. I got hooked on this type of way to record my daily life. I stick to it during the covid and somehow I gave up after this September. </p>
<h3 id="Kokuyo-Jibun-Techo"><a href="#Kokuyo-Jibun-Techo" class="headerlink" title="Kokuyo Jibun Techo"></a>Kokuyo Jibun Techo</h3><p>A complete set of Kokuyo Jibun Techo includes three sub-books: <em><strong>Diary, Life and Idea</strong></em>. Diary is a daily account with a timeline as the main body. There are various lists in Life, such as life dreams, travel plans, etc., and Idea is a grid book for recording daily essays and inspirations.</p>
<img src="/2020/12/24/Notion-2021-v1/Kokuyo.jpg" class="" title="Kokuyo">

<h3 id="Notion"><a href="#Notion" class="headerlink" title="Notion"></a>Notion</h3><p>Notion is my currently favourite note-taking application. From my perspective, it beats Microsoft OneNote and any other note-taking applications. I can do customized design based on my own preference. Due to my previous experience on Kokuyo Jibun Techo, I do have some novel ideas to make an electronical techo for myself and for the coming 2021.</p>
<h3 id="My-First-Notion"><a href="#My-First-Notion" class="headerlink" title="My First Notion"></a>My First Notion</h3><p>I don’t think I’m naturally intelligent, but I find that I don’t seem to know what renunciation is ~ I hope I never give up on the unknown future.</p>
<h4 id="Homepage"><a href="#Homepage" class="headerlink" title="Homepage"></a>Homepage</h4><ul>
<li><strong>HomePage</strong><ul>
<li><strong>2021 Techo</strong><ul>
<li>my plan for 2021</li>
</ul>
</li>
<li><strong>Life</strong><ul>
<li>important events</li>
<li>yearly goals</li>
</ul>
</li>
<li><strong>Lists</strong><ul>
<li>reading list</li>
<li>travel plans</li>
<li>journeys</li>
</ul>
</li>
<li><strong>Study</strong></li>
<li><strong>Work</strong></li>
</ul>
</li>
</ul>
<img src="/2020/12/24/Notion-2021-v1/hana-notion-home.png" class="" title="Hana Homepage">
<p><em><div align="center">Fig. 1: Hana Notion Homepage</div></em></p>
<img src="/2020/12/24/Notion-2021-v1/my-life-page.png" class="" title="My Life">
<p><em><div align="center">Fig. 2: Hana Notion My Life Page</div></em></p>
<h4 id="2021-Techo"><a href="#2021-Techo" class="headerlink" title="2021 Techo"></a>2021 Techo</h4><ul>
<li><strong>2021 Techo</strong><ul>
<li><strong>Inbox</strong><ul>
<li>inspirations</li>
<li>mood</li>
<li>favourite paragraphs picked up on a daily basis</li>
</ul>
</li>
<li><strong>Roommate Home</strong></li>
<li><strong>Motto</strong></li>
<li><strong>2021 Time Management</strong><ul>
<li>monthly plan from Jan to Dec</li>
</ul>
</li>
<li><strong>2021 Budget</strong><ul>
<li>monthly budget from Jan to Dec</li>
</ul>
</li>
<li><strong>2021 Yearly</strong><ul>
<li>yearly calendar</li>
<li>my 2021 targets</li>
<li>the way to hit the targets</li>
</ul>
</li>
</ul>
</li>
</ul>
<img src="/2020/12/24/Notion-2021-v1/year-2021.png" class="" width="2021" title="Techo">
<p><em><div align="center">Fig. 3: Hana Notion 2021 Techo</div></em></p>
<img src="/2020/12/24/Notion-2021-v1/room-home-1.png" class="" title="Roommate Home Page1">
<p><em><div align="center">Fig. 4: Hana Notion Roommate Home Page1</div></em></p>
<img src="/2020/12/24/Notion-2021-v1/room-home-2.png" class="" title="Roommate Home Page2">
<p><em><div align="center">Fig. 5: Hana Notion Roommate Home Page1</div></em></p>
<img src="/2020/12/24/Notion-2021-v1/monthly-plan-1.png" class="" title="Monthly Plan Page1">
<p><em><div align="center">Fig. 6: Hana Notion Monthly Plan Page1</div></em></p>
<img src="/2020/12/24/Notion-2021-v1/monthly-plan-2.png" class="" title="Monthly Plan Page2">
<p><em><div align="center">Fig. 7: Hana Notion Monthly Plan Page2</div></em></p>
<img src="/2020/12/24/Notion-2021-v1/budget-page.png" class="" title="Budget Plan Page2">
<p><em><div align="center">Fig. 8: Hana Notion Budget Plan Page</div></em></p>
<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>My younger brother recommended this application to me yesterday and I started using this app after I woke up this morning. It is a little bit hard for me to find my own way to design my own notion. All the color match, layouts and design took me a long time. I suppose to do some study today but I was addicted to notion. I feel satisfied that I have something done at least. I like my current design and I may change all the design one day. Looking forward to my second version of Hana’s Notion~</p>
<p>By the way, today is Christmas Eve. Julian’s family shouted me a yummy dinner tonight. I appreciate it. Merry Christmas 🎄</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.youtube.com/channel/UCoSvlWS5XcwaSzIcbuJ-Ysg">Notion </a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.flaticon.com/packs/peru-48">Peru Icon Pack </a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Other</category>
      </categories>
      <tags>
        <tag>Notion</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Change the Owner of Power Apps Apps</title>
    <url>/2024/08/03/PowerAppsOwnerChange/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Gathering-Information-Needed-To-Change-The-Power-Apps-App-Owner"><a href="#Gathering-Information-Needed-To-Change-The-Power-Apps-App-Owner" class="headerlink" title="Gathering Information Needed To Change The Power Apps App Owner"></a><strong>Gathering Information Needed To Change The Power Apps App Owner</strong></h1><p>To change the owner of a Power Apps app we will need to gather 3 pieces of information:</p>
<ul>
<li>Environment ID from the Power Apps maker portal</li>
<li>App ID from the Power Apps maker portal</li>
<li>User Account Object ID from Azure Active Directory</li>
</ul>
<h2 id="Obtain-The-Environment-ID"><a href="#Obtain-The-Environment-ID" class="headerlink" title="Obtain The Environment ID"></a><strong>Obtain The Environment ID</strong></h2><p>Open <a href="https://make.powerapps.com/">make.powerapps.com</a> and open the settings menu. Choose <em>developer resources</em>.</p>
<img src="/2024/08/03/PowerAppsOwnerChange/PowerAppsSetting.png" class="" title="test">

<p>The Environment ID will appear in the developer resources menu： </p>
<p>6955xxxx-fxxx-4xxx-axxx-2bxxxxxxxxxx</p>
<img src="/2024/08/03/PowerAppsOwnerChange/envid.png" class="" title="envid">


<h2 id="Get-The-Power-Apps-App-ID"><a href="#Get-The-Power-Apps-App-ID" class="headerlink" title="Get The Power Apps App ID"></a><strong>Get The Power Apps App ID</strong></h2><p>Go to the Apps menu in the maker portal, select the three dots beside the app then click Details.</p>
<img src="/2024/08/03/PowerAppsOwnerChange/appid.png" class="" title="appid">

<p>The App ID will appear in the Details menu： </p>
<p>edxxxxxx-5xxx-4xxx-axxx-66xxxxxxxxxx</p>
<img src="/2024/08/03/PowerAppsOwnerChange/appiddetails.png" class="" title="appiddetails">

<p>Currently, you can see the Owner of the App is Hexuan Weng.</p>
<img src="/2024/08/03/PowerAppsOwnerChange/currentowner.png" class="" title="current owner">

<h2 id="Find-The-New-Owner’s-User-Account-Object-ID"><a href="#Find-The-New-Owner’s-User-Account-Object-ID" class="headerlink" title="Find The New Owner’s User Account Object ID"></a><strong>Find The New Owner’s User Account Object ID</strong></h2><p>Login to <a href="https://portal.azure.com/">portal.azure.com</a> and search for the user account you want to transfer ownership to. In this case we will make a user called <em>Power Platform Service Account</em> the Owner.</p>
<img src="/2024/08/03/PowerAppsOwnerChange/accountobjectid.png" class="">

<p>The Object ID will appear in the user’s profile.</p>
<p>dexxxxxx-fxxx-4xxx-8xxx-f1xxxxxxxxxx</p>
<img src="/2024/08/03/PowerAppsOwnerChange/objectid.png" class="">


<h1 id="Method-1-Change-Power-Apps-App-Owner-With-A-Flow"><a href="#Method-1-Change-Power-Apps-App-Owner-With-A-Flow" class="headerlink" title="Method 1: Change Power Apps App Owner With A Flow"></a><strong>Method 1: Change Power Apps App Owner With A Flow</strong></h1><p>The first way we can change the owner of a Power Apps app is by building a flow to transfer ownership. Create a new Power Automate flow with an instant trigger. Name the flow <em>Change App Owner</em>, select <em>Manually trigger a flow</em> then click <em>Create</em>.</p>
<img src="/2024/08/03/PowerAppsOwnerChange/changepowerappflow.png" class="">

<p>Add the flow action <em>Power Apps For Admins – Set App Owner</em> with the following parameters and fill in the environment name, Power App Name and New PowerApp Owner with the unique identifiers we gathered earlier.</p>
<img src="/2024/08/03/PowerAppsOwnerChange/powerappsforadmin.png" class="">

<img src="/2024/08/03/PowerAppsOwnerChange/setappowner.png" class="">


<p>Run the flow.</p>
<img src="/2024/08/03/PowerAppsOwnerChange/runflow.png" class="">


<p>The Power Platform Service Account now owns the app.</p>
<img src="/2024/08/03/PowerAppsOwnerChange/ownerupdated.png" class="">


<h1 id="Method-2-Change-Power-Apps-App-Owner-With-PowerShell"><a href="#Method-2-Change-Power-Apps-App-Owner-With-PowerShell" class="headerlink" title="Method 2: Change Power Apps App Owner With PowerShell"></a><strong>Method 2: Change Power Apps App Owner With PowerShell</strong></h1><p>If you like to use PowerShell for automating administrative tasks there is a <a href="https://docs.microsoft.com/en-us/power-platform/admin/powerapps-powershell">robust library of Power Apps cmdlets</a> including a <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powerapps.administration.powershell/set-adminpowerappowner?view=pa-ps-latest">cmdlet to set the Power App owner</a>. Open the Windows PowerShell ISE and <em>Run as administrator</em>.</p>
<img src="/2024/08/03/PowerAppsOwnerChange/powershell.png" class="">


<p>Create a new script called <em>ChangeAppOwner.ps1</em>…</p>
<img src="/2024/08/03/PowerAppsOwnerChange/powershellISE.png" class="">


<img src="/2024/08/03/PowerAppsOwnerChange/powershellcommand.png" class="">


<p>…and paste the following code into the text editor. Switch the environment name, app name and new app owner with your own information then press the green play button to execute the script.</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$EnvironmentName</span> = <span class="string">&#x27;6955xxxx-fxxx-4xxx-axxx-2bxxxxxxxxxx&#x27;</span></span><br><span class="line"><span class="variable">$AppName</span> = <span class="string">&#x27;edxxxxxx-5xxx-4xxx-axxx-66xxxxxxxxxx&#x27;</span></span><br><span class="line"><span class="variable">$NewAppOwner</span> = <span class="string">&#x27;dexxxxxx-fxxx-4xxx-8xxx-f1xxxxxxxxxx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Set-AdminPowerAppOwner</span> –AppName <span class="variable">$AppName</span> <span class="literal">-AppOwner</span> <span class="variable">$NewAppOwner</span> –EnvironmentName <span class="variable">$EnvironmentName</span></span><br></pre></td></tr></table></figure>

<h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><img src="/2024/08/03/PowerAppsOwnerChange/adminpermission.png" class="">


<p>There are a couple of possibilites</p>
<ol>
<li>You need to be a Global Admin or AAD Admin in the tenant to run the “Admin” commands. Are you a global admin?</li>
<li>Are you supplying the GUIDS for the Appname, Environment, and AppOwner? The examples all show guids, rather than just names.</li>
</ol>
<h1 id="Method-3-Change-Power-Apps-App-Owner-Using-The-Center-Of-Excellence-Starter-Kit"><a href="#Method-3-Change-Power-Apps-App-Owner-Using-The-Center-Of-Excellence-Starter-Kit" class="headerlink" title="Method 3: Change Power Apps App Owner Using The Center Of Excellence Starter Kit"></a><strong>Method 3: Change Power Apps App Owner Using The Center Of Excellence Starter Kit</strong></h1><p>The <a href="https://docs.microsoft.com/en-us/power-platform/guidance/coe/starter-kit">Power Apps Center Of Excellence Starter Kit</a> offers the easiest way to change a Power Apps App owner. Open the canvas app called <em>Admin – App Permission Center</em> that is included in the CoE Starter Kit. Browse to the app’s environment, select the app from the list and then click <em>Add Permissions</em>.</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.microsoft.com/en-us/power-platform/admin/powerapps-powershell">Power Apps cmdlets</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://docs.microsoft.com/en-us/power-platform/guidance/coe/starter-kit">Power Apps Center Of Excellence Starter Kit</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Microsoft Power Platform</category>
      </categories>
      <tags>
        <tag>Power Apps</tag>
      </tags>
  </entry>
  <entry>
    <title>LC871 - Minimum Number of Refueling Stops</title>
    <url>/2022/07/03/LC871MinimumNumberofRefuelingStops/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A car travels from a starting position to a destination which is target miles east of the starting position.<br>There are gas stations along the way. The gas stations are represented as an array stations where stations[i] &#x3D; [positioni, fueli] indicates that the ith gas station is positioni miles east of the starting position and has fueli liters of gas.<br>The car starts with an infinite tank of gas, which initially has startFuel liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.<br>Return the minimum number of refueling stops the car must make in order to reach its destination. If it cannot reach the destination, return -1.<br>Note that if the car reaches a gas station with 0 fuel left, the car can still refuel there. If the car reaches the destination with 0 fuel left, it is still considered to have arrived.</p>
<p>Example 1:<br>Input: target &#x3D; 1, startFuel &#x3D; 1, stations &#x3D; []<br>Output: 0<br>Explanation: We can reach the target without refueling.</p>
<p>Example 2:<br>Input: target &#x3D; 100, startFuel &#x3D; 1, stations &#x3D; [[10,100]]<br>Output: -1<br>Explanation: We can not reach the target (or even the first gas station).</p>
<p>Example 3:<br>Input: target &#x3D; 100, startFuel &#x3D; 10, stations &#x3D; [[10,60],[20,30],[30,30],[60,40]]<br>Output: 2<br>Explanation: We start with 10 liters of fuel.<br>We drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.<br>Then, we drive from position 10 to position 60 (expending 50 liters of fuel),<br>and refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.<br>We made 2 refueling stops along the way, so we return 2.</p>
<p>Constraints:<br>1 &lt;&#x3D; target, startFuel &lt;&#x3D; 109<br>0 &lt;&#x3D; stations.length &lt;&#x3D; 500<br>0 &lt;&#x3D; positioni &lt;&#x3D; positioni+1 &lt; target<br>1 &lt;&#x3D; fueli &lt; 109</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>You can think of passing the gas station equivalent as an opportunity to refuel at any time<br>The problem is transformed into when the gas in the car is 0, select the largest gas station (implemented with a large top stack) from the gas stations that have passed by to achieve the goal of passing the least gas station<br>Unreachable if oil is 0 and the big top stack is empty and the current position is not at the target point</p>
<p>Heapify in python is the smallest heap stored, so store negative numbers when storing, and then add a negative sign when fetching</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minRefuelStops</span>(<span class="params">self, target: <span class="built_in">int</span>, startFuel: <span class="built_in">int</span>, stations: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        curFuel = startFuel</span><br><span class="line">        heap = []</span><br><span class="line">        stations.append([target, <span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> distance, fuel <span class="keyword">in</span> stations:</span><br><span class="line">            <span class="keyword">while</span> curFuel &lt; distance:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> heap: <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">                curFuel += -heappop(heap)</span><br><span class="line">                ans+=<span class="number">1</span></span><br><span class="line">            heappush(heap, -fuel)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/minimum-number-of-refueling-stops/">871. Minimum Number of Refueling Stops</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>easy</tag>
        <tag>Greedy</tag>
        <tag>Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1765 - Map of Highest Peak</title>
    <url>/2022/07/05/LC1765MapofHighestPeak/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer matrix isWater of size m x n that represents a map of land and water cells.<br>If isWater[i][j] &#x3D;&#x3D; 0, cell (i, j) is a land cell.<br>If isWater[i][j] &#x3D;&#x3D; 1, cell (i, j) is a water cell.<br>You must assign each cell a height in a way that follows these rules:<br>The height of each cell must be non-negative.<br>If the cell is a water cell, its height must be 0.<br>Any two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).<br>Find an assignment of heights such that the maximum height in the matrix is maximized.<br>Return an integer matrix height of size m x n where height[i][j] is cell (i, j)’s height. If there are multiple solutions, return any of them.</p>
<p>Example 1:</p>
<img src="/2022/07/05/LC1765MapofHighestPeak/example1.png" class="" title="example1">

<p>Input: isWater &#x3D; [[0,1],[0,0]]<br>Output: [[1,0],[2,1]]<br>Explanation: The image shows the assigned heights of each cell.<br>The blue cell is the water cell, and the green cells are the land cells.</p>
<p>Example 2:</p>
<img src="/2022/07/05/LC1765MapofHighestPeak/example2.png" class="" title="example2">
<p>Input: isWater &#x3D; [[0,0,1],[1,0,0],[0,0,0]]<br>Output: [[1,1,0],[0,1,1],[1,2,2]]<br>Explanation: A height of 2 is the maximum possible height of any assignment.<br>Any height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.</p>
<p>Constraints:<br>m &#x3D;&#x3D; isWater.length<br>n &#x3D;&#x3D; isWater[i].length<br>1 &lt;&#x3D; m, n &lt;&#x3D; 1000<br>isWater[i][j] is 0 or 1.<br>There is at least one water cell.</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><ol>
<li>First store the iswater value of 1 (water area) in the queue</li>
<li>Perform a breadth-first search on the queue</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(mn) time | O(mn) space</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">highestPeak</span>(<span class="params">self, isWater: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        m, n = <span class="built_in">len</span>(isWater), <span class="built_in">len</span>(isWater[<span class="number">0</span>])</span><br><span class="line">        ans = [[val -<span class="number">1</span> <span class="keyword">for</span> val <span class="keyword">in</span> row] <span class="keyword">for</span> row <span class="keyword">in</span> isWater]</span><br><span class="line">        queue = deque([])</span><br><span class="line">        <span class="comment"># store all the water area into the queue</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> isWater[row][col] == <span class="number">1</span>:</span><br><span class="line">                    queue.append((row, col))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># bfs</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            r, c = queue.popleft()</span><br><span class="line">            <span class="keyword">for</span> dx, dy <span class="keyword">in</span> [(<span class="number">1</span>,<span class="number">0</span>),(-<span class="number">1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">0</span>,-<span class="number">1</span>)]:</span><br><span class="line">                nx, ny = r+dx, c+dy</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span>&lt;= nx &lt; m <span class="keyword">and</span> <span class="number">0</span> &lt;= ny &lt; n <span class="keyword">and</span> ans[nx][ny] == -<span class="number">1</span>:</span><br><span class="line">                    ans[nx][ny] = ans[r][c]+<span class="number">1</span></span><br><span class="line">                    queue.append((nx,ny))</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/map-of-highest-peak/">1765. Map of Highest Peak</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Breadth First Search</tag>
        <tag>medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1217 - Minimum Cost to Move Chips to the Same Position</title>
    <url>/2022/07/08/LC1217MinimumCosttoMoveChipstoTheSamePosition/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>We have n chips, where the position of the ith chip is position[i].<br>We need to move all the chips to the same position. In one step, we can change the position of the ith chip from position[i] to:<br>position[i] + 2 or position[i] - 2 with cost &#x3D; 0.<br>position[i] + 1 or position[i] - 1 with cost &#x3D; 1.<br>Return the minimum cost needed to move all the chips to the same position.</p>
<p>Example 1:</p>
<img src="/2022/07/08/LC1217MinimumCosttoMoveChipstoTheSamePosition/chips_e1.jpg" class="" title="chips_e1">
<p>Input: position &#x3D; [1,2,3]<br>Output: 1<br>Explanation: First step: Move the chip at position 3 to position 1 with cost &#x3D; 0.<br>Second step: Move the chip at position 2 to position 1 with cost &#x3D; 1.<br>Total cost is 1.</p>
<p>Example 2:</p>

<p>Input: position &#x3D; [2,2,2,3,3]<br>Output: 2<br>Explanation: We can move the two chips at position  3 to position 2. Each move has cost &#x3D; 1. The total cost &#x3D; 2.</p>
<p>Example 3:<br>Input: position &#x3D; [1,1000000000]<br>Output: 1 </p>
<p>Constraints:<br>1 &lt;&#x3D; position.length &lt;&#x3D; 100<br>1 &lt;&#x3D; position[i] &lt;&#x3D; 10^9</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>This is a greedy problem, you need to realize that the cost is not related to the specific location, only the parity of the location<br>The cost for each chip move is:</p>
<ul>
<li>Move <strong>two locations</strong> with 0 cost</li>
<li>Moving <strong>one position</strong> has a cost of 1 easy to get: the cost of moving from odd-numbered bits to odd-numbered bits is always 0, and the cost of moving from even-numbered bits to even-numbered bits is always 0.</li>
</ul>
<h3 id="Method1"><a href="#Method1" class="headerlink" title="Method1"></a>Method1</h3><p>Use a dictionary to store the number of times the coin appears at each position, then iterate over the dictionary and sum the parity separately.<br>Returns the smaller of two odd and even numbers.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minCostToMoveChips</span>(<span class="params">self, position: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        coins = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> coin <span class="keyword">in</span> position:</span><br><span class="line">            <span class="keyword">if</span> coin <span class="keyword">not</span> <span class="keyword">in</span> coins:</span><br><span class="line">                coins[coin] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                coins[coin] +=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        odd, even = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> key, val <span class="keyword">in</span> coins.items():</span><br><span class="line">            <span class="keyword">if</span> key % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                even += val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                odd += val</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(even, odd)</span><br></pre></td></tr></table></figure>

<h3 id="Optimize-space-complexity"><a href="#Optimize-space-complexity" class="headerlink" title="Optimize space complexity"></a>Optimize space complexity</h3><p>Determine the parity directly when traversing the input, and then add 1 to the result of the parity</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minCostToMoveChips</span>(<span class="params">self, position: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:        </span><br><span class="line">        odd, even = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> position:</span><br><span class="line">            <span class="keyword">if</span> val % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                even += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                odd += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(even, odd)</span><br></pre></td></tr></table></figure>

<h3 id="Pythonic-Version"><a href="#Pythonic-Version" class="headerlink" title="Pythonic Version"></a>Pythonic Version</h3><p>Determine if it is odd:</p>
<ol>
<li>cur % 2 &#x3D;&#x3D; 1</li>
<li>cur &amp; 1</li>
</ol>
<h4 id=""><a href="#" class="headerlink" title="&amp;"></a>&amp;</h4><p>It is a bitwise AND operation. In bitwise binary operations, the two numbers in their binary form are processed by their corresponding bits. So 1 is only one bit. It will be compared to last bit of a number. So a&amp;1 will return 1 if last bit of 1 is 1 and zero otherwise.</p>
<h4 id="-1"><a href="#-1" class="headerlink" title=":&#x3D;"></a>:&#x3D;</h4><p><a href="https://docs.python.org/3/whatsnew/3.8.html#assignment-expressions">starting in Python 3.8</a>, <code>:=</code> is actually a valid operator that allows for assignment of variables within expressions</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minCostToMoveChips</span>(<span class="params">self, position: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(odds := <span class="built_in">sum</span>(p &amp; <span class="number">1</span> <span class="keyword">for</span> p <span class="keyword">in</span> position), <span class="built_in">len</span>(position) - odds)</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/minimum-cost-to-move-chips-to-the-same-position/">1217. Minimum Cost to Move Chips to The Same Position</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>easy</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LC127 - Word Ladder</title>
    <url>/2022/07/08/LC127WordLadder/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -&gt; s1 -&gt; s2 -&gt; … -&gt; sk such that:<br>Every adjacent pair of words differs by a single letter.<br>Every si for 1 &lt;&#x3D; i &lt;&#x3D; k is in wordList. Note that beginWord does not need to be in wordList.<br>sk &#x3D;&#x3D; endWord<br>Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.</p>
<p>Example 1:<br>Input: beginWord &#x3D; “hit”, endWord &#x3D; “cog”, wordList &#x3D; [“hot”,”dot”,”dog”,”lot”,”log”,”cog”]<br>Output: 5<br>Explanation: One shortest transformation sequence is “hit” -&gt; “hot” -&gt; “dot” -&gt; “dog” -&gt; cog”, which is 5 words long.</p>
<p>Example 2:<br>Input: beginWord &#x3D; “hit”, endWord &#x3D; “cog”, wordList &#x3D; [“hot”,”dot”,”dog”,”lot”,”log”]<br>Output: 0<br>Explanation: The endWord “cog” is not in wordList, therefore there is no valid transformation sequence.</p>
<p>Constraints:<br>1 &lt;&#x3D; beginWord.length &lt;&#x3D; 10<br>endWord.length &#x3D;&#x3D; beginWord.length<br>1 &lt;&#x3D; wordList.length &lt;&#x3D; 5000<br>wordList[i].length &#x3D;&#x3D; beginWord.length<br>beginWord, endWord, and wordList[i] consist of lowercase English letters.<br>beginWord !&#x3D; endWord<br>All the words in wordList are unique.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Think of words as nodes, and bring out the adjacent nodes of the next layer from one node, and use BFS to do it.</li>
<li>Maintain a queue, let the starting word enter the queue, the level is 1, and then dequeue it for investigation.</li>
<li>Turn each character into one of the 26 letters to see if it is in the word list, if so, the new word is the conversion word for the next level.</li>
<li>enqueue it, its level +1, and delete the word from the word list.</li>
<li>Dequeue, enqueue… Repeat, when the dequeued word is the same as the end word, the end word is encountered, and its level is returned.</li>
<li>When the queue is empty, it means that all words have been examined, no end word has been encountered, and there is no path leading to the end.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(N×C^2) time | O(N×C^2) space</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ladderLength</span>(<span class="params">self, beginWord: <span class="built_in">str</span>, endWord: <span class="built_in">str</span>, wordList: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        wordSet = <span class="built_in">set</span>(wordList)</span><br><span class="line">        n = <span class="built_in">len</span>(endWord)</span><br><span class="line">        queue = deque([(beginWord,<span class="number">1</span>)])</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            word, step = queue.popleft()</span><br><span class="line">            <span class="keyword">if</span> word == endWord:</span><br><span class="line">                <span class="keyword">return</span> step</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(word)):</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>)+<span class="number">1</span>):</span><br><span class="line">                    temp = word[:w] + <span class="built_in">chr</span>(i) + word[w+<span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">if</span> temp <span class="keyword">in</span> wordSet:</span><br><span class="line">                        queue.append((temp, step+<span class="number">1</span>))</span><br><span class="line">                        wordSet.remove(temp)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/word-ladder/">127. Word Ladder</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>hard</tag>
        <tag>Breadth First Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LC648 - Replace Words</title>
    <url>/2022/07/07/LC648ReplaceWords/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>In English, we have a concept called root, which can be followed by some other word to form another longer word - let’s call this word successor. For example, when the root “an” is followed by the successor word “other”, we can form a new word “another”.<br>Given a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. If a successor can be replaced by more than one root, replace it with the root that has the shortest length.<br>Return the sentence after the replacement.</p>
<p>Example 1:<br>Input: dictionary &#x3D; [“cat”,”bat”,”rat”], sentence &#x3D; “the cattle was rattled by the battery”<br>Output: “the cat was rat by the bat”</p>
<p>Example 2:<br>Input: dictionary &#x3D; [“a”,”b”,”c”], sentence &#x3D; “aadsfasf absbs bbab cadsfafs”<br>Output: “a a b c”</p>
<p>Constraints:<br>1 &lt;&#x3D; dictionary.length &lt;&#x3D; 1000<br>1 &lt;&#x3D; dictionary[i].length &lt;&#x3D; 100<br>dictionary[i] consists of only lower-case letters.<br>1 &lt;&#x3D; sentence.length &lt;&#x3D; 106<br>sentence consists of only lower-case letters and spaces.<br>The number of words in sentence is in the range [1, 1000]<br>The length of each word in sentence is in the range [1, 1000]<br>Every two consecutive words in sentence will be separated by exactly one space.<br>sentence does not have leading or trailing spaces.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>Put all the words in the dictionary into the hash set (<strong>word in dictionary</strong> is faster in the hash set, if it is a list, it will require O(n) complexity)</li>
<li>Split the sentence into several words according to spaces</li>
<li>Traverse each word, if the current word appears in the hash set, replace the word and break the loop</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n^2) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">replaceWords</span>(<span class="params">self, dictionary: <span class="type">List</span>[<span class="built_in">str</span>], sentence: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        words = sentence.split()</span><br><span class="line">        dictionary = <span class="built_in">set</span>(dictionary)</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(words)):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(words[w])):</span><br><span class="line">                <span class="keyword">if</span> words[w][:i] <span class="keyword">in</span> dictionary:</span><br><span class="line">                    words[w] = words[w][:i]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>.join(words)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Runtime: 206 ms, faster than 52.69% of Python3 online submissions for Replace Words.</span></span><br><span class="line"><span class="comment">#Memory Usage: 18.3 MB, less than 98.64% of Python3 online submissions for Replace Words.</span></span><br></pre></td></tr></table></figure>

<p>To-do: Trie </p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/replace-words/">648. Replace Words</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Hashmap</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1162 - as Far From Land as Possible</title>
    <url>/2022/07/06/LC1162AsFarFromLandAsPossible/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return -1.<br>The distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.</p>
<p>Example 1:</p>
<img src="/2022/07/06/LC1162AsFarFromLandAsPossible/example1.png" class="" title="example1">
<p>Input: grid &#x3D; [[1,0,1],[0,0,0],[1,0,1]]<br>Output: 2<br>Explanation: The cell (1, 1) is as far as possible from all the land with distance 2.</p>
<p>Example 2:</p>
<img src="/2022/07/06/LC1162AsFarFromLandAsPossible/example2.png" class="" title="example2">
<p>Input: grid &#x3D; [[1,0,0],[0,0,0],[0,0,0]]<br>Output: 4<br>Explanation: The cell (2, 2) is as far as possible from all the land with distance 4.</p>
<p>Constraints:<br>n &#x3D;&#x3D; grid.length<br>n &#x3D;&#x3D; grid[i].length<br>1 &lt;&#x3D; n &lt;&#x3D; 100<br>grid[i][j] is 0 or 1</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>This question can be done using the multi-source breadth-first search method I did yesterday</p>
<ol>
<li>First save the coordinates of the current land to the queue</li>
<li>Then start the breadth-first search through these coordinates</li>
<li>In the process of traversing, the distance should be reduced by 1</li>
</ol>
<p>Note: because if it is all land or all water, it returns -1</p>
<img src="/2022/07/06/LC1162AsFarFromLandAsPossible/bfs.png" class="" title="bfs">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n^2) time | O(n^2) space </span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxDistance</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(grid)</span><br><span class="line">        queue = deque([])</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> grid[r][c]:</span><br><span class="line">                    queue.append((r,c))</span><br><span class="line">        maxi = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            row, col = queue.popleft()</span><br><span class="line">            <span class="keyword">for</span> dx, dy <span class="keyword">in</span> [(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">0</span>,-<span class="number">1</span>),(<span class="number">1</span>,<span class="number">0</span>),(-<span class="number">1</span>,<span class="number">0</span>)]:</span><br><span class="line">                nx, ny = row+dx, col+dy</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span>&lt;= nx &lt; n <span class="keyword">and</span> <span class="number">0</span>&lt;=ny&lt;n <span class="keyword">and</span> grid[nx][ny] == <span class="number">0</span>:</span><br><span class="line">                    grid[nx][ny] = grid[row][col] +<span class="number">1</span></span><br><span class="line">                    queue.append((nx,ny))</span><br><span class="line">                    <span class="keyword">if</span> grid[nx][ny] &gt; maxi:</span><br><span class="line">                        maxi = grid[nx][ny] -<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> maxi</span><br></pre></td></tr></table></figure>



<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/as-far-from-land-as-possible/">1162. As Far from Land as Possible</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/map-of-highest-peak/">1765. Map of Highest Peak</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://hexuanweng.github.io/2022/07/05/LC1765MapofHighestPeak/">1765. Solutions</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Breadth First Search</tag>
        <tag>medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LC676 - Implement Magic Dictionary</title>
    <url>/2022/07/11/LC676ImplementMagicDictionary/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.<br>Implement the MagicDictionary class:<br>MagicDictionary() Initializes the object.<br>void buildDict(String[] dictionary) Sets the data structure with an array of distinct strings dictionary.<br>bool search(String searchWord) Returns true if you can change exactly one character in searchWord to match any string in the data structure, otherwise returns false.</p>
<p>Example 1:<br>Input<br>[“MagicDictionary”, “buildDict”, “search”, “search”, “search”, “search”]<br>[[], [[“hello”, “leetcode”]], [“hello”], [“hhllo”], [“hell”], [“leetcoded”]]<br>Output<br>[null, null, false, true, false, false]<br>Explanation<br>MagicDictionary magicDictionary &#x3D; new MagicDictionary();<br>magicDictionary.buildDict([“hello”, “leetcode”]);<br>magicDictionary.search(“hello”); &#x2F;&#x2F; return False<br>magicDictionary.search(“hhllo”); &#x2F;&#x2F; We can change the second ‘h’ to ‘e’ to match “hello” so we return True<br>magicDictionary.search(“hell”); &#x2F;&#x2F; return False<br>magicDictionary.search(“leetcoded”); &#x2F;&#x2F; return False</p>
<p>Constraints:<br>1 &lt;&#x3D; dictionary.length &lt;&#x3D; 100<br>1 &lt;&#x3D; dictionary[i].length &lt;&#x3D; 100<br>dictionary[i] consists of only lower-case English letters.<br>All the strings in dictionary are distinct.<br>1 &lt;&#x3D; searchWord.length &lt;&#x3D; 100<br>searchWord consists of only lower-case English letters.<br>buildDict will be called only once before search.<br>At most 100 calls will be made to search.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>All strings in the buildDict(String[] dictionary) method are stored in the hash set</li>
<li>Traverse all elements in the set, use double pointers (l, r) and a variable (diff) to determine how many elements in the two strings are different, if diff &#x3D;&#x3D; 1, return True directly, if all elements in the set are compared Returns False if it has not returned True<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MagicDictionary</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">dict</span> = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">buildDict</span>(<span class="params">self, dictionary: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> dictionary:</span><br><span class="line">            <span class="variable language_">self</span>.<span class="built_in">dict</span>.add(word)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, searchWord: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable language_">self</span>.<span class="built_in">dict</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(item) != <span class="built_in">len</span>(searchWord) <span class="keyword">or</span> item == searchWord:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            diff = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(item)):</span><br><span class="line">                <span class="keyword">if</span> item[i] != searchWord[i]:</span><br><span class="line">                    diff+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> diff &gt;<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> diff == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MagicDictionary object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MagicDictionary()</span></span><br><span class="line"><span class="comment"># obj.buildDict(dictionary)</span></span><br><span class="line"><span class="comment"># param_2 = obj.search(searchWord)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Runtime: 111 ms, faster than 93.47% of Python3 online submissions for Implement Magic Dictionary.</span></span><br><span class="line"><span class="comment">#Memory Usage: 14.2 MB, less than 80.94% of Python3 online submissions for Implement Magic Dictionary.</span></span><br></pre></td></tr></table></figure></li>
</ul>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/implement-magic-dictionary/">676. Implement Magic Dictionary</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch Tutorial - Linear Model</title>
    <url>/2022/07/12/PyTorch-P2/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Linear-Model"><a href="#Linear-Model" class="headerlink" title="Linear Model"></a>Linear Model</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. import libraries</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. Dataset</span></span><br><span class="line">x_data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">y_data = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. Design Model</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">x,w</span>):</span><br><span class="line">    <span class="keyword">return</span> x*w</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. define loss function</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loss</span>(<span class="params">x, y, y_pred</span>):</span><br><span class="line">    <span class="comment"># y_pred = forward(x)</span></span><br><span class="line">    loss = (y_pred - y) **<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> loss</span><br><span class="line"></span><br><span class="line"><span class="comment"># create lists to store weights and mse result</span></span><br><span class="line">w_list = []</span><br><span class="line">mse_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># Exhaustive Attack method/Brute Force Method</span></span><br><span class="line"><span class="comment"># get MSE under different weights</span></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> np.arange(<span class="number">0.0</span>, <span class="number">4.1</span>, <span class="number">0.1</span>):</span><br><span class="line">    l_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x_val, y_val <span class="keyword">in</span> <span class="built_in">zip</span>(x_data, y_data):</span><br><span class="line">        y_pred_val = forward(x_val, w)</span><br><span class="line">        loss_val = loss(x_val, y_val, y_pred_val)</span><br><span class="line">        l_sum += loss_val</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>, x_val, y_val, y_pred_val, loss_val)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;MSE=&quot;</span>, l_sum/<span class="built_in">len</span>(x_data))</span><br><span class="line">    w_list.append(w)</span><br><span class="line">    mse_list.append(l_sum/<span class="built_in">len</span>(x_data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># visualization</span></span><br><span class="line">plt.plot(w_list, mse_list)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Loss&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<img src="/2022/07/12/PyTorch-P2/p2.png" class="" title="p2">

<h3 id="Assignment"><a href="#Assignment" class="headerlink" title="Assignment"></a>Assignment</h3><p>Try to use the model: <strong>y &#x3D; x*w + b</strong>, and draw the cost graph.</p>
<p>Tips:</p>
<ul>
<li>You can read the material of how to draw 3d graph. [link]</li>
<li>Function np.meshgrid() is very popular for drawing 3d graph, read the [docs] and utilize vectorization calculation.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x_data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">y_data = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">x,w,b</span>):</span><br><span class="line">    y = x*w+b</span><br><span class="line">    <span class="keyword">return</span> y </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loss</span>(<span class="params">y, y_pred</span>):</span><br><span class="line">    loss = (y_pred-y)**<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> loss</span><br><span class="line"></span><br><span class="line">w_list = []</span><br><span class="line">b_list = []</span><br><span class="line">mse_list = []</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> np.arange(<span class="number">0.1</span>, <span class="number">4.1</span>, <span class="number">0.1</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> np.arange(-<span class="number">2.0</span>, <span class="number">2.1</span>, <span class="number">0.1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;w:&quot;</span>, w, <span class="string">&quot;b:&quot;</span>, b)</span><br><span class="line">        l_sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x_val, y_val <span class="keyword">in</span> <span class="built_in">zip</span>(x_data, y_data):</span><br><span class="line">            y_pred_val = forward(x_val, w, b)</span><br><span class="line">            loss_val = loss(y_val, y_pred_val)</span><br><span class="line">            l_sum += loss_val</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span>, x_val, y_val, y_pred_val, loss_val)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;MSE=&quot;</span>, l_sum/<span class="built_in">len</span>(x_data))</span><br><span class="line">        mse_list.append(l_sum/<span class="built_in">len</span>(x_data))</span><br><span class="line">        w_list.append(w)</span><br><span class="line">        b_list.append(b)</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">ax.plot3D(w_list, b_list, mse_list)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="/2022/07/12/PyTorch-P2/p2-ass.png" class="" title="p2-assignment">

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.bilibili.com/video/BV1Y7411d7Ys?p=2">PyTorch Tutorial - P2 Linear Model</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Data Science</category>
      </categories>
      <tags>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>LC735 - Asteroid Collision</title>
    <url>/2022/07/13/LC735AsteroidCollision/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>We are given an array asteroids of integers representing asteroids in a row.<br>For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.<br>Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.</p>
<p>Example 1:<br>Input: asteroids &#x3D; [5,10,-5]<br>Output: [5,10]<br>Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.</p>
<p>Example 2:<br>Input: asteroids &#x3D; [8,-8]<br>Output: []<br>Explanation: The 8 and -8 collide exploding each other.</p>
<p>Example 3:<br>Input: asteroids &#x3D; [10,2,-5]<br>Output: [10]<br>Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.</p>
<p>Constraints:<br>2 &lt;&#x3D; asteroids.length &lt;&#x3D; 104<br>-1000 &lt;&#x3D; asteroids[i] &lt;&#x3D; 1000<br>asteroids[i] !&#x3D; 0</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Since collision cancellation always occurs between adjacent planets, we can use “stacks” to simulate this process.</p>
<p>Process all the ats[i] from the front to the back, and use the stack to store the planets that are not currently offset. When the direction of the top element of the stack is to the right, and the current ats[i]ats[i] direction is to the left, the offset will occur. Operation, the offset process can be carried out according to the rules.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">asteroidCollision</span>(<span class="params">self, asteroids: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> star <span class="keyword">in</span> asteroids:</span><br><span class="line">            <span class="keyword">while</span> ans <span class="keyword">and</span> ans[-<span class="number">1</span>] &gt; <span class="number">0</span> <span class="keyword">and</span> star &lt; <span class="number">0</span>:</span><br><span class="line">                pre, cur = ans[-<span class="number">1</span>], -star</span><br><span class="line">                <span class="keyword">if</span> pre &lt;= cur:</span><br><span class="line">                    ans.pop()</span><br><span class="line">                <span class="keyword">if</span> pre &gt;= cur:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans.append(star)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/asteroid-collision/">735. Asteroid Collision</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch Tutorial - Gradient Descent</title>
    <url>/2022/07/14/PyTorch-P3/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># prepare the training data</span></span><br><span class="line">x_data = [<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>]</span><br><span class="line">y_data = [<span class="number">2.0</span>, <span class="number">4.0</span>, <span class="number">6.0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize guess of weight</span></span><br><span class="line">w = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># define the linear model</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> w*x</span><br><span class="line"></span><br><span class="line"><span class="comment"># cost function</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cost</span>(<span class="params">xs, ys</span>):</span><br><span class="line">    cost = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(xs, ys):</span><br><span class="line">        y_pred = forward(x)</span><br><span class="line">        cost += (y_pred - y) **<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> cost/<span class="built_in">len</span>(xs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># define the gradient</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradient</span>(<span class="params">xs, ys</span>):</span><br><span class="line">    grad = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(xs, ys):</span><br><span class="line">        grad += <span class="number">2</span>*x*(x*w-y)</span><br><span class="line">    <span class="keyword">return</span> grad/<span class="built_in">len</span>(xs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># training process</span></span><br><span class="line">epoch_list = []</span><br><span class="line">cost_list = []</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;predict (before training):&#x27;</span>, <span class="number">4</span>, forward(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    cost_val = cost(x_data, y_data)</span><br><span class="line">    grad_val = gradient(x_data, y_data)</span><br><span class="line">    w -= <span class="number">0.01</span> * grad_val</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;epoch:&#x27;</span>, epoch, <span class="string">&quot;w=&quot;</span>, w, <span class="string">&#x27;loss:&#x27;</span>, cost_val)</span><br><span class="line">    epoch_list.append(epoch)</span><br><span class="line">    cost_list.append(cost_val)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;predict (after training):&#x27;</span>, <span class="number">4</span>, forward(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#visualization</span></span><br><span class="line">plt.plot(epoch_list, cost_list)</span><br><span class="line">plt.ylabel(<span class="string">&quot;cost&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;epoch&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="/2022/07/14/PyTorch-P3/p3-1.png" class="" title="p3-1">


<h2 id="Stochastic-Gradient-Descent"><a href="#Stochastic-Gradient-Descent" class="headerlink" title="Stochastic Gradient Descent"></a>Stochastic Gradient Descent</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># prepare the training dataset</span></span><br><span class="line">x_data = [<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>]</span><br><span class="line">y_data = [<span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize w</span></span><br><span class="line">w = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># define the linear model</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> w*x </span><br><span class="line"></span><br><span class="line"><span class="comment"># define the loss function</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loss</span>(<span class="params">x, y</span>):</span><br><span class="line">    y_pred = forward(x)</span><br><span class="line">    <span class="keyword">return</span> (y_pred - y) **<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># define the stochastic gradient descent function</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradient</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*x*(x*w-y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># training process </span></span><br><span class="line">epoch_list = []</span><br><span class="line">loss_list = []</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;predict (before training):&#x27;</span>, <span class="number">4</span>, forward(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(x_data, y_data):</span><br><span class="line">        l = loss(x, y)</span><br><span class="line">        grad = gradient(x, y)</span><br><span class="line">        w -= <span class="number">0.01</span> * grad</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\tgradient:&quot;</span>, x, y, grad)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;process: &quot;</span>, epoch, <span class="string">&quot;w=&quot;</span>, w, <span class="string">&quot;loss=&quot;</span>, l)</span><br><span class="line">    epoch_list.append(epoch)</span><br><span class="line">    loss_list.append(l)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;predict (after training)&quot;</span>, <span class="number">4</span>, forward(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># visualization</span></span><br><span class="line">plt.plot(epoch_list, loss_list)</span><br><span class="line">plt.ylabel(<span class="string">&quot;loss&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;epoch&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="/2022/07/14/PyTorch-P3/p3-2.png" class="" title="p3-2">


<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.bilibili.com/video/BV1Y7411d7Ys?p=3">PyTorch Tutorial - P3 Gradient Descent</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Data Science</category>
      </categories>
      <tags>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch Tutorial - Backpropagation</title>
    <url>/2022/07/14/PyTorch-P4/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">a = torch.tensor([<span class="number">1.0</span>])</span><br><span class="line">a.requires_grad = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">#tensor([1.], requires_grad=True)</span></span><br><span class="line"><span class="built_in">print</span>(a.data) <span class="comment">#tensor([1.])</span></span><br><span class="line"><span class="built_in">print</span>(a.<span class="built_in">type</span>()) <span class="comment">#torch.FloatTensor</span></span><br><span class="line"><span class="built_in">print</span>(a.data.<span class="built_in">type</span>()) <span class="comment">#torch.FloatTensor</span></span><br><span class="line"><span class="built_in">print</span>(a.grad) <span class="comment">#None</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a.grad)) </span><br><span class="line"><span class="built_in">print</span>(a.item()) <span class="comment"># 1.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a.item())) <span class="comment">#&lt;class &#x27;float&#x27;&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Backpropagation"><a href="#Backpropagation" class="headerlink" title="Backpropagation"></a>Backpropagation</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># prepare the training data</span></span><br><span class="line">x_data = [<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>]</span><br><span class="line">y_data = [<span class="number">2.0</span>, <span class="number">4.0</span>, <span class="number">6.0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize weights</span></span><br><span class="line">w = torch.tensor([<span class="number">1.0</span>])</span><br><span class="line">w.requires_grad = <span class="literal">True</span> <span class="comment"># need to calculate the gradient </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># define a linear model</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> w*x <span class="comment"># this is a tensor</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># define a loss function</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loss</span>(<span class="params">x, y</span>):</span><br><span class="line">    y_pred = forward(x)</span><br><span class="line">    <span class="keyword">return</span> (y_pred-y)**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># training process</span></span><br><span class="line">epoch_list = []</span><br><span class="line">loss_list = []</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;prediction (before training):&quot;</span>, <span class="number">4</span>, forward(<span class="number">4</span>).item())</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(x_data, y_data):</span><br><span class="line">        l = loss(x, y) <span class="comment"># l is a tensor. Tensor is to build computational graph</span></span><br><span class="line">        l.backward() <span class="comment"># backward, compute grad for Tensor whose requires_grad == True</span></span><br><span class="line">        <span class="comment"># in the previous lecture: grad = 2*x*(x*w-y)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\tgrad: &quot;</span>, x, y, w.grad.item())</span><br><span class="line">        w.data -= <span class="number">0.01</span>*w.grad.data <span class="comment"># update the tensor, grad is a tensor here</span></span><br><span class="line"></span><br><span class="line">        w.grad.data.zero_()<span class="comment"># set the grad to zero</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;progress: &quot;</span>, epoch, l.item())</span><br><span class="line">    epoch_list.append(epoch)</span><br><span class="line">    loss_list.append(l.item())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;predict (after training): &quot;</span>, <span class="number">4</span>, forward(<span class="number">4</span>).item())</span><br><span class="line"></span><br><span class="line"><span class="comment"># visualization</span></span><br><span class="line">plt.plot(epoch_list, loss_list)</span><br><span class="line">plt.ylabel(<span class="string">&quot;loss&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;epoch&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<img src="/2022/07/14/PyTorch-P4/p4-4.png" class="" title="p4-4">

<h2 id="Exercise"><a href="#Exercise" class="headerlink" title="Exercise"></a>Exercise</h2><p>Exercise 4-1: </p>
<ul>
<li>Calculate the partial derivative of the loss with respect to the weight<img src="/2022/07/14/PyTorch-P4/p4-1.png" class="" title="p4-1"></li>
</ul>
<p>Exercise 4-2: </p>
<ul>
<li>Calculate the partial derivative of the loss with respect to the weight<img src="/2022/07/14/PyTorch-P4/p4-2.png" class="" title="p4-2"></li>
</ul>
<h2 id="Assignment"><a href="#Assignment" class="headerlink" title="Assignment"></a>Assignment</h2><p>Exercise 4-3: </p>
<ul>
<li>Calculate the partial derivative of the loss with respect to the weight</li>
<li>PyTorch Implementation<img src="/2022/07/14/PyTorch-P4/p4-3.png" class="" title="p4-3"></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># prepare training data</span></span><br><span class="line">x_data = [<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>]</span><br><span class="line">y_data = [<span class="number">2.0</span>, <span class="number">4.0</span>, <span class="number">6.0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize w1, w2, b</span></span><br><span class="line">w1 = torch.Tensor([<span class="number">1.0</span>])</span><br><span class="line">w1.requires_grad = <span class="literal">True</span></span><br><span class="line">w2 = torch.Tensor([<span class="number">1.0</span>])</span><br><span class="line">w2.requires_grad = <span class="literal">True</span></span><br><span class="line">b = torch.Tensor([<span class="number">1.0</span>])</span><br><span class="line">b.requires_grad = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># define linear model</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> w1*x**<span class="number">2</span> + w2*x+b</span><br><span class="line"></span><br><span class="line"><span class="comment"># define loss function -&gt; build up the computational graph</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loss</span>(<span class="params">x, y</span>): </span><br><span class="line">    y_pred = forward(x)</span><br><span class="line">    <span class="keyword">return</span> (y_pred - y) **<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## training process</span></span><br><span class="line">epoch_list = []</span><br><span class="line">loss_list = []</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Predict (before training):&#x27;</span>, <span class="number">4</span>, forward(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(x_data, y_data):</span><br><span class="line">        l = loss(x, y)</span><br><span class="line">        l.backward()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\tgradient: &quot;</span>, x, y, w1.grad.item(), w2.grad.item(), b.grad.item())</span><br><span class="line">        w1.data -= <span class="number">0.01</span> * w1.grad.data</span><br><span class="line">        w2.data -= <span class="number">0.01</span> * w2.grad.data</span><br><span class="line">        b.data -= <span class="number">0.01</span> * b.grad.data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># set tensor to zero</span></span><br><span class="line">        w1.grad.data.zero_()</span><br><span class="line">        w2.grad.data.zero_()</span><br><span class="line">        b.grad.data.zero_()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Epoch: &#x27;</span>, epoch, l.item())</span><br><span class="line">    epoch_list.append(epoch)</span><br><span class="line">    loss_list.append(l.item())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Predoct (after training):&quot;</span>, <span class="number">4</span>, forward(<span class="number">4</span>).item())</span><br><span class="line"></span><br><span class="line"><span class="comment"># visualization</span></span><br><span class="line">plt.plot(epoch_list, loss_list)</span><br><span class="line">plt.ylabel(<span class="string">&quot;loss&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;epoch&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>












<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.bilibili.com/video/BV1Y7411d7Ys?p=4">PyTorch Tutorial - P4 Backpropagation</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Data Science</category>
      </categories>
      <tags>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>LC - Weekly Contest 302</title>
    <url>/2022/07/17/LC-WeeklyContest302/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="2341-Maximum-Number-of-Pairs-in-Array"><a href="#2341-Maximum-Number-of-Pairs-in-Array" class="headerlink" title="2341. Maximum Number of Pairs in Array"></a><strong>2341. Maximum Number of Pairs in Array</strong></h2><ul>
<li>Store the nums value as the key, the frequency of each num as value</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numberOfPairs</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        h = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> num <span class="keyword">not</span> <span class="keyword">in</span> h:</span><br><span class="line">                h[num] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                h[num] +=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        cnt0 = <span class="number">0</span></span><br><span class="line">        cnt1 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> h.items():</span><br><span class="line">            temp0, temp1 = <span class="built_in">divmod</span>(v, <span class="number">2</span>)</span><br><span class="line">            cnt0+= temp0</span><br><span class="line">            cnt1+= temp1</span><br><span class="line">        <span class="keyword">return</span> [cnt0, cnt1]</span><br></pre></td></tr></table></figure>

<h2 id="2342-Max-Sum-of-a-Pair-With-Equal-Sum-of-Digits"><a href="#2342-Max-Sum-of-a-Pair-With-Equal-Sum-of-Digits" class="headerlink" title="2342. Max Sum of a Pair With Equal Sum of Digits"></a><strong>2342. Max Sum of a Pair With Equal Sum of Digits</strong></h2><ul>
<li>Store the sum of each digit in each num as the key, and store the values of the corresponding nums as the value</li>
<li>make the value sorted</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="keyword">from</span> sortedcontainers <span class="keyword">import</span> SortedList</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maximumSum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        h = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            s = <span class="number">0</span></span><br><span class="line">            temp = num</span><br><span class="line">            <span class="keyword">while</span> temp:</span><br><span class="line">                s += temp % <span class="number">10</span></span><br><span class="line">                temp//=<span class="number">10</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> s <span class="keyword">not</span> <span class="keyword">in</span> h:</span><br><span class="line">                h[s] = SortedList([num])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                h[s].add(num)</span><br><span class="line"></span><br><span class="line">        maxi = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> h.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(v) &lt;<span class="number">2</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            maxi = <span class="built_in">max</span>(maxi, v[-<span class="number">1</span>]+v[-<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">return</span> maxi</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2343-Query-Kth-Smallest-Trimmed-Number"><a href="#2343-Query-Kth-Smallest-Trimmed-Number" class="headerlink" title="2343. Query Kth Smallest Trimmed Number"></a><strong>2343. Query Kth Smallest Trimmed Number</strong></h2><ul>
<li>Trim the string based on the trim</li>
<li>store the index and result into arr</li>
<li>sort arr</li>
<li>get the kth smallest trimmed number</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(nm) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">smallestTrimmedNumbers</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">str</span>], queries: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        ans=[]</span><br><span class="line">        <span class="keyword">for</span> k,trim <span class="keyword">in</span> queries:</span><br><span class="line">            arr=[]</span><br><span class="line">            <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">                arr.append((v[-trim:],i))</span><br><span class="line">            arr.sort()</span><br><span class="line">            ans.append(arr[k-<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<h2 id="2344-Minimum-Deletions-to-Make-Array-Divisible"><a href="#2344-Minimum-Deletions-to-Make-Array-Divisible" class="headerlink" title="2344. Minimum Deletions to Make Array Divisible"></a><strong>2344. Minimum Deletions to Make Array Divisible</strong></h2><ul>
<li>use math.gcd to get the greatest common divisor of the list</li>
<li>sort the numbers list</li>
<li>travers numbers list and when the common divisor can divides the current number without a reminder, which means the current index is the number of deleted times</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(nlogn) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minOperations</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], numsDivide: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        cur = numsDivide[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> numsDivide[<span class="number">1</span>:]:</span><br><span class="line">            cur = math.gcd(cur, i)</span><br><span class="line"></span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> cur%v == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>The math.gcd() method returns the greatest common divisor of the two integers int1 and int2.</p>
<p>GCD is the largest common divisor that divides the numbers without a remainder.</p>
<p>GCD is also known as the highest common factor (HCF).</p>
<p>Tip: gcd(0,0) returns 0.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">math.gcd(int1, int2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># return An int value, representing the greatest common divisor (GCD) for two integers</span></span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/maximum-number-of-pairs-in-array/">2341. Maximum Number of Pairs in Array</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/max-sum-of-a-pair-with-equal-sum-of-digits/">2342. Max Sum of a Pair With Equal Sum of Digits</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/query-kth-smallest-trimed-number/">2343. Query Kth Smallest Trimmed Number</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">4.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/minimum-deletions-to-make-array-divisible/">2344. Minimum Deletions to Make Array Divisible</a><a href="#fnref:4" rev="footnote"> ↩</a></span></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">5.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.w3schools.com/python/ref_math_gcd.asp#:~:text=The%20math.,highest%20common%20factor%20(HCF).">Python math.gcd() Method</a><a href="#fnref:5" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Weekly Contest</tag>
      </tags>
  </entry>
  <entry>
    <title>LC565 - Array Nesting</title>
    <url>/2022/07/17/LC565ArrayNesting/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1].<br>You should build a set s[k] &#x3D; {nums[k], nums[nums[k]], nums[nums[nums[k]]], … } subjected to the following rule:<br>The first element in s[k] starts with the selection of the element nums[k] of index &#x3D; k.<br>The next element in s[k] should be nums[nums[k]], and then nums[nums[nums[k]]], and so on.<br>We stop adding right before a duplicate element occurs in s[k].<br>Return the longest length of a set s[k].</p>
<p>Example 1:<br>Input: nums &#x3D; [5,4,0,3,1,6,2]<br>Output: 4<br>Explanation:<br>nums[0] &#x3D; 5, nums[1] &#x3D; 4, nums[2] &#x3D; 0, nums[3] &#x3D; 3, nums[4] &#x3D; 1, nums[5] &#x3D; 6, nums[6] &#x3D; 2.<br>One of the longest sets s[k]:<br>s[0] &#x3D; {nums[0], nums[5], nums[6], nums[2]} &#x3D; {5, 6, 2, 0}</p>
<p>Example 2:<br>Input: nums &#x3D; [0,1,2]<br>Output: 1<br>Constraints:<br>1 &lt;&#x3D; nums.length &lt;&#x3D; 105<br>0 &lt;&#x3D; nums[i] &lt; nums.length<br>All the values of nums are unique.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>You can simulate directly according to the meaning of the question.</p>
<ul>
<li>traverse each nums[i] from front to back</li>
<li>in order to prevent some rings from being repeated Processing, for the current passing nums[i] is marked as −1, so that each number is accessed no more than 3 times, and the overall complexity is O(n).<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">arrayNesting</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> v == -<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            c, cur = i, v</span><br><span class="line">            cnt = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> cur != -<span class="number">1</span>:</span><br><span class="line">                nums[c] = -<span class="number">1</span></span><br><span class="line">                c, cur = cur, nums[cur]</span><br><span class="line">                cnt +=<span class="number">1</span></span><br><span class="line">            ans = <span class="built_in">max</span>(ans, cnt)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure></li>
</ul>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/array-nesting/">565. Array Nesting</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LC815 - Bus Routes</title>
    <url>/2022/07/18/LC815BusRoutes/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.<br>For example, if routes[0] &#x3D; [1, 5, 7], this means that the 0th bus travels in the sequence 1 -&gt; 5 -&gt; 7 -&gt; 1 -&gt; 5 -&gt; 7 -&gt; 1 -&gt; … forever.<br>You will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.<br>Return the least number of buses you must take to travel from source to target. Return -1 if it is not possible.</p>
<p>Example 1:<br>Input: routes &#x3D; [[1,2,7],[3,6,7]], source &#x3D; 1, target &#x3D; 6<br>Output: 2<br>Explanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.</p>
<p>Example 2:<br>Input: routes &#x3D; [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source &#x3D; 15, target &#x3D; 12<br>Output: -1<br>Constraints:<br>1 &lt;&#x3D; routes.length &lt;&#x3D; 500.<br>1 &lt;&#x3D; routes[i].length &lt;&#x3D; 105<br>All the values of routes[i] are unique.<br>sum(routes[i].length) &lt;&#x3D; 105<br>0 &lt;&#x3D; routes[i][j] &lt; 106<br>0 &lt;&#x3D; source, target &lt; 106</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>HashSet + BFS</li>
<li>we consider the index of the routes as the bus number, for each bus, we have several stops</li>
<li>we store the stops as the key, and the bus number as the value into the <strong>stops_hash</strong>. We also make each bus’ stops into a set as <strong>bus_set</strong></li>
<li>for the stops in one bus, we don’t need to worry about how many buses we need to transit. Therefore, we append the unvisited stops into the bus and the step +1. In this case, all the stops in one bus will have the same steps.</li>
<li>when the current stop equals target, we return steps.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numBusesToDestination</span>(<span class="params">self, routes: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], source: <span class="built_in">int</span>, target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        stops_hash = &#123;&#125;</span><br><span class="line">        buses_set = []</span><br><span class="line">        <span class="keyword">for</span> idx, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(routes):</span><br><span class="line">            buses_set.append(<span class="built_in">set</span>(value))</span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> value:</span><br><span class="line">                <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> stops_hash:</span><br><span class="line">                    stops_hash[v] = <span class="built_in">set</span>(&#123;idx&#125;)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    stops_hash[v].add(idx)</span><br><span class="line">        <span class="comment"># &#123;1: &#123;0&#125;, 2: &#123;0&#125;, 7: &#123;0, 1&#125;, 3: &#123;1&#125;, 6: &#123;1&#125;&#125; </span></span><br><span class="line">        <span class="comment"># [&#123;1, 2, 7&#125;, &#123;3, 6, 7&#125;]</span></span><br><span class="line">        </span><br><span class="line">        queue = deque([(source, <span class="number">0</span>)])</span><br><span class="line">        bus_visited = <span class="built_in">set</span>()</span><br><span class="line">        stop_visited = <span class="built_in">set</span>(&#123;source&#125;)</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            cur_stop, step = queue.popleft()</span><br><span class="line">            <span class="keyword">if</span> cur_stop == target:</span><br><span class="line">                <span class="keyword">return</span> step</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> bus <span class="keyword">in</span> stops_hash[cur_stop] - bus_visited:</span><br><span class="line">                <span class="keyword">for</span> stop <span class="keyword">in</span> buses_set[bus] - stop_visited:</span><br><span class="line">                    bus_visited.add(bus)</span><br><span class="line">                    stop_visited.add(stop)</span><br><span class="line">                    queue.append((stop, step+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/bus-routes/">815. Bus Routes</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>hard</tag>
        <tag>Breadth First Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LC210 - Course Schedule II</title>
    <url>/2022/07/21/LC210CourseScheduleII/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] &#x3D; [ai, bi] indicates that you must take course bi first if you want to take course ai.<br>For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.<br>Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.</p>
<p>Example 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: numCourses = 2, prerequisites = [[1,0]]</span><br><span class="line">Output: [0,1]</span><br><span class="line">Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].</span><br></pre></td></tr></table></figure>

<p>Example 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]</span><br><span class="line">Output: [0,2,1,3]</span><br><span class="line">Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.</span><br><span class="line">So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].</span><br></pre></td></tr></table></figure>

<p>Example 3:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: numCourses = 1, prerequisites = []</span><br><span class="line">Output: [0]</span><br></pre></td></tr></table></figure>

<p>Constraints:<br>1 &lt;&#x3D; numCourses &lt;&#x3D; 2000<br>0 &lt;&#x3D; prerequisites.length &lt;&#x3D; numCourses * (numCourses - 1)<br>prerequisites[i].length &#x3D;&#x3D; 2<br>0 &lt;&#x3D; ai, bi &lt; numCourses<br>ai !&#x3D; bi<br>All the pairs [ai, bi] are distinct.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Prerequesite is stored in courses: [following courses]</li>
<li>The number of pre-courses required for each course is stored in pre_nums</li>
<li>Traverse pre_nums, if the number of pre-courses of the current course is 0, append the course to the queue</li>
<li>After processing all pre_nums[nxt], enqueue all courses with an in-degree of 0 (meaning subjects without pre-course requirements), and run topological sorting. If the length ans of the sorted courses is equal to numCourses, return ans, otherwise return [].</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#O(n+m) time | O(n+m) space</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findOrder</span>(<span class="params">self, numCourses: <span class="built_in">int</span>, prerequisites: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        courses = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        pre_nums = [<span class="number">0</span>] * numCourses</span><br><span class="line">        queue = deque([])</span><br><span class="line">        <span class="keyword">for</span> cur, pre <span class="keyword">in</span> prerequisites:</span><br><span class="line">            courses[pre].append(cur)</span><br><span class="line">            pre_nums[cur] +=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numCourses):</span><br><span class="line">            <span class="keyword">if</span> pre_nums[i] == <span class="number">0</span>:</span><br><span class="line">                queue.append(i)</span><br><span class="line">        </span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            cur = queue.popleft()</span><br><span class="line">            ans.append(cur)</span><br><span class="line">            <span class="keyword">for</span> nxt <span class="keyword">in</span> courses[cur]:</span><br><span class="line">                pre_nums[nxt] -=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> pre_nums[nxt] == <span class="number">0</span>:</span><br><span class="line">                    queue.append(nxt)</span><br><span class="line">        <span class="keyword">return</span> ans <span class="keyword">if</span> <span class="built_in">len</span>(ans) == numCourses <span class="keyword">else</span> []</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/course-schedule/">207. Course Schedule</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/course-schedule-ii/">210. Course Schedule II</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Breadth First Search</tag>
        <tag>medium</tag>
        <tag>Topological Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>LC207 - Course Schedule</title>
    <url>/2022/07/21/LC207CourseSchedule/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] &#x3D; [ai, bi] indicates that you must take course bi first if you want to take course ai.<br>For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.<br>Return true if you can finish all courses. Otherwise, return false.</p>
<p>Example 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: numCourses = 2, prerequisites = [[1,0]]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: There are a total of 2 courses to take. </span><br><span class="line">To take course 1 you should have finished course 0. So it is possible.</span><br></pre></td></tr></table></figure>

<p>Example 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: numCourses = 2, prerequisites = [[1,0],[0,1]]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: There are a total of 2 courses to take. </span><br><span class="line">To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.</span><br></pre></td></tr></table></figure>

<p>Constraints:<br>1 &lt;&#x3D; numCourses &lt;&#x3D; 2000<br>0 &lt;&#x3D; prerequisites.length &lt;&#x3D; 5000<br>prerequisites[i].length &#x3D;&#x3D; 2<br>0 &lt;&#x3D; ai, bi &lt; numCourses<br>All the pairs prerequisites[i] are unique.</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><ul>
<li>Prerequesite is stored in courses: [following courses]</li>
<li>The number of pre-courses required for each course is stored in pre_nums</li>
<li>Traverse pre_nums, if the number of pre-courses of the current course is 0, append the course to the queue</li>
<li>When all pre_nums[nxt] are processed, enter all courses with an entry degree of 0 (meaning subjects without pre-course requirements) into the queue, and run the “topological sort” once, if all the number of prerequisite courses equals 0, stating that all courses can be completed.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(m+n) time | O(m+n) space</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canFinish</span>(<span class="params">self, numCourses: <span class="built_in">int</span>, prerequisites: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        courses = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        pre_nums = [<span class="number">0</span>] * numCourses</span><br><span class="line">        queue = deque([])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> cur, pre <span class="keyword">in</span> prerequisites:</span><br><span class="line">            courses[pre].append(cur)</span><br><span class="line">            pre_nums[cur] += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numCourses):</span><br><span class="line">            <span class="keyword">if</span> pre_nums[i] == <span class="number">0</span>:</span><br><span class="line">                queue.append(i)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            cur = queue.popleft()</span><br><span class="line">            <span class="keyword">for</span> nxt <span class="keyword">in</span> courses[cur]:</span><br><span class="line">                pre_nums[nxt] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> pre_nums[nxt] == <span class="number">0</span>:</span><br><span class="line">                    queue.append(nxt)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> pre_nums == [<span class="number">0</span>]*numCourses <span class="keyword">else</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>



<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/course-schedule/">207. Course Schedule</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/course-schedule-ii/">210. Course Schedule II</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Breadth First Search</tag>
        <tag>medium</tag>
        <tag>Topological Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>LC814 - Binary Tree Prunting</title>
    <url>/2022/07/21/LC814BinaryTreePrunting/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed.<br>A subtree of a node node is node plus every node that is a descendant of node.</p>
<p>Example 1:</p>
<img src="/2022/07/21/LC814BinaryTreePrunting/e1.png" class="" title="e1">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,null,0,0,1]</span><br><span class="line">Output: [1,null,0,null,1]</span><br><span class="line">Explanation: </span><br><span class="line">Only the red nodes satisfy the property &quot;every subtree not containing a 1&quot;.</span><br><span class="line">The diagram on the right represents the answer.</span><br></pre></td></tr></table></figure>

<p>Example 2:</p>
<img src="/2022/07/21/LC814BinaryTreePrunting/e2.png" class="" title="e2">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,0,1,0,0,0,1]</span><br><span class="line">Output: [1,null,1,null,1]</span><br></pre></td></tr></table></figure>

<p>Example 3:</p>
<img src="/2022/07/21/LC814BinaryTreePrunting/e3.png" class="" title="e3">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,1,0,1,1,0,1,0]</span><br><span class="line">Output: [1,1,0,1,1,null,1]</span><br></pre></td></tr></table></figure>
<p>Constraints:<br>The number of nodes in the tree is in the range [1, 200].<br>Node.val is either 0 or 1.</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>This is a <strong>post-order traversal</strong></p>
<p>If the following conditions are met, delete the current leaf node</p>
<ol>
<li>Left subtree is None</li>
<li>The right subtree is None</li>
<li>The current root value is 0</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pruneTree</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">Optional</span>[TreeNode]:</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        root.left = <span class="variable language_">self</span>.pruneTree(root.left)</span><br><span class="line">        root.right = <span class="variable language_">self</span>.pruneTree(root.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> root.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> root.right <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> root.val == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/binary-tree-pruning/">814. Binary Tree Pruning</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Recursion</tag>
        <tag>Depth First Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LC851 - Loud and Rich</title>
    <url>/2022/07/21/LC851LoudAndRich/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness.<br>You are given an array richer where richer[i] &#x3D; [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the ith person. All the given data in richer are logically correct (i.e., the data will not lead you to a situation where x is richer than y and y is richer than x at the same time).<br>Return an integer array answer where answer[x] &#x3D; y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people who definitely have equal to or more money than the person x.</p>
<p>Example 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]</span><br><span class="line">Output: [5,5,2,5,4,5,6,7]</span><br><span class="line">Explanation: </span><br><span class="line">answer[0] = 5.</span><br><span class="line">Person 5 has more money than 3, which has more money than 1, which has more money than 0.</span><br><span class="line">The only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.</span><br><span class="line">answer[7] = 7.</span><br><span class="line">Among all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.</span><br><span class="line">The other answers can be filled out with similar reasoning.</span><br></pre></td></tr></table></figure>

<p>Example 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: richer = [], quiet = [0]</span><br><span class="line">Output: [0]</span><br></pre></td></tr></table></figure>

<p>Constraints:<br>n &#x3D;&#x3D; quiet.length<br>1 &lt;&#x3D; n &lt;&#x3D; 500<br>0 &lt;&#x3D; quiet[i] &lt; n<br>All the values of quiet are unique.<br>0 &lt;&#x3D; richer.length &lt;&#x3D; n * (n - 1) &#x2F; 2<br>0 &lt;&#x3D; ai, bi &lt; n<br>ai !&#x3D; bi<br>All the pairs of richer are unique.<br>The observations in richer are all logically consistent.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><img src="/2022/07/21/LC851LoudAndRich/s1.png" class="" title="s1">

<ol>
<li>Draw the graph as required</li>
<li>Create a mapping table 【connect】: <ul>
<li>key: the vertex of the in-degree</li>
<li>value: which elements will this vertex of the in-degree point to</li>
</ul>
</li>
<li>Create an in-degree table 【degree】 ：<ul>
<li>key: the value of the vertex;<br> value: how many in-degree elements there are, for example, vertex 3 has 3 in-degree elements (if the vertex is an index, we only need to create an array&#x2F;list)</li>
</ul>
</li>
<li>Find the key&#x2F;index that are 0 in the in-degree table, that is, 2, 3, 5, 6, and put these values in the queue</li>
<li>Compare the quiet value of the current popleft value and the quiet value of the outdegree element, and update the element</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n+m) time | O(n+m) space</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">loudAndRich</span>(<span class="params">self, richer: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], quiet: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        n = <span class="built_in">len</span>(quiet)</span><br><span class="line">        connect = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        degree = [<span class="number">0</span>]*n</span><br><span class="line">        queue = deque()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> cur, nxt <span class="keyword">in</span> richer:</span><br><span class="line">            connect[cur].append(nxt)</span><br><span class="line">            degree[nxt] +=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> degree[i] == <span class="number">0</span>:</span><br><span class="line">                queue.append(i)</span><br><span class="line">        </span><br><span class="line">        ans = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            cur = queue.popleft()</span><br><span class="line">            <span class="keyword">for</span> nxt <span class="keyword">in</span> connect[cur]:</span><br><span class="line">                degree[nxt]-=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> degree[nxt] == <span class="number">0</span>:</span><br><span class="line">                    queue.append(nxt)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> quiet[ans[cur]] &lt; quiet[ans[nxt]]:</span><br><span class="line">                    ans[nxt] = ans[cur]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/loud-and-rich/">851. Loud and Rich</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Breadth First Search</tag>
        <tag>medium</tag>
        <tag>Topological Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1034 - Coloring a Border</title>
    <url>/2022/07/20/LC1034ColoringABorder/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an m x n integer matrix grid, and three integers row, col, and color. Each value in the grid represents the color of the grid square at that location.<br>Two squares belong to the same connected component if they have the same color and are next to each other in any of the 4 directions.<br>The border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column).<br>You should color the border of the connected component that contains the square grid[row][col] with color.<br>Return the final grid.</p>
<p>Example 1:<br>Input: grid &#x3D; [[1,1],[1,2]], row &#x3D; 0, col &#x3D; 0, color &#x3D; 3<br>Output: [[3,3],[3,2]]</p>
<p>Example 2:<br>Input: grid &#x3D; [[1,2,2],[2,3,2]], row &#x3D; 0, col &#x3D; 1, color &#x3D; 3<br>Output: [[1,3,3],[2,3,3]]</p>
<p>Example 3:<br>Input: grid &#x3D; [[1,1,1],[1,1,1],[1,1,1]], row &#x3D; 1, col &#x3D; 1, color &#x3D; 2<br>Output: [[2,2,2],[2,1,2],[2,2,2]]</p>
<p>Constraints:<br>m &#x3D;&#x3D; grid.length<br>n &#x3D;&#x3D; grid[i].length<br>1 &lt;&#x3D; m, n &lt;&#x3D; 50<br>1 &lt;&#x3D; grid[i][j], color &lt;&#x3D; 1000<br>0 &lt;&#x3D; row &lt; m<br>0 &lt;&#x3D; col &lt; n</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>How to define connected component boundaries?</p>
<ol>
<li>The color is the same as grid[row][col] and connected to the connected component. These two conditions must be met</li>
<li>When a point that satisfies the above conditions appears in the outermost circle, it must be a boundary.</li>
<li>When a point that meets the above conditions appears in the inner circle, if there is a point around it with a different color than grid[row][col], it is the boundary.</li>
</ol>
<p>So…</p>
<ul>
<li>we should find out all the connected components and set the value to -1</li>
<li>then we should found all the boundaries and add them to a set.</li>
<li>convert components equal to -1 to color if they are in boundaries, otherwise, convert them back to the original color.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">colorBorder</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], row: <span class="built_in">int</span>, col: <span class="built_in">int</span>, color: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        m, n = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        queue = deque([(row, col)])</span><br><span class="line">        ori = grid[row][col]</span><br><span class="line">        grid[row][col] = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            r, c = queue.popleft()</span><br><span class="line">            <span class="keyword">for</span> dx, dy <span class="keyword">in</span> [(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>),(-<span class="number">1</span>,<span class="number">0</span>),(<span class="number">0</span>,-<span class="number">1</span>)]:</span><br><span class="line">                nx, ny = r+dx, c+dy</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span>&lt;=nx&lt;m <span class="keyword">and</span> <span class="number">0</span>&lt;=ny&lt;n <span class="keyword">and</span> grid[nx][ny] == ori:</span><br><span class="line">                    grid[nx][ny] = -<span class="number">1</span></span><br><span class="line">                    queue.append((nx,ny))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># find boarders</span></span><br><span class="line">        edge = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">for</span> dx, dy <span class="keyword">in</span> [(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>),(-<span class="number">1</span>,<span class="number">0</span>),(<span class="number">0</span>,-<span class="number">1</span>)]:</span><br><span class="line">                    nx, ny = r+dx, c+dy</span><br><span class="line">                    <span class="keyword">if</span> nx &lt; <span class="number">0</span> <span class="keyword">or</span> nx &gt;= m <span class="keyword">or</span> ny &lt;<span class="number">0</span> <span class="keyword">or</span> ny &gt;= n <span class="keyword">or</span> grid[nx][ny] != -<span class="number">1</span>:</span><br><span class="line">                        edge.add((r, c))</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># color the item in edge and revert the other -1 back to original color</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> grid[r][c] == -<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">if</span> (r,c) <span class="keyword">in</span> edge:</span><br><span class="line">                        grid[r][c] = color</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        grid[r][c] = ori</span><br><span class="line">        <span class="keyword">return</span> grid</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/coloring-a-border/">1034. Coloring A Border</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Breadth First Search</tag>
        <tag>medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1260 - Shift 2D Grid</title>
    <url>/2022/07/20/LC1260Shift2DGrid/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.<br>In one shift operation:<br>Element at grid[i][j] moves to grid[i][j + 1].<br>Element at grid[i][n - 1] moves to grid[i + 1][0].<br>Element at grid[m - 1][n - 1] moves to grid[0][0].<br>Return the 2D grid after applying shift operation k times.</p>
<p>Example 1:</p>
<img src="/2022/07/20/LC1260Shift2DGrid/e1.png" class="" title="e1">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1</span><br><span class="line">Output: [[9,1,2],[3,4,5],[6,7,8]]</span><br></pre></td></tr></table></figure>

<p>Example 2:</p>
<img src="/2022/07/20/LC1260Shift2DGrid/e2.png" class="" title="e2">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4</span><br><span class="line">Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]</span><br></pre></td></tr></table></figure>

<p>Example 3:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9</span><br><span class="line">Output: [[1,2,3],[4,5,6],[7,8,9]]</span><br></pre></td></tr></table></figure>

<p>Constraints:<br>m &#x3D;&#x3D; grid.length<br>n &#x3D;&#x3D; grid[i].length<br>1 &lt;&#x3D; m &lt;&#x3D; 50<br>1 &lt;&#x3D; n &lt;&#x3D; 50<br>-1000 &lt;&#x3D; grid[i][j] &lt;&#x3D; 1000<br>0 &lt;&#x3D; k &lt;&#x3D; 100</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><ul>
<li>Flatten to a one-dimensional list with k step: vector</li>
<li>Convert to two-dimensional according to the number of rows and columns: metrix<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(nm) time | O(nm) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shiftGrid</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        m, n = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        vector = [<span class="number">0</span>] * m*n</span><br><span class="line">        cur_idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                idx = (cur_idx+k)% (m*n)</span><br><span class="line">                vector[idx] = grid[r][c]</span><br><span class="line">                cur_idx+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            level = []</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                level.append(vector[idx])</span><br><span class="line">                idx+=<span class="number">1</span></span><br><span class="line">            ans.append(level)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure></li>
</ul>
<p>Optimize space complexity</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(nm) time | O(1) space</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shiftGrid</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], k: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        m, n = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        matrix = [[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        cur_idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                idx = (cur_idx+k)% (m*n)</span><br><span class="line">                matrix[idx//n][idx%n] = grid[r][c]</span><br><span class="line">                cur_idx+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> matrix</span><br></pre></td></tr></table></figure>



<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/shift-2d-grid/">1260. Shift 2D Grid</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>easy</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LC909 - Snakes and Ladders</title>
    <url>/2022/07/20/LC909SnakesandLadders/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a Boustrophedon style starting from the bottom left of the board (i.e. board[n - 1][0]) and alternating direction each row.<br>You start on square 1 of the board. In each move, starting from square curr, do the following:<br>Choose a destination square next with a label in the range [curr + 1, min(curr + 6, n2)].<br>This choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.<br>If next has a snake or ladder, you must move to the destination of that snake or ladder. Otherwise, you move to next.<br>The game ends when you reach the square n2.<br>A board square on row r and column c has a snake or ladder if board[r][c] !&#x3D; -1. The destination of that snake or ladder is board[r][c]. Squares 1 and n2 do not have a snake or ladder.<br>Note that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent snake or ladder.<br>For example, suppose the board is [[-1,4],[-1,3]], and on the first move, your destination square is 2. You follow the ladder to square 3, but do not follow the subsequent ladder to 4.<br>Return the least number of moves required to reach the square n2. If it is not possible to reach the square, return -1.</p>
<p>Example 1:</p>
<img src="/2022/07/20/LC909SnakesandLadders/snakes.png" class="" title="snakes">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: </span><br><span class="line">In the beginning, you start at square 1 (at row 5, column 0).</span><br><span class="line">You decide to move to square 2 and must take the ladder to square 15.</span><br><span class="line">You then decide to move to square 17 and must take the snake to square 13.</span><br><span class="line">You then decide to move to square 14 and must take the ladder to square 35.</span><br><span class="line">You then decide to move to square 36, ending the game.</span><br><span class="line">This is the lowest possible number of moves to reach the last square, so return 4.</span><br></pre></td></tr></table></figure>

<p>Example 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: board = [[-1,-1],[-1,3]]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p>Constraints:</p>
<p>n &#x3D;&#x3D; board.length &#x3D;&#x3D; board[i].length<br>2 &lt;&#x3D; n &lt;&#x3D; 20<br>grid[i][j] is either -1 or in the range [1, n2].<br>The squares labeled 1 and n2 do not have any ladders or snakes.</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><ul>
<li>first, we use a hashtable to store all the snakers and ladders. This can convert the 2-dimensional problem to 1-dimensional problem</li>
<li>Using breadth search to find the shortest path, we need to maintain such a queue queue &#x3D; [(1, 0)], the first element represents the position reached, the second element represents the number of steps required to reach the position, and then pops the first step of the queue For point i, add all unvisited points with step i+1 at the end of the queue.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">snakesAndLadders</span>(<span class="params">self, board: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(board)</span><br><span class="line">        graph = &#123;&#125;</span><br><span class="line">        cur_idx = <span class="number">0</span></span><br><span class="line">        is_odd = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(n)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(n)) <span class="keyword">if</span> is_odd <span class="keyword">else</span> <span class="built_in">range</span>(n):</span><br><span class="line">                cur_idx +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> board[i][j] != -<span class="number">1</span>:</span><br><span class="line">                    graph[cur_idx] = board[i][j]</span><br><span class="line">            is_odd = <span class="keyword">not</span> is_odd</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#BFS</span></span><br><span class="line">        queue = deque([(<span class="number">1</span>, <span class="number">0</span>)])</span><br><span class="line">        visited = <span class="built_in">set</span>()</span><br><span class="line">        maxi = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            cur, step = queue.popleft()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">7</span>):</span><br><span class="line">                nxt = cur+i</span><br><span class="line">                <span class="keyword">if</span> nxt &gt; n*n:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> nxt <span class="keyword">in</span> graph:</span><br><span class="line">                    nxt = graph[nxt]</span><br><span class="line">                    <span class="keyword">if</span> nxt <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                        visited.add(nxt)</span><br><span class="line">                        queue.append((nxt, step+<span class="number">1</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> nxt <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                        visited.add(nxt)</span><br><span class="line">                        maxi = nxt</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> nxt == n*n:</span><br><span class="line">                    <span class="keyword">return</span> step+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> maxi:</span><br><span class="line">                queue.append((maxi, step+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/snakes-and-ladders/">909. Snakes and Ladders</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Breadth First Search</tag>
        <tag>medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LC2049 - Count Nodes With the Highest Score</title>
    <url>/2022/07/22/LC2049CountNodesWiththeHighestScore/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is a binary tree rooted at 0 consisting of n nodes. The nodes are labeled from 0 to n - 1. You are given a 0-indexed integer array parents representing the tree, where parents[i] is the parent of node i. Since node 0 is the root, parents[0] &#x3D;&#x3D; -1.<br>Each node has a score. To find the score of a node, consider if the node and the edges connected to it were removed. The tree would become one or more non-empty subtrees. The size of a subtree is the number of the nodes in it. The score of the node is the product of the sizes of all those subtrees.<br>Return the number of nodes that have the highest score.</p>
<p>Example 1:</p>
<img src="/2022/07/22/LC2049CountNodesWiththeHighestScore/e1.png" class="" title="e1">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: parents = [-1,2,0,2,0]</span><br><span class="line">Output: 3</span><br><span class="line">Explanation:</span><br><span class="line">- The score of node 0 is: 3 * 1 = 3</span><br><span class="line">- The score of node 1 is: 4 = 4</span><br><span class="line">- The score of node 2 is: 1 * 1 * 2 = 2</span><br><span class="line">- The score of node 3 is: 4 = 4</span><br><span class="line">- The score of node 4 is: 4 = 4</span><br><span class="line">The highest score is 4, and three nodes (node 1, node 3, and node 4) have the highest score.</span><br></pre></td></tr></table></figure>

<p>Example 2:</p>
<img src="/2022/07/22/LC2049CountNodesWiththeHighestScore/e2.png" class="" title="e2">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: parents = [-1,2,0]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation:</span><br><span class="line">- The score of node 0 is: 2 = 2</span><br><span class="line">- The score of node 1 is: 2 = 2</span><br><span class="line">- The score of node 2 is: 1 * 1 = 1</span><br><span class="line">The highest score is 2, and two nodes (node 0 and node 1) have the highest score.</span><br></pre></td></tr></table></figure>

<p>Constraints:<br>n &#x3D;&#x3D; parents.length<br>2 &lt;&#x3D; n &lt;&#x3D; 105<br>parents[0] &#x3D;&#x3D; -1<br>0 &lt;&#x3D; parents[i] &lt;&#x3D; n - 1 for i !&#x3D; 0<br>parents represents a valid binary tree.</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><img src="/2022/07/22/LC2049CountNodesWiththeHighestScore/s.png" class="" title="s">
<ol>
<li>Store the number of in-degree nodes for each node in degree</li>
<li>Store the parent node and child node of the current node in two hash tables respectively</li>
<li>The final answer is the product of the number of remaining nodes of the parent node to be deleted and the number of nodes of the self node.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countHighestScoreNodes</span>(<span class="params">self, parents: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(parents)</span><br><span class="line">        degree = [<span class="number">0</span>]*n</span><br><span class="line">        fathers = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        total = [<span class="number">1</span>]*n</span><br><span class="line">        children = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(parents[<span class="number">1</span>:],<span class="number">1</span>):</span><br><span class="line">            fathers[i].append(v)</span><br><span class="line">            children[v].append(i)</span><br><span class="line">            degree[v] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        queue = deque()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> degree[i] == <span class="number">0</span>:</span><br><span class="line">                queue.append(i)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            cur = queue.popleft()</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> fathers[cur]:</span><br><span class="line">                total[root] += total[cur]</span><br><span class="line">                degree[root]-=<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> degree[root] == <span class="number">0</span>:</span><br><span class="line">                    queue.append(root)</span><br><span class="line"></span><br><span class="line">        maxi, ans = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            cur = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> children[i]:</span><br><span class="line">                cur*=total[c]</span><br><span class="line">            <span class="keyword">if</span> i != <span class="number">0</span>:</span><br><span class="line">                cur*=(total[<span class="number">0</span>] - total[i])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cur &gt; maxi:</span><br><span class="line">                maxi = cur</span><br><span class="line">                ans = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> cur == maxi:</span><br><span class="line">                ans +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/count-nodes-with-the-highest-score/">2049. Count Nodes With the Highest Score</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Breadth First Search</tag>
        <tag>medium</tag>
        <tag>Topological Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch Tutorial - Linear Regression With PyTorch</title>
    <url>/2022/07/26/PyTorch-P5/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># step 1: prepare the dataset</span></span><br><span class="line">x_data = torch.tensor([[<span class="number">1.0</span>],[<span class="number">2.0</span>],[<span class="number">3.0</span>]])</span><br><span class="line">y_data = torch.tensor([[<span class="number">2.0</span>],[<span class="number">4.0</span>],[<span class="number">6.0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># step2: design model</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Our model class should inherit from torch.nn.Module, which is the base class for all of the neural networks.</span></span><br><span class="line"><span class="string">__init__() and forward() have to be implemented.</span></span><br><span class="line"><span class="string">class nn.Linear contains two Tensor components: weight and bias</span></span><br><span class="line"><span class="string">class nn.Linear has implemented the magic method __call__(), which enable the instance of the class to be called like a function.</span></span><br><span class="line"><span class="string">therefore, model(data) can call the forward function</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinearModel</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(LinearModel, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="comment"># (1, 1) is the sie of each input sample and output sample</span></span><br><span class="line">        <span class="comment"># parameters in this model: weights and bias</span></span><br><span class="line">        <span class="comment"># model: y = xm + b</span></span><br><span class="line">        <span class="variable language_">self</span>.linear = torch.nn.Linear(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        y_pred = <span class="variable language_">self</span>.linear(x)</span><br><span class="line">        <span class="keyword">return</span> y_pred</span><br><span class="line"></span><br><span class="line">model = LinearModel()</span><br><span class="line"></span><br><span class="line"><span class="comment"># step3: construct loss and optimizer</span></span><br><span class="line">criterion = torch.nn.MSELoss(size_average = <span class="literal">False</span>)</span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr = <span class="number">0.01</span>) <span class="comment">#iterable of parameters to optimizer. model.parameters() can get all the parameters in the model</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step4: training cycle - forward, backward, update</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    y_pred = model(x_data)</span><br><span class="line">    loss = criterion(y_pred, y_data)</span><br><span class="line">    <span class="built_in">print</span>(epoch, loss.item())</span><br><span class="line"></span><br><span class="line">    optimizer.zero_grad() <span class="comment"># the grad will be accumulated, so before backward, we need to set the grad to zero</span></span><br><span class="line">    loss.backward() <span class="comment"># backward: autograd</span></span><br><span class="line">    optimizer.step() <span class="comment"># update w, b</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;w=&#x27;</span>, model.linear.weight.item())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;b=&#x27;</span>, model.linear.weight.item())</span><br><span class="line"></span><br><span class="line"><span class="comment"># step5: test model</span></span><br><span class="line">x_test = torch.tensor([<span class="number">4.0</span>])</span><br><span class="line">y_test = model(x_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;y_pred= &#x27;</span>, y_test.data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 980 3.610836074585677e-10</span></span><br><span class="line"><span class="comment"># 981 3.6504843592410907e-10</span></span><br><span class="line"><span class="comment"># 982 3.5726088754017837e-10</span></span><br><span class="line"><span class="comment"># 983 3.4162894735345617e-10</span></span><br><span class="line"><span class="comment"># 984 3.445990159889334e-10</span></span><br><span class="line"><span class="comment"># 985 3.355609123900649e-10</span></span><br><span class="line"><span class="comment"># 986 3.370388412804459e-10</span></span><br><span class="line"><span class="comment"># 987 3.249738256272394e-10</span></span><br><span class="line"><span class="comment"># 988 3.1610625228495337e-10</span></span><br><span class="line"><span class="comment"># 989 3.1587887860951014e-10</span></span><br><span class="line"><span class="comment"># 990 3.1248248433257686e-10</span></span><br><span class="line"><span class="comment"># 991 3.1373303954751464e-10</span></span><br><span class="line"><span class="comment"># 992 3.1042191039887257e-10</span></span><br><span class="line"><span class="comment"># 993 3.0178171073202975e-10</span></span><br><span class="line"><span class="comment"># 994 3.0526337013725424e-10</span></span><br><span class="line"><span class="comment"># 995 2.9184832328610355e-10</span></span><br><span class="line"><span class="comment"># 996 2.9478997021215037e-10</span></span><br><span class="line"><span class="comment"># 997 2.864908310584724e-10</span></span><br><span class="line"><span class="comment"># 998 2.8178703814774053e-10</span></span><br><span class="line"><span class="comment"># 999 2.765574436125462e-10</span></span><br><span class="line"><span class="comment"># w= 2.0000112056732178</span></span><br><span class="line"><span class="comment"># b= 2.0000112056732178</span></span><br><span class="line"><span class="comment"># y_pred=  tensor([8.0000])</span></span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.bilibili.com/video/BV1Y7411d7Ys?p=5">PyTorch Tutorial - P5 Linear Regression with PyTorch</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Data Science</category>
      </categories>
      <tags>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>LC433 - Minimum Genetic Mutation</title>
    <url>/2022/07/24/LC433MinimumGeneticMutation/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A gene string can be represented by an 8-character long string, with choices from ‘A’, ‘C’, ‘G’, and ‘T’.<br>Suppose we need to investigate a mutation from a gene string start to a gene string end where one mutation is defined as one single character changed in the gene string.<br>For example, “AACCGGTT” –&gt; “AACCGGTA” is one mutation.<br>There is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string.<br>Given the two gene strings start and end and the gene bank bank, return the minimum number of mutations needed to mutate from start to end. If there is no such a mutation, return -1.<br>Note that the starting point is assumed to be valid, so it might not be included in the bank.</p>
<p>Example 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: start = &quot;AACCGGTT&quot;, end = &quot;AACCGGTA&quot;, bank = [&quot;AACCGGTA&quot;]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>

<p>Example 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: start = &quot;AACCGGTT&quot;, end = &quot;AAACGGTA&quot;, bank = [&quot;AACCGGTA&quot;,&quot;AACCGCTA&quot;,&quot;AAACGGTA&quot;]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Example 3:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: start = &quot;AAAAACCC&quot;, end = &quot;AACCCCCC&quot;, bank = [&quot;AAAACCCC&quot;,&quot;AAACCCCC&quot;,&quot;AACCCCCC&quot;]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>
<p>Constraints:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start.length == 8</span><br><span class="line">end.length == 8</span><br><span class="line">0 &lt;= bank.length &lt;= 10</span><br><span class="line">bank[i].length == 8</span><br><span class="line">start, end, and bank[i] consist of only the characters [&#x27;A&#x27;, &#x27;C&#x27;, &#x27;G&#x27;, &#x27;T&#x27;].</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>This question is very similar to <strong>[127]</strong><br>If end is not in the bank, return -1 directly</p>
<ul>
<li>Store start in the queue, because there are only four letters of ACGT, so traverse the gene sequence and change one of the letters. If the changed letter is not in visited, put it in the queue</li>
<li>If the changed letter is equal to the value of end, return to step</li>
<li>If no matching gene is found, return -1</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(nm) time | O(nm) space</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minMutation</span>(<span class="params">self, start: <span class="built_in">str</span>, end: <span class="built_in">str</span>, bank: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> end <span class="keyword">not</span> <span class="keyword">in</span> bank:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        queue = deque([(start,<span class="number">0</span>)])</span><br><span class="line">        visited = <span class="built_in">set</span>(&#123;start&#125;)</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            cur, step = queue.popleft()</span><br><span class="line">            <span class="keyword">if</span> cur == end:</span><br><span class="line">                <span class="keyword">return</span> step</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="string">&quot;A&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;G&quot;</span>, <span class="string">&quot;T&quot;</span>]:</span><br><span class="line">                    nxt = cur[:i]+j+cur[i+<span class="number">1</span>:]</span><br><span class="line">                    <span class="keyword">if</span> nxt <span class="keyword">in</span> bank <span class="keyword">and</span> nxt <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                        queue.append((nxt, step+<span class="number">1</span>))</span><br><span class="line">                        visited.add(nxt)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/minimum-genetic-mutation/">433. Minimum Genetic Mutation</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/word-ladder/">127. Word Ladder</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Breadth First Search</tag>
        <tag>medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1161 - Maximum Level Sum of a Binary Tree</title>
    <url>/2022/08/01/LC1161MaximumLevelSumofaBinaryTree/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.<br>Return the smallest level x such that the sum of all the values of nodes at level x is maximal.</p>
<p>Example 1:</p>
<img src="/2022/08/01/LC1161MaximumLevelSumofaBinaryTree/e1.png" class="" title="e1">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,7,0,7,-8,null,null]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: </span><br><span class="line">Level 1 sum = 1.</span><br><span class="line">Level 2 sum = 7 + 0 = 7.</span><br><span class="line">Level 3 sum = 7 + -8 = -1.</span><br><span class="line">So we return the level with the maximum sum which is level 2.</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [989,null,10250,98693,-89388,null,null,null,-32127]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure>

<p>Constraints:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The number of nodes in the tree is in the range [1, 104].</span><br><span class="line">-105 &lt;= Node.val &lt;= 105</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>BFS counts the sum of each layer, and returns the one with the largest sum and the smallest number of layers.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxLevelSum</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        queue = deque([root])</span><br><span class="line">        maxi = <span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">        level = <span class="number">1</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            l = <span class="built_in">len</span>(queue)</span><br><span class="line">            summ = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">                cur = queue.popleft()</span><br><span class="line">                summ += cur.val</span><br><span class="line">                <span class="keyword">if</span> cur.left:</span><br><span class="line">                    queue.append(cur.left)</span><br><span class="line">                <span class="keyword">if</span> cur.right:</span><br><span class="line">                    queue.append(cur.right)</span><br><span class="line">            <span class="keyword">if</span> summ &gt; maxi:</span><br><span class="line">                maxi = summ</span><br><span class="line">                ans = level</span><br><span class="line">            level+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree/">1161. Maximum Level Sum of a Binary Tree</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Breadth First Search</tag>
        <tag>medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1374 - Generate a String With Characters That Have Odd Counts</title>
    <url>/2022/08/01/LC1374GenerateaStringWithCharactersThatHaveoddCounts/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer n, return a string with n characters such that each character in such string occurs an odd number of times.<br>The returned string must contain only lowercase English letters. If there are multiples valid strings, return any of them.  </p>
<p>Example 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 4</span><br><span class="line">Output: &quot;pppz&quot;</span><br><span class="line">Explanation: &quot;pppz&quot; is a valid string since the character &#x27;p&#x27; occurs three times and the character &#x27;z&#x27; occurs once. Note that there are many other valid strings such as &quot;ohhh&quot; and &quot;love&quot;.</span><br></pre></td></tr></table></figure>

<p>Example 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 2</span><br><span class="line">Output: &quot;xy&quot;</span><br><span class="line">Explanation: &quot;xy&quot; is a valid string since the characters &#x27;x&#x27; and &#x27;y&#x27; occur once. Note that there are many other valid strings such as &quot;ag&quot; and &quot;ur&quot;.</span><br></pre></td></tr></table></figure>

<p>Example 3:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: n = 7</span><br><span class="line">Output: &quot;holasss&quot;</span><br></pre></td></tr></table></figure>

<p>Constraints:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 &lt;= n &lt;= 500</span><br></pre></td></tr></table></figure>

<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><ul>
<li>When n is an odd number, you can use one character, which itself is an odd number of times;</li>
<li>Two characters can be used when n is even, odd+odd&#x3D;even</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generateTheString</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;a&quot;</span>*(n-<span class="number">1</span>)+<span class="string">&quot;b&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;a&quot;</span>*n</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/generate-a-string-with-characters-that-have-odd-counts/">1374. Generate a String With Characters That Have Odd Counts</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>easy</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1282 - Group the People Given the Group Size They Belong To</title>
    <url>/2022/08/12/LC1282GroupthePeopleGiventheGroupSizeTheyBelongTo/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are n people that are split into some unknown number of groups. Each person is labeled with a unique ID from 0 to n - 1.<br>You are given an integer array groupSizes, where groupSizes[i] is the size of the group that person i is in. For example, if groupSizes[1] &#x3D; 3, then person 1 must be in a group of size 3.<br>Return a list of groups such that each person i is in a group of size groupSizes[i].<br>Each person should appear in exactly one group, and every person must be in a group. If there are multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.</p>
<p>Example 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: groupSizes = [3,3,3,3,3,1,3]</span><br><span class="line">Output: [[5],[0,1,2],[3,4,6]]</span><br><span class="line">Explanation: </span><br><span class="line">The first group is [5]. The size is 1, and groupSizes[5] = 1.</span><br><span class="line">The second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.</span><br><span class="line">The third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.</span><br><span class="line">Other possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: groupSizes = [2,1,3,3,3,2]</span><br><span class="line">Output: [[1],[0,5],[2,3,4]]</span><br></pre></td></tr></table></figure>

<p>Constraints:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupSizes.length == n</span><br><span class="line">1 &lt;= n &lt;= 500</span><br><span class="line">1 &lt;= groupSizes[i] &lt;= n</span><br></pre></td></tr></table></figure>

<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><ol>
<li>key: length of the group, value: the index of each element</li>
<li>store them in the dictionary</li>
<li>for loop value and use v[i:i+k] to slice the string based on the key</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sortedcontainers <span class="keyword">import</span> SortedList</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">groupThePeople</span>(<span class="params">self, groupSizes: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        new_group = SortedList()</span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(groupSizes):</span><br><span class="line">            new_group.add((v,i))</span><br><span class="line">        <span class="comment"># print(new_group)</span></span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(groupSizes):</span><br><span class="line">            size, y = new_group[i]</span><br><span class="line">            group = []</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">                group.append(new_group[i+s][<span class="number">1</span>])</span><br><span class="line">            i = i+s+<span class="number">1</span></span><br><span class="line">            ans.append(group)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="comment">#Runtime: 234 ms, faster than 5.20% of Python3 online submissions for Group the People Given the Group Size They Belong To.</span></span><br><span class="line"><span class="comment">#Memory Usage: 14.5 MB, less than 17.57% of Python3 online submissions for Group the People Given the Group Size They Belong To.</span></span><br></pre></td></tr></table></figure>

<p>Optimised HashTable</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">groupThePeople</span>(<span class="params">self, groupSizes: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        ans = []</span><br><span class="line">        mp = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(groupSizes):</span><br><span class="line">            mp[v].append(i)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> mp.items():</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(v), k):</span><br><span class="line">                ans.append(v[i:i+k])</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="comment">#Runtime: 89 ms, faster than 82.67% of Python3 online submissions for Group the People Given the Group Size They Belong To.</span></span><br><span class="line"><span class="comment">#Memory Usage: 13.9 MB, less than 88.49% of Python3 online submissions for Group the People Given the Group Size They Belong To.</span></span><br></pre></td></tr></table></figure>



<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/">1282. Group the People Given the Group Size They Belong To</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Hashmap</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1413 - Minimum Value to Get Positive Step by Step Sum</title>
    <url>/2022/08/09/LC1413MinimumValuetoGetPositiveStepbyStepSum/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers nums, you start with an initial positive value startValue.<br>In each iteration, you calculate the step by step sum of startValue plus elements in nums (from left to right).<br>Return the minimum positive value of startValue such that the step by step sum is never less than 1.</p>
<p>Example 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [-3,2,-3,4,2]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.</span><br><span class="line">step by step sum</span><br><span class="line">startValue = 4 | startValue = 5 | nums</span><br><span class="line">  (4 -3 ) = 1  | (5 -3 ) = 2    |  -3</span><br><span class="line">  (1 +2 ) = 3  | (2 +2 ) = 4    |   2</span><br><span class="line">  (3 -3 ) = 0  | (4 -3 ) = 1    |  -3</span><br><span class="line">  (0 +4 ) = 4  | (1 +4 ) = 5    |   4</span><br><span class="line">  (4 +2 ) = 6  | (5 +2 ) = 7    |   2</span><br></pre></td></tr></table></figure>

<p>Example 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: Minimum start value should be positive. </span><br></pre></td></tr></table></figure>

<p>Example 3:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,-2,-3]</span><br><span class="line">Output: 5</span><br></pre></td></tr></table></figure>

<p>Constraints:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 &lt;= nums.length &lt;= 100</span><br><span class="line">-100 &lt;= nums[i] &lt;= 100</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The smallest positive integer is required.<br>We can get the smallest negative sum, and the answer is the opposite of the negative number + 1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minStartValue</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        cur = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            cur += i</span><br><span class="line">            <span class="keyword">if</span> cur &lt; ans:</span><br><span class="line">                ans = cur</span><br><span class="line">        <span class="keyword">return</span> -ans + <span class="number">1</span></span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/minimum-value-to-get-positive-step-by-step-sum/">1413. Minimum Value to Get Positive Step by Step Sum</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>easy</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1417 - Reformat the String</title>
    <url>/2022/08/12/LC1417ReformatTheString/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an alphanumeric string s. (Alphanumeric string is a string consisting of lowercase English letters and digits).<br>You have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type.<br>Return the reformatted string or return an empty string if it is impossible to reformat the string.</p>
<p>Example 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;a0b1c2&quot;</span><br><span class="line">Output: &quot;0a1b2c&quot;</span><br><span class="line">Explanation: No two adjacent characters have the same type in &quot;0a1b2c&quot;. &quot;a0b1c2&quot;, &quot;0a1b2c&quot;, &quot;0c2a1b&quot; are also valid permutations.</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;leetcode&quot;</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: &quot;leetcode&quot; has only characters so we cannot separate them by digits.</span><br></pre></td></tr></table></figure>
<p>Example 3:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: s = &quot;1229857369&quot;</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: &quot;1229857369&quot; has only digits so we cannot separate them by characters.</span><br></pre></td></tr></table></figure>
<p>Constraints:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 &lt;= s.length &lt;= 500</span><br><span class="line">s consists of only lowercase English letters and/or digits.</span><br></pre></td></tr></table></figure>

<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><ol>
<li>Traverse s and store letters and numbers in two different lists: nums, letters</li>
<li>If the difference between the lengths of len(nums) and len(letters) is greater than 1, return “” directly</li>
<li>If len(nums) ≥ len(letters), append the value of nums first in the result, and vice versa</li>
<li>If there are remaining values, append to ans</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reformat</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        nums, letters = [],  []</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> i.isdigit():</span><br><span class="line">                nums.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                letters.append(i)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># print(nums, letters)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(<span class="built_in">len</span>(nums) - <span class="built_in">len</span>(letters)) &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> i &lt;<span class="built_in">min</span>(<span class="built_in">len</span>(nums), <span class="built_in">len</span>(letters)):</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(nums) &gt;= <span class="built_in">len</span>(letters):</span><br><span class="line">                    ans.append(nums[i])</span><br><span class="line">                    ans.append(letters[i])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ans.append(letters[i])</span><br><span class="line">                    ans.append(nums[i])</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(nums):</span><br><span class="line">                ans.append(nums[-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(letters):</span><br><span class="line">                ans.append(letters[-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(ans)</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/reformat-the-string/">1417. Reformat The String</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>easy</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1464 - Maximum Product of Two Elements in an Array</title>
    <url>/2022/08/26/LC1464MaximumProductofTwoElementsinanArray/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).</p>
<p>Example 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,4,5,2]</span><br><span class="line">Output: 12 </span><br><span class="line">Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12.</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,5,4,5]</span><br><span class="line">Output: 16</span><br><span class="line">Explanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.</span><br></pre></td></tr></table></figure>
<p>Example 3:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,7]</span><br><span class="line">Output: 12</span><br></pre></td></tr></table></figure>

<p>Constraints:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 &lt;= nums.length &lt;= 500</span><br><span class="line">1 &lt;= nums[i] &lt;= 10^3</span><br></pre></td></tr></table></figure>

<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><h3 id="Sorting"><a href="#Sorting" class="headerlink" title="Sorting"></a>Sorting</h3><ol>
<li>Sort first</li>
<li>then the last two values ​​are the largest two values</li>
<li>find the final answer as required and return</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(nlogn) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProduct</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">return</span> (nums[-<span class="number">1</span>]-<span class="number">1</span>)*(nums[-<span class="number">2</span>]-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Two-Pointers"><a href="#Two-Pointers" class="headerlink" title="Two Pointers"></a>Two Pointers</h3><p>This problem is actually to find the first and second largest numbers in the array. We only need to use first and second to represent the subscripts of the first and second largest numbers, and then traverse the array and compare them one by one.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProduct</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        first, second = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> nums[second] &gt; nums[first]:</span><br><span class="line">            first, second = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            v = nums[i]</span><br><span class="line">            <span class="keyword">if</span> v &gt; nums[first]:</span><br><span class="line">                first, second = i, first</span><br><span class="line">            <span class="keyword">elif</span> v &gt; nums[second]:</span><br><span class="line">                second = i</span><br><span class="line">        <span class="keyword">return</span> (nums[first]-<span class="number">1</span>)*(nums[second]-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/maximum-product-of-two-elements-in-an-array/">1464. Maximum Product of Two Elements in an Array</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>easy</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>LC658 - Find K Closest Elements</title>
    <url>/2022/08/25/LC658FindKClosestElements/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.</p>
<p>An integer a is closer to x than an integer b if:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|a - x| &lt; |b - x|, or</span><br><span class="line">|a - x| == |b - x| and a &lt; b</span><br></pre></td></tr></table></figure>

<p>Example 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: arr = [1,2,3,4,5], k = 4, x = 3</span><br><span class="line">Output: [1,2,3,4]</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: arr = [1,2,3,4,5], k = 4, x = -1</span><br><span class="line">Output: [1,2,3,4]</span><br></pre></td></tr></table></figure>

<p>Constraints:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 &lt;= k &lt;= arr.length</span><br><span class="line">1 &lt;= arr.length &lt;= 104</span><br><span class="line">arr is sorted in ascending order.</span><br><span class="line">-104 &lt;= arr[i], x &lt;= 104</span><br></pre></td></tr></table></figure>

<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>The answer must be a continuous window; numbers are excluded from the left and right ends of the window, leaving k numbers at the end</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findClosestElements</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span>, x: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        n = <span class="built_in">len</span>(arr)</span><br><span class="line">        left, right = <span class="number">0</span>, n-<span class="number">1</span></span><br><span class="line">        remaining = n - k</span><br><span class="line">        ans = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(remaining):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(arr[left] - x) &gt; <span class="built_in">abs</span>(arr[right] - x):</span><br><span class="line">                left +=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right -=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(left, right+<span class="number">1</span>):</span><br><span class="line">            ans.append(arr[i])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/find-k-closest-elements/">658. Find K Closest Elements</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>LC240 - Search a 2D Matrix II</title>
    <url>/2022/08/14/LC240SearchA2DMatrixII/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:<br>Integers in each row are sorted in ascending from left to right.<br>Integers in each column are sorted in ascending from top to bottom.</p>
<p>Example 1:</p>
<img src="/2022/08/14/LC240SearchA2DMatrixII/e1.jpeg" class="" title="e1">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>

<p>Example 2:</p>
<img src="/2022/08/14/LC240SearchA2DMatrixII/e2.jpeg" class="" title="e1">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>

<p>Constraints:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m == matrix.length</span><br><span class="line">n == matrix[i].length</span><br><span class="line">1 &lt;= n, m &lt;= 300</span><br><span class="line">-109 &lt;= matrix[i][j] &lt;= 109</span><br><span class="line">All the integers in each row are sorted in ascending order.</span><br><span class="line">All the integers in each column are sorted in ascending order.</span><br><span class="line">-109 &lt;= target &lt;= 109</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>BFS<br>Start the search from the upper right corner</p>
<ul>
<li>search down if it is smaller than the target</li>
<li>search to the left if it is larger than the target)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchMatrix</span>(<span class="params">self, matrix: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        m, n = <span class="built_in">len</span>(matrix), <span class="built_in">len</span>(matrix[<span class="number">0</span>])</span><br><span class="line">        queue = deque([(<span class="number">0</span>,n-<span class="number">1</span>)])</span><br><span class="line">        visited = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            x, y = queue.popleft()</span><br><span class="line">            cur_val = matrix[x][y]</span><br><span class="line">            <span class="keyword">if</span> cur_val == target:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> cur_val &lt; target:</span><br><span class="line">                nx, ny = x+<span class="number">1</span>, y</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span>&lt;= nx &lt; m <span class="keyword">and</span> <span class="number">0</span>&lt;= ny &lt; n <span class="keyword">and</span> (nx, ny) <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                    queue.append((nx, ny))</span><br><span class="line">                    visited.add((nx, ny))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nx, ny = x, y-<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span>&lt;= nx &lt; m <span class="keyword">and</span> <span class="number">0</span>&lt;= ny &lt; n <span class="keyword">and</span> (nx, ny) <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                    queue.append((nx, ny))</span><br><span class="line">                    visited.add((nx, ny))</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/search-a-2d-matrix-ii/">240. Search a 2D Matrix II</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Breadth First Search</tag>
        <tag>medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LC640 - Solve the Equation</title>
    <url>/2022/08/10/LC640SolvetheEquation/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Solve a given equation and return the value of ‘x’ in the form of a string “x&#x3D;#value”. The equation contains only ‘+’, ‘-‘ operation, the variable ‘x’ and its coefficient. You should return “No solution” if there is no solution for the equation, or “Infinite solutions” if there are infinite solutions for the equation.<br>If there is exactly one solution for the equation, we ensure that the value of ‘x’ is an integer.</p>
<p>Example 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: equation = &quot;x+5-3+x=6+x-2&quot;</span><br><span class="line">Output: &quot;x=2&quot;</span><br></pre></td></tr></table></figure>

<p>Example 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: equation = &quot;x=x&quot;</span><br><span class="line">Output: &quot;Infinite solutions&quot;</span><br></pre></td></tr></table></figure>

<p>Example 3:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: equation = &quot;2x=x&quot;</span><br><span class="line">Output: &quot;x=0&quot;</span><br></pre></td></tr></table></figure>

<p>Constraints:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 &lt;= equation.length &lt;= 1000</span><br><span class="line">equation has exactly one &#x27;=&#x27;.</span><br><span class="line">equation consists of integers with an absolute value in the range [0, 100] without any leading zeros, and the variable &#x27;x&#x27;.</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>Move all expressions to the left</li>
<li>Then all minus signs are preceded by a plus sign as a prefix</li>
<li>Divide the equation by plus sign</li>
<li>Count the number of x and the operation result of the number</li>
<li>Get results based on the requirements</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">solveEquation</span>(<span class="params">self, equation: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        left, right = equation.split(<span class="string">&quot;=&quot;</span>)</span><br><span class="line">        new_left = []</span><br><span class="line">        new_right = []</span><br><span class="line">        <span class="keyword">if</span> right[<span class="number">0</span>] != <span class="string">&quot;-&quot;</span>:</span><br><span class="line">            right = <span class="string">&quot;+&quot;</span> + right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(left)):</span><br><span class="line">            <span class="keyword">if</span> left[i] == <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                new_left.append(<span class="string">&quot;+-&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_left.append(left[i])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(right)):</span><br><span class="line">            <span class="keyword">if</span> right[i] == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                new_right.append(<span class="string">&quot;+-&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> right[i] == <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                new_right.append(<span class="string">&quot;+&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_right.append(right[i])</span><br><span class="line">        e = <span class="string">&quot;&quot;</span>.join(new_left)+<span class="string">&quot;&quot;</span>.join(new_right)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(e.split(<span class="string">&quot;+&quot;</span>))</span><br><span class="line">        </span><br><span class="line">        letter = <span class="number">0</span></span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> cur <span class="keyword">in</span> e.split(<span class="string">&quot;+&quot;</span>):</span><br><span class="line">            sign, coe, l = <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> cur:</span><br><span class="line">                <span class="keyword">if</span> cur[<span class="number">0</span>] == <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                    sign = -<span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> cur[-<span class="number">1</span>] == <span class="string">&quot;x&quot;</span>:</span><br><span class="line">                        coe = <span class="built_in">int</span>(cur[<span class="number">1</span>:-<span class="number">1</span>]) <span class="keyword">if</span> <span class="built_in">len</span>(cur) &gt; <span class="number">2</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">                        letter += sign * coe</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        num += <span class="built_in">int</span>(cur)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> cur[-<span class="number">1</span>] == <span class="string">&quot;x&quot;</span>:</span><br><span class="line">                        coe = <span class="built_in">int</span>(cur[:-<span class="number">1</span>]) <span class="keyword">if</span> <span class="built_in">len</span>(cur) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">                        letter += sign * coe</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        num += <span class="built_in">int</span>(cur)</span><br><span class="line">           </span><br><span class="line">        <span class="keyword">if</span> letter == num == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Infinite solutions&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> letter == <span class="number">0</span> <span class="keyword">and</span> num != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;No solution&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            v = <span class="built_in">int</span>(-num / letter)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;x=&quot;</span>+<span class="built_in">str</span>(v)</span><br></pre></td></tr></table></figure>




<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/solve-the-equation/">640. Solve the Equation</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LC662 - Maximum Width of Binary Tree</title>
    <url>/2022/08/27/LC662MaximumWidthofBinaryTree/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the root of a binary tree, return the maximum width of the given tree.</p>
<p>The maximum width of a tree is the maximum width among all levels.</p>
<p>The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.</p>
<p>It is guaranteed that the answer will in the range of a 32-bit signed integer.</p>
<p>Example 1:</p>
<img src="/2022/08/27/LC662MaximumWidthofBinaryTree/e1.jpg" class="" title="e1">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,3,2,5,3,null,9]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The maximum width exists in the third level with length 4 (5,3,null,9).</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<img src="/2022/08/27/LC662MaximumWidthofBinaryTree/e2.jpg" class="" title="e2">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,3,2,5,null,null,9,6,null,7]</span><br><span class="line">Output: 7</span><br><span class="line">Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).</span><br></pre></td></tr></table></figure>
<p>Example 3:</p>
<img src="/2022/08/27/LC662MaximumWidthofBinaryTree/e3.jpg" class="" title="e3">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: root = [1,3,2,5]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The maximum width exists in the second level with length 2 (3,2).</span><br></pre></td></tr></table></figure>

<p>Constraints:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The number of nodes in the tree is in the range [1, 3000].</span><br><span class="line">-100 &lt;= Node.val &lt;= 100</span><br></pre></td></tr></table></figure>

<h2 id="Soution"><a href="#Soution" class="headerlink" title="Soution"></a>Soution</h2><p>Using the full binary tree number, the distance between any two nodes in the same layer (with empty nodes) can be easily calculated, and our BFS returns the layer with the largest distance between the leftmost and the rightmost.</p>
<img src="/2022/08/27/LC662MaximumWidthofBinaryTree/solution.png" class="" title="solution">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">widthOfBinaryTree</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        queue = deque([(<span class="number">1</span>, root)])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            l, r = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>), <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(queue)):</span><br><span class="line">                idx, popnode = queue.popleft()</span><br><span class="line">                <span class="keyword">if</span> popnode.left:</span><br><span class="line">                    queue.append((idx*<span class="number">2</span>, popnode.left))</span><br><span class="line">                <span class="keyword">if</span> popnode.right:</span><br><span class="line">                    queue.append((idx*<span class="number">2</span>+<span class="number">1</span>, popnode.right))</span><br><span class="line">                l, r = <span class="built_in">min</span>(idx, l), <span class="built_in">max</span>(idx, r)</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, r-l+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="comment">#Runtime: 42 ms, faster than 97.03% of Python3 online submissions for Maximum Width of Binary Tree.</span></span><br><span class="line"><span class="comment">#Memory Usage: 14.8 MB, less than 46.14% of Python3 online submissions for Maximum Width of Binary Tree.</span></span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/maximum-width-of-binary-tree/">662. Maximum Width of Binary Tree</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Breadth First Search</tag>
        <tag>medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1470 - Shuffle the Array</title>
    <url>/2022/08/29/LC1470Shuffle/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the array nums consisting of 2n elements in the form [x1,x2,…,xn,y1,y2,…,yn].<br>Return the array in the form [x1,y1,x2,y2,…,xn,yn].</p>
<p>Example 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [2,5,1,3,4,7], n = 3</span><br><span class="line">Output: [2,3,5,4,1,7] </span><br><span class="line">Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,2,3,4,4,3,2,1], n = 4</span><br><span class="line">Output: [1,4,2,3,3,2,4,1]</span><br></pre></td></tr></table></figure>
<p>Example 3:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [1,1,2,2], n = 2</span><br><span class="line">Output: [1,2,1,2]</span><br></pre></td></tr></table></figure>

<p>Constraints:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 &lt;= n &lt;= 500</span><br><span class="line">nums.length == 2n</span><br><span class="line">1 &lt;= nums[i] &lt;= 10^3</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>slow index: i, faster index: j<ul>
<li>initial i &#x3D; 0, j &#x3D; n</li>
</ul>
</li>
<li>when j reaches to the end, i reaches the end of the first half of this array</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">shuffle</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        i, j = <span class="number">0</span>, n</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="built_in">len</span>(nums)):</span><br><span class="line">            ans.append(nums[i])</span><br><span class="line">            ans.append(nums[j])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/shuffle-the-array/">1470. Shuffle the Array</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>easy</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>LC318 - Maaximum Product of Word Lengths</title>
    <url>/2022/08/29/LC318MaaximumProductofWordLengths/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.</p>
<p>Example 1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: words = [&quot;abcw&quot;,&quot;baz&quot;,&quot;foo&quot;,&quot;bar&quot;,&quot;xtfn&quot;,&quot;abcdef&quot;]</span><br><span class="line">Output: 16</span><br><span class="line">Explanation: The two words can be &quot;abcw&quot;, &quot;xtfn&quot;.</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: words = [&quot;a&quot;,&quot;ab&quot;,&quot;abc&quot;,&quot;d&quot;,&quot;cd&quot;,&quot;bcd&quot;,&quot;abcd&quot;]</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: The two words can be &quot;ab&quot;, &quot;cd&quot;.</span><br></pre></td></tr></table></figure>
<p>Example 3:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: words = [&quot;a&quot;,&quot;aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: No such pair of words.</span><br></pre></td></tr></table></figure>

<p>Constraints:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 &lt;= words.length &lt;= 1000</span><br><span class="line">1 &lt;= words[i].length &lt;= 1000</span><br><span class="line">words[i] consists only of lowercase English letters.</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>create a list called s to store all the individual letter of each word </li>
<li>using two for loops to compare each two words in the list, if there is no common letter, update the answer</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n^2) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxProduct</span>(<span class="params">self, words: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        d = []</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            d.append(<span class="built_in">set</span>(<span class="built_in">list</span>(word)))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(words)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(words)):</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> d[i] &amp; d[j]:</span><br><span class="line">                    ans = <span class="built_in">max</span>(ans, <span class="built_in">len</span>(words[i])*<span class="built_in">len</span>(words[j]))</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/maximum-product-of-word-lengths/">318. Maximum Product of Word Lengths</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Brute Force</tag>
      </tags>
  </entry>
  <entry>
    <title>LC396 - Rorate Function</title>
    <url>/2022/06/05/LC396RorateFunction/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array nums of length n.</p>
<p>Assume arrk to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F on nums as follow:</p>
<p>F(k) &#x3D; 0 * arrk[0] + 1 * arrk[1] + … + (n - 1) * arrk[n - 1].<br>Return the maximum value of F(0), F(1), …, F(n-1).</p>
<p>The test cases are generated so that the answer fits in a 32-bit integer.</p>
<p>Example 1:</p>
<p>Input: nums &#x3D; [4,3,2,6]<br>Output: 26<br>Explanation:<br>F(0) &#x3D; (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) &#x3D; 0 + 3 + 4 + 18 &#x3D; 25<br>F(1) &#x3D; (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) &#x3D; 0 + 4 + 6 + 6 &#x3D; 16<br>F(2) &#x3D; (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) &#x3D; 0 + 6 + 8 + 9 &#x3D; 23<br>F(3) &#x3D; (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) &#x3D; 0 + 2 + 12 + 12 &#x3D; 26<br>So the maximum value of F(0), F(1), F(2), F(3) is F(3) &#x3D; 26.<br>Example 2:</p>
<p>Input: nums &#x3D; [100]<br>Output: 0</p>
<p>Constraints:</p>
<p>n &#x3D;&#x3D; nums.length<br>1 &lt;&#x3D; n &lt;&#x3D; 105<br>-100 &lt;&#x3D; nums[i] &lt;&#x3D; 100</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nums: [A0,A1,A2,A3]</span><br><span class="line"></span><br><span class="line"> F0 = 0*A0 + 1*A1 + 2*A2 + 3*A3</span><br><span class="line"></span><br><span class="line"> F1 = 0*A3 + 1*A0 + 2*A1 + 3*A2</span><br><span class="line">    = F0 + A0 + A1 + A2 - 3*A3</span><br><span class="line">    = F0 + sum-A3 - 3*A3</span><br><span class="line">    = F0 + sum - 4*A3</span><br><span class="line"></span><br><span class="line"> F2 = 0*A2 + 1*A3 + 2*A0 + 3*A1</span><br><span class="line">    = F1 + A3 + A0 + A1 - 3*A2</span><br><span class="line">    = F1 + sum - 4*A2</span><br><span class="line"></span><br><span class="line"> F3 = 0*A1 + 1*A2 + 2*A3 + 3*A0</span><br><span class="line">    = F2 + A2 + A3 + A0 - 3*A1</span><br><span class="line">    = F2 + sum - 4*A1</span><br><span class="line"></span><br><span class="line">Formula：</span><br><span class="line">F(i) = F(i-1) + sum - n * A(n-i)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxRotateFunction</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        summ = <span class="built_in">sum</span>(nums)</span><br><span class="line">        length = <span class="built_in">len</span>(nums)</span><br><span class="line">        f_pre=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            f_pre += i*v</span><br><span class="line"></span><br><span class="line">        res = f_pre</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            f_pre = f_pre + summ - length * nums[length-<span class="number">1</span>-i]</span><br><span class="line">            res = <span class="built_in">max</span>(res, f_pre)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/rotate-function/">396. Rotate Function</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/rotate-function/discuss/2112734/Hex-Python-O(n)-time-or-O(n)-space">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>array</tag>
        <tag>medium</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>LC478 - Generate Random Point in a Circle</title>
    <url>/2022/06/05/LC478GenerateRandomPointinaCircle/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the radius and the position of the center of a circle, implement the function randPoint which generates a uniform random point inside the circle.</p>
<p>Implement the Solution class:</p>
<p>Solution(double radius, double x_center, double y_center) initializes the object with the radius of the circle radius and the position of the center (x_center, y_center).<br>randPoint() returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array [x, y].</p>
<p>Example 1:</p>
<p>Input<br>[“Solution”, “randPoint”, “randPoint”, “randPoint”]<br>[[1.0, 0.0, 0.0], [], [], []]<br>Output<br>[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]</p>
<p>Explanation<br>Solution solution &#x3D; new Solution(1.0, 0.0, 0.0);<br>solution.randPoint(); &#x2F;&#x2F; return [-0.02493, -0.38077]<br>solution.randPoint(); &#x2F;&#x2F; return [0.82314, 0.38945]<br>solution.randPoint(); &#x2F;&#x2F; return [0.36572, 0.17248]</p>
<p>Constraints:</p>
<p>0 &lt; radius &lt;&#x3D; 108<br>-107 &lt;&#x3D; x_center, y_center &lt;&#x3D; 107<br>At most 3 * 104 calls will be made to randPoint.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The x-axis and y-axis correspond to uniform pixels, but such numbers will be inside the circle, as shown in the figure below, and may appear in blue.</p>
<img src="/2022/06/05/LC478GenerateRandomPointinaCircle/blue.png" class="" title="Circle">
<p>The easiest way to deal with it is to use Pythagorean theorem check whether the random point is in the circle, and if it is not, resample it again until the result is randomly generated.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(1) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius: <span class="built_in">float</span>, x_center: <span class="built_in">float</span>, y_center: <span class="built_in">float</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.r = radius</span><br><span class="line">        <span class="variable language_">self</span>.x = x_center</span><br><span class="line">        <span class="variable language_">self</span>.y = y_center</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">randPoint</span>(<span class="params">self</span>) -&gt; <span class="type">List</span>[<span class="built_in">float</span>]:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            x, y = random.uniform(-<span class="variable language_">self</span>.r, <span class="variable language_">self</span>.r), random.uniform(-<span class="variable language_">self</span>.r, <span class="variable language_">self</span>.r)</span><br><span class="line">            <span class="keyword">if</span> x*x + y*y &lt;= <span class="variable language_">self</span>.r * <span class="variable language_">self</span>.r:</span><br><span class="line">                <span class="keyword">return</span> [<span class="variable language_">self</span>.x+x, <span class="variable language_">self</span>.y+y]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Solution(radius, x_center, y_center)</span></span><br><span class="line"><span class="comment"># param_1 = obj.randPoint()</span></span><br></pre></td></tr></table></figure>

<h2 id="Random-Usage"><a href="#Random-Usage" class="headerlink" title="Random Usage"></a>Random Usage</h2><ol>
<li>uniform(): Returns a random float number between two given parameters</li>
<li>randint(): Returns a random number between the given range</li>
<li>choice(): Returns a random element from the given sequence</li>
<li>random(): Returns a random float number between 0 and 1</li>
</ol>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/generate-random-point-in-a-circle/">478. Generate Random Point in a Circle</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/generate-random-point-in-a-circle/discuss/2112983/HexPython-Rejection-Sampling">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Rejection Sampling</tag>
      </tags>
  </entry>
  <entry>
    <title>LC654 - Maximum Binary Tree</title>
    <url>/2022/08/30/LC654MaximumBinaryTree/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm:</p>
<ol>
<li>Create a root node whose value is the maximum value in nums.</li>
<li>Recursively build the left subtree on the subarray prefix to the left of the maximum value.</li>
<li>Recursively build the right subtree on the subarray suffix to the right of the maximum value.<br>Return the maximum binary tree built from nums.</li>
</ol>
<p>Example 1:</p>
<img src="/2022/08/30/LC654MaximumBinaryTree/e1.jpg" class="" title="e1">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,1,6,0,5]</span><br><span class="line">Output: [6,3,5,null,2,0,null,null,1]</span><br><span class="line">Explanation: The recursive calls are as follow:</span><br><span class="line">- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].</span><br><span class="line">    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].</span><br><span class="line">        - Empty array, so no child.</span><br><span class="line">        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].</span><br><span class="line">            - Empty array, so no child.</span><br><span class="line">            - Only one element, so child is a node with value 1.</span><br><span class="line">    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].</span><br><span class="line">        - Only one element, so child is a node with value 0.</span><br><span class="line">        - Empty array, so no child.</span><br></pre></td></tr></table></figure>

<p>Example 2:</p>
<img src="/2022/08/30/LC654MaximumBinaryTree/e2.jpg" class="" title="e2">
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input: nums = [3,2,1]</span><br><span class="line">Output: [3,null,2,null,1]</span><br></pre></td></tr></table></figure>

<p>Constraints:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 &lt;= nums.length &lt;= 1000</span><br><span class="line">0 &lt;= nums[i] &lt;= 1000</span><br><span class="line">All integers in nums are unique.</span><br></pre></td></tr></table></figure>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><img src="/2022/08/30/LC654MaximumBinaryTree/s1.png" class="" title="s1">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">constructMaximumBinaryTree</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">Optional</span>[TreeNode]:</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">arr</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> arr:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span> </span><br><span class="line">            </span><br><span class="line">            root = <span class="built_in">max</span>(arr)</span><br><span class="line">            idx = arr.index(root)</span><br><span class="line">            <span class="keyword">return</span> TreeNode(root, dfs(arr[:idx]), dfs(arr[idx+<span class="number">1</span>:]))</span><br><span class="line">        <span class="keyword">return</span> dfs(nums)</span><br></pre></td></tr></table></figure>



<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/maximum-binary-tree/">654. Maximum Binary Tree</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>LC998 - Maximum Binary Tree II</title>
    <url>/2022/08/30/LC998MaximumBinaryTreeII/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A maximum tree is a tree where every node has a value greater than any other value in its subtree.<br>You are given the root of a maximum binary tree and an integer val.<br>Just as in the previous problem, the given tree was constructed from a list a (root &#x3D; Construct(a)) recursively with the following Construct(a) routine:<br>If a is empty, return null.<br>Otherwise, let a[i] be the largest element of a. Create a root node with the value a[i].<br>The left child of root will be Construct([a[0], a[1], …, a[i - 1]]).<br>The right child of root will be Construct([a[i + 1], a[i + 2], …, a[a.length - 1]]).<br>Return root.<br>Note that we were not given a directly, only a root node root &#x3D; Construct(a).<br>Suppose b is a copy of a with the value val appended to it. It is guaranteed that b has unique values.<br>Return Construct(b).</p>
<p>Example 1:</p>
<img src="/2022/08/30/LC998MaximumBinaryTreeII/e1.jpg" class="" title="e1">
<pre><code>Input: root = [4,1,3,null,null,2], val = 5
Output: [5,4,null,1,3,null,null,2]
Explanation: a = [1,4,2,3], b = [1,4,2,3,5]
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example 2:</span><br><span class="line">&#123;% asset_img e2.jpg e2%&#125;</span><br></pre></td></tr></table></figure>
Input: root = [5,2,4,null,1], val = 3
Output: [5,2,4,null,1,null,3]
Explanation: a = [2,1,5,4], b = [2,1,5,4,3]
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example 3:</span><br><span class="line">&#123;% asset_img e3.jpg e3%&#125;</span><br></pre></td></tr></table></figure>
Input: root = [5,2,3,null,1], val = 4
Output: [5,2,4,null,1,3]
Explanation: a = [2,1,5,3], b = [2,1,5,3,4]
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Constraints:</span><br></pre></td></tr></table></figure>
The number of nodes in the tree is in the range [1, 100].
1 &lt;= Node.val &lt;= 100
All the values of the tree are unique.
1 &lt;= val &lt;= 100
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## Solution</span><br><span class="line">Because the new val is added at the end of the array, we can compare with the root node,</span><br><span class="line">- If it is larger than the root, then val is the new root and the original root is its left subtree (since val is to the right of the original root&#x27;s value in the array).</span><br><span class="line">- If it is smaller than the root node, it means that val must be recursively added to the right node of the original root. Note that recursion may change the root of the right subtree, so reassign the right node of the root node.</span><br><span class="line">Finally, if the recursive root is empty, a new leaf node can be returned directly.</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"># Definition for a binary tree node.</span><br><span class="line"># class TreeNode:</span><br><span class="line">#     def __init__(self, val=0, left=None, right=None):</span><br><span class="line">#         self.val = val</span><br><span class="line">#         self.left = left</span><br><span class="line">#         self.right = right</span><br><span class="line">class Solution:</span><br><span class="line">    def insertIntoMaxTree(self, root: Optional[TreeNode], val: int) -&gt; Optional[TreeNode]:</span><br><span class="line">        if not root:</span><br><span class="line">            return TreeNode(val)</span><br><span class="line">        </span><br><span class="line">        if val &gt; root.val:</span><br><span class="line">            cur = TreeNode(val)</span><br><span class="line">            cur.left = root</span><br><span class="line">            return cur</span><br><span class="line">        </span><br><span class="line">        root.right = self.insertIntoMaxTree(root.right, val)</span><br><span class="line">        return root</span><br></pre></td></tr></table></figure>



&lt;div id=&quot;footnotes&quot;&gt;&lt;hr&gt;&lt;div id=&quot;footnotelist&quot;&gt;&lt;ol style=&quot;list-style: none; padding-left: 0; margin-left: 40px&quot;&gt;&lt;li id=&quot;fn:1&quot;&gt;&lt;span style=&quot;display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px&quot;&gt;1.&lt;/span&gt;&lt;span style=&quot;display: inline-block; vertical-align: top; margin-left: 10px;&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-binary-tree-ii/&quot;&gt;998. Maximum Binary Tree II&lt;/a&gt;&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot;&gt; ↩&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/div&gt;
</code></pre>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Recursion</tag>
      </tags>
  </entry>
  <entry>
    <title>LC929 - Unique Email Address</title>
    <url>/2022/06/04/LC929UniqueEmailAddress/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Every valid email consists of a local name and a domain name, separated by the ‘@’ sign. Besides lowercase letters, the email may contain one or more ‘.’ or ‘+’.</p>
<p>For example, in “<a href="mailto:&#97;&#108;&#105;&#x63;&#x65;&#64;&#108;&#x65;&#x65;&#x74;&#99;&#111;&#x64;&#x65;&#x2e;&#99;&#111;&#x6d;">&#97;&#108;&#105;&#x63;&#x65;&#64;&#108;&#x65;&#x65;&#x74;&#99;&#111;&#x64;&#x65;&#x2e;&#99;&#111;&#x6d;</a>“, “alice” is the local name, and “leetcode.com” is the domain name.<br>If you add periods ‘.’ between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names.</p>
<p>For example, “<a href="mailto:&#97;&#x6c;&#105;&#x63;&#101;&#x2e;&#x7a;&#64;&#x6c;&#x65;&#101;&#x74;&#x63;&#x6f;&#x64;&#x65;&#x2e;&#x63;&#x6f;&#x6d;">&#97;&#x6c;&#105;&#x63;&#101;&#x2e;&#x7a;&#64;&#x6c;&#x65;&#101;&#x74;&#x63;&#x6f;&#x64;&#x65;&#x2e;&#x63;&#x6f;&#x6d;</a>“ and “<a href="mailto:&#97;&#108;&#x69;&#99;&#101;&#x7a;&#x40;&#108;&#x65;&#101;&#x74;&#x63;&#111;&#x64;&#101;&#46;&#x63;&#x6f;&#109;">&#97;&#108;&#x69;&#99;&#101;&#x7a;&#x40;&#108;&#x65;&#101;&#x74;&#x63;&#111;&#x64;&#101;&#46;&#x63;&#x6f;&#109;</a>“ forward to the same email address.<br>If you add a plus ‘+’ in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.</p>
<p>For example, “<a href="mailto:&#x6d;&#46;&#121;&#x2b;&#x6e;&#x61;&#109;&#x65;&#64;&#x65;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#x6d;&#46;&#121;&#x2b;&#x6e;&#x61;&#109;&#x65;&#64;&#x65;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a>“ will be forwarded to “<a href="mailto:&#x6d;&#121;&#x40;&#x65;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;">&#x6d;&#121;&#x40;&#x65;&#x6d;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;</a>“.<br>It is possible to use both of these rules at the same time.</p>
<p>Given an array of strings emails where we send one email to each emails[i], return the number of different addresses that actually receive mails.</p>
<p>Example 1:</p>
<p>Input: emails &#x3D; [“<a href="mailto:&#116;&#101;&#x73;&#x74;&#46;&#x65;&#x6d;&#97;&#105;&#108;&#x2b;&#97;&#108;&#101;&#x78;&#64;&#108;&#x65;&#101;&#x74;&#99;&#x6f;&#x64;&#x65;&#x2e;&#x63;&#111;&#x6d;">&#116;&#101;&#x73;&#x74;&#46;&#x65;&#x6d;&#97;&#105;&#108;&#x2b;&#97;&#108;&#101;&#x78;&#64;&#108;&#x65;&#101;&#x74;&#99;&#x6f;&#x64;&#x65;&#x2e;&#x63;&#111;&#x6d;</a>“,”<a href="mailto:&#x74;&#101;&#115;&#x74;&#46;&#x65;&#x2e;&#109;&#x61;&#x69;&#x6c;&#43;&#98;&#x6f;&#x62;&#x2e;&#x63;&#97;&#116;&#104;&#x79;&#64;&#x6c;&#x65;&#101;&#116;&#99;&#111;&#x64;&#x65;&#46;&#x63;&#111;&#x6d;">&#x74;&#101;&#115;&#x74;&#46;&#x65;&#x2e;&#109;&#x61;&#x69;&#x6c;&#43;&#98;&#x6f;&#x62;&#x2e;&#x63;&#97;&#116;&#104;&#x79;&#64;&#x6c;&#x65;&#101;&#116;&#99;&#111;&#x64;&#x65;&#46;&#x63;&#111;&#x6d;</a>“,”<a href="mailto:&#116;&#x65;&#x73;&#116;&#101;&#109;&#97;&#105;&#108;&#43;&#x64;&#x61;&#x76;&#x69;&#x64;&#x40;&#108;&#101;&#101;&#x2e;&#116;&#x63;&#x6f;&#100;&#101;&#x2e;&#99;&#111;&#109;">&#116;&#x65;&#x73;&#116;&#101;&#109;&#97;&#105;&#108;&#43;&#x64;&#x61;&#x76;&#x69;&#x64;&#x40;&#108;&#101;&#101;&#x2e;&#116;&#x63;&#x6f;&#100;&#101;&#x2e;&#99;&#111;&#109;</a>“]<br>Output: 2<br>Explanation: “<a href="mailto:&#116;&#x65;&#115;&#x74;&#x65;&#x6d;&#97;&#x69;&#108;&#x40;&#x6c;&#101;&#x65;&#x74;&#99;&#x6f;&#x64;&#101;&#46;&#x63;&#x6f;&#x6d;">&#116;&#x65;&#115;&#x74;&#x65;&#x6d;&#97;&#x69;&#108;&#x40;&#x6c;&#101;&#x65;&#x74;&#99;&#x6f;&#x64;&#101;&#46;&#x63;&#x6f;&#x6d;</a>“ and “<a href="mailto:&#x74;&#101;&#115;&#116;&#x65;&#x6d;&#97;&#105;&#x6c;&#x40;&#x6c;&#x65;&#101;&#x2e;&#x74;&#x63;&#x6f;&#x64;&#x65;&#x2e;&#x63;&#111;&#109;">&#x74;&#101;&#115;&#116;&#x65;&#x6d;&#97;&#105;&#x6c;&#x40;&#x6c;&#x65;&#101;&#x2e;&#x74;&#x63;&#x6f;&#x64;&#x65;&#x2e;&#x63;&#111;&#109;</a>“ actually receive mails.<br>Example 2:</p>
<p>Input: emails &#x3D; [“<a href="mailto:&#x61;&#x40;&#x6c;&#101;&#x65;&#116;&#x63;&#x6f;&#100;&#101;&#46;&#x63;&#111;&#109;">&#x61;&#x40;&#x6c;&#101;&#x65;&#116;&#x63;&#x6f;&#100;&#101;&#46;&#x63;&#111;&#109;</a>“,”<a href="mailto:&#98;&#64;&#x6c;&#101;&#x65;&#116;&#x63;&#x6f;&#x64;&#x65;&#46;&#99;&#x6f;&#x6d;">&#98;&#64;&#x6c;&#101;&#x65;&#116;&#x63;&#x6f;&#x64;&#x65;&#46;&#99;&#x6f;&#x6d;</a>“,”<a href="mailto:&#x63;&#x40;&#108;&#x65;&#x65;&#x74;&#x63;&#x6f;&#100;&#x65;&#x2e;&#x63;&#111;&#109;">&#x63;&#x40;&#108;&#x65;&#x65;&#x74;&#x63;&#x6f;&#100;&#x65;&#x2e;&#x63;&#111;&#109;</a>“]<br>Output: 3</p>
<p>Constraints:</p>
<p>1 &lt;&#x3D; emails.length &lt;&#x3D; 100<br>1 &lt;&#x3D; emails[i].length &lt;&#x3D; 100<br>emails[i] consist of lowercase English letters, ‘+’, ‘.’ and ‘@’.<br>Each emails[i] contains exactly one ‘@’ character.<br>All local and domain names are non-empty.<br>Local names do not start with a ‘+’ character.<br>Domain names end with the “.com” suffix.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>Based on the description, the rules apply differently for name and domain. Therefore, we split them and use different approaches</li>
<li>We can either use List or Set to store the data</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(L) time | O(L) space</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use List</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numUniqueEmails</span>(<span class="params">self, emails: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> email <span class="keyword">in</span> emails:</span><br><span class="line">            local, domain = email.split(<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">            local = local.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            local = local.split(<span class="string">&#x27;+&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            merge = local+<span class="string">&quot;@&quot;</span>+domain</span><br><span class="line">            <span class="keyword">if</span> merge <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">                res.append(merge)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Use Set</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numUniqueEmails</span>(<span class="params">self, emails: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        res = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> email <span class="keyword">in</span> emails:</span><br><span class="line">            local, domain = email.split(<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">            local = local.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            local = local.split(<span class="string">&#x27;+&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            merge = local+<span class="string">&quot;@&quot;</span>+domain</span><br><span class="line">            res.add(merge)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(res)</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/unique-email-addresses/">929. Unique Email Addresses</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/unique-email-addresses/discuss/2112763/HexPython-Brute-Force">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>easy</tag>
        <tag>Brute Force</tag>
      </tags>
  </entry>
  <entry>
    <title>LC238 - Product of Array Except Self</title>
    <url>/2022/06/06/LC238ProductofArrayExceptSelf/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].</p>
<p>The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</p>
<p>You must write an algorithm that runs in O(n) time and without using the division operation.</p>
<p>Example 1:</p>
<p>Input: nums &#x3D; [1,2,3,4]<br>Output: [24,12,8,6]<br>Example 2:</p>
<p>Input: nums &#x3D; [-1,1,0,-3,3]<br>Output: [0,0,9,0,0]</p>
<p>Constraints:</p>
<p>2 &lt;&#x3D; nums.length &lt;&#x3D; 105<br>-30 &lt;&#x3D; nums[i] &lt;&#x3D; 30<br>The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>Traverse nums once from left to right, and store the product of the current number in the remaining product result</li>
<li>Traverse nums once from right to left, and store the product of the right side of the current number in the result of the correct product</li>
<li>Multiply the results of the left product and the right product, which is the product of the numbers other than yourself</li>
</ol>
<p><strong>optimization:</strong></p>
<p>In the last traversal from left to right, store the result directly in the loop of numbers from right to right.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">productExceptSelf</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        leftproduct = [<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums))]</span><br><span class="line">        rightproduct = [<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums))]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            leftproduct[i] = leftproduct[i-<span class="number">1</span>] * nums[i-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(nums)-<span class="number">1</span>)):</span><br><span class="line">            rightproduct[i] = rightproduct[i+<span class="number">1</span>] * nums[i+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            leftproduct[i] *= rightproduct[i]</span><br><span class="line">        <span class="keyword">return</span> leftproduct</span><br><span class="line"></span><br><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">productExceptSelf</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        res = [<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums))]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">            res[i] = res[i-<span class="number">1</span>] * nums[i-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        temp = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(nums))):</span><br><span class="line">            res[i] = temp * res[i]</span><br><span class="line">            temp *= nums[i]</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/product-of-array-except-self/">238. Product of Array Except Self</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/product-of-array-except-self/discuss/2118415/Python-Prefix-Sum">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1894 - Find the Student That Will Replace the Chalk</title>
    <url>/2022/06/06/LC1894FindtheStudentthatWillReplacetheChalk/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are n students in a class numbered from 0 to n - 1. The teacher will give each student a problem starting with the student number 0, then the student number 1, and so on until the teacher reaches the student number n - 1. After that, the teacher will restart the process, starting with the student number 0 again.</p>
<p>You are given a 0-indexed integer array chalk and an integer k. There are initially k pieces of chalk. When the student number i is given a problem to solve, they will use chalk[i] pieces of chalk to solve that problem. However, if the current number of chalk pieces is strictly less than chalk[i], then the student number i will be asked to replace the chalk.</p>
<p>Return the index of the student that will replace the chalk.</p>
<p>Example 1:</p>
<p>Input: chalk &#x3D; [5,1,5], k &#x3D; 22<br>Output: 0<br>Explanation: The students go in turns as follows:</p>
<ul>
<li>Student number 0 uses 5 chalk, so k &#x3D; 17.</li>
<li>Student number 1 uses 1 chalk, so k &#x3D; 16.</li>
<li>Student number 2 uses 5 chalk, so k &#x3D; 11.</li>
<li>Student number 0 uses 5 chalk, so k &#x3D; 6.</li>
<li>Student number 1 uses 1 chalk, so k &#x3D; 5.</li>
<li>Student number 2 uses 5 chalk, so k &#x3D; 0.<br>Student number 0 does not have enough chalk, so they will have to replace it.<br>Example 2:</li>
</ul>
<p>Input: chalk &#x3D; [3,4,1,2], k &#x3D; 25<br>Output: 1<br>Explanation: The students go in turns as follows:</p>
<ul>
<li>Student number 0 uses 3 chalk so k &#x3D; 22.</li>
<li>Student number 1 uses 4 chalk so k &#x3D; 18.</li>
<li>Student number 2 uses 1 chalk so k &#x3D; 17.</li>
<li>Student number 3 uses 2 chalk so k &#x3D; 15.</li>
<li>Student number 0 uses 3 chalk so k &#x3D; 12.</li>
<li>Student number 1 uses 4 chalk so k &#x3D; 8.</li>
<li>Student number 2 uses 1 chalk so k &#x3D; 7.</li>
<li>Student number 3 uses 2 chalk so k &#x3D; 5.</li>
<li>Student number 0 uses 3 chalk so k &#x3D; 2.<br>Student number 1 does not have enough chalk, so they will have to replace it.</li>
</ul>
<p>Constraints:</p>
<p>chalk.length &#x3D;&#x3D; n<br>1 &lt;&#x3D; n &lt;&#x3D; 105<br>1 &lt;&#x3D; chalk[i] &lt;&#x3D; 105<br>1 &lt;&#x3D; k &lt;&#x3D; 109</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>Use k to modulo the sum of chalk</li>
<li>Use the modulo result to compare the elements of chalk. If less than zero, the current student needs to replace the chalk</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">chalkReplacer</span>(<span class="params">self, chalk: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        summ = <span class="built_in">sum</span>(chalk)</span><br><span class="line">        k %= summ</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(chalk)):</span><br><span class="line">            <span class="keyword">if</span> k - chalk[i] &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                k -= chalk[i]</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/find-the-student-that-will-replace-the-chalk/">1894. Find the Student that Will Replace the Chalk</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/find-the-student-that-will-replace-the-chalk/discuss/2118464/HexPython-Simulation">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Simulation</tag>
      </tags>
  </entry>
  <entry>
    <title>LC2055 - Plates Between Candles</title>
    <url>/2022/06/07/LC2055PlatesBetweenCandles/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There is a long table with a line of plates and candles arranged on top of it. You are given a 0-indexed string s consisting of characters ‘*‘ and ‘|’ only, where a ‘*‘ represents a plate and a ‘|’ represents a candle.</p>
<p>You are also given a 0-indexed 2D integer array queries where queries[i] &#x3D; [lefti, righti] denotes the substring s[lefti…righti] (inclusive). For each query, you need to find the number of plates between candles that are in the substring. A plate is considered between candles if there is at least one candle to its left and at least one candle to its right in the substring.</p>
<p>For example, s &#x3D; “||**||**|*“, and a query [3, 8] denotes the substring “*||**|”. The number of plates between candles in this substring is 2, as each of the two plates has at least one candle in the substring to its left and right.<br>Return an integer array answer where answer[i] is the answer to the ith query.</p>
<p>Example 1:</p>
<p>Input: s &#x3D; “**|**|***|”, queries &#x3D; [[2,5],[5,9]]<br>Output: [2,3]<br>Explanation:</p>
<ul>
<li>queries[0] has two plates between candles.</li>
<li>queries[1] has three plates between candles.<br>Example 2:</li>
</ul>
<p>ex-2<br>Input: s &#x3D; “***|**|*****|**||**|*”, queries &#x3D; [[1,17],[4,5],[14,17],[5,11],[15,16]]<br>Output: [9,0,0,0,0]<br>Explanation:</p>
<ul>
<li>queries[0] has nine plates between candles.</li>
<li>The other queries have zero plates between candles.</li>
</ul>
<p>Constraints:</p>
<p>3 &lt;&#x3D; s.length &lt;&#x3D; 105<br>s consists of ‘*‘ and ‘|’ characters.<br>1 &lt;&#x3D; queries.length &lt;&#x3D; 105<br>queries[i].length &#x3D;&#x3D; 2<br>0 &lt;&#x3D; lefti &lt;&#x3D; righti &lt; s.length</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>the position of the first candle to the right of the left endpoint</li>
<li>the position of the first candle to the left of the right endpoint</li>
<li>how many plates are between these two candles</li>
<li>Counting the nearest candle to the left and the nearest candle to the right of each point is a kind of simple dynamic programming. And finding the quantity of a certain type between two points is the standard prefix and application.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">platesBetweenCandles</span>(<span class="params">self, s: <span class="built_in">str</span>, queries: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        length = <span class="built_in">len</span>(s)</span><br><span class="line">        presum = [<span class="number">0</span>]</span><br><span class="line">        lefts, rights = [-<span class="number">1</span>] * length, [-<span class="number">1</span>] * length</span><br><span class="line">        l,r = -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">            <span class="keyword">if</span> v == <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                presum.append(presum[-<span class="number">1</span>]+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                presum.append(presum[-<span class="number">1</span>])</span><br><span class="line">                l = i</span><br><span class="line">            lefts[i] = l</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(s[::-<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> v == <span class="string">&quot;|&quot;</span>:</span><br><span class="line">                r = length - <span class="number">1</span> - i</span><br><span class="line">            rights[length-<span class="number">1</span>-i] = r</span><br><span class="line"></span><br><span class="line">        res = [<span class="number">0</span>] * <span class="built_in">len</span>(queries)</span><br><span class="line">        <span class="keyword">for</span> i, query <span class="keyword">in</span> <span class="built_in">enumerate</span>(queries):</span><br><span class="line">            left = rights[query[<span class="number">0</span>]]</span><br><span class="line">            right = lefts[query[<span class="number">1</span>]]</span><br><span class="line">            <span class="keyword">if</span> left &gt;= <span class="number">0</span> <span class="keyword">and</span> right &gt;= <span class="number">0</span> <span class="keyword">and</span> left &lt; right:</span><br><span class="line">                res[i] = presum[right] - presum[left]</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/plates-between-candles/">2055. Plates Between Candles</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/plates-between-candles/discuss/2125066/HexPython-Prefix-Sum">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>LC475 - Heaters</title>
    <url>/2022/06/07/LC475Heaters/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.</p>
<p>Every house can be warmed, as long as the house is within the heater’s warm radius range. </p>
<p>Given the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.</p>
<p>Notice that all the heaters follow your radius standard, and the warm radius will the same.</p>
<p>Example 1:</p>
<p>Input: houses &#x3D; [1,2,3], heaters &#x3D; [2]<br>Output: 1<br>Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.<br>Example 2:</p>
<p>Input: houses &#x3D; [1,2,3,4], heaters &#x3D; [1,4]<br>Output: 1<br>Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.<br>Example 3:</p>
<p>Input: houses &#x3D; [1,5], heaters &#x3D; [2]<br>Output: 3</p>
<p>Constraints:</p>
<p>1 &lt;&#x3D; houses.length, heaters.length &lt;&#x3D; 3 * 104<br>1 &lt;&#x3D; houses[i], heaters[i] &lt;&#x3D; 109</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>This question is to find the minimum heating radius, then the object divided by two is the radius</li>
<li>The interval can only be large and not small. The left interval of the dichotomy is 0. When the house and the heater overlap, the interval of the dichotomy is the largest coordinate</li>
<li>Determine whether the specified radius can cover the front and rear houses:<ul>
<li>Go through each heater</li>
<li>Two-point query heater heating radius can cover the leftmost house number</li>
<li>If the leftmost radius cannot overlap with the last rightmost, it means that the heating cannot be covered</li>
<li>Update the rightmost house number that the current heater radius can cover</li>
<li>If the last house can be reached, the coverage is complete</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O((n+m)logn) time | O(logn) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findRadius</span>(<span class="params">self, houses: <span class="type">List</span>[<span class="built_in">int</span>], heaters: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        houses.sort()</span><br><span class="line">        heaters.sort()</span><br><span class="line"></span><br><span class="line">        l, r = <span class="number">0</span>, <span class="built_in">max</span>(houses[-<span class="number">1</span>], heaters[-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">            mid = l + (r-l)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.canHeat(mid, heaters, houses):</span><br><span class="line">                r = mid-<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> l</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canHeat</span>(<span class="params">self, radius, heaters, houses</span>):</span><br><span class="line">        pre_house = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> heater <span class="keyword">in</span> heaters:</span><br><span class="line">            cover = bisect.bisect_left(houses, heater-radius)</span><br><span class="line">            <span class="keyword">if</span> cover &gt; pre_house:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            pre_house = bisect.bisect_right(houses, heater+radius)</span><br><span class="line">            <span class="keyword">if</span> pre_house &gt;= <span class="built_in">len</span>(houses):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/heaters/">475. Heaters</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/heaters/discuss/2124950/HexPython-Binary-Search">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>LC875 - Koko Eating Bananas</title>
    <url>/2022/06/07/LC875KokoEatingBananas/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.</p>
<p>Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.</p>
<p>Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.</p>
<p>Return the minimum integer k such that she can eat all the bananas within h hours.</p>
<p>Example 1:</p>
<p>Input: piles &#x3D; [3,6,7,11], h &#x3D; 8<br>Output: 4<br>Example 2:</p>
<p>Input: piles &#x3D; [30,11,23,4,20], h &#x3D; 5<br>Output: 30<br>Example 3:</p>
<p>Input: piles &#x3D; [30,11,23,4,20], h &#x3D; 6<br>Output: 23</p>
<p>Constraints:</p>
<p>1 &lt;&#x3D; piles.length &lt;&#x3D; 104<br>piles.length &lt;&#x3D; h &lt;&#x3D; 109<br>1 &lt;&#x3D; piles[i] &lt;&#x3D; 109</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>According to the meaning of the question, you can know that the slower Koko eats bananas, the more time it takes. On the contrary, the greater the speed, the less time-consuming, which is <strong>the monotonicity of the problem</strong>;</li>
<li>What we’re looking for is speed. Because the question limits Koko to eat only a bunch of bananas within an hour, so the maximum speed is the one with the largest number of these bunches of bananas. The minimum value of the speed is 11, in fact, you can also analyze what the lower bound is. Since the time complexity of binary search is very low, rigorous analysis is not necessary;</li>
<li>Or because Koko can only choose a bunch of bananas to eat within an hour, so: <strong>the time it takes to eat each bunch of bananas &#x3D; the number of bananas in this bunch &#x2F; the number of bananas that Koko eats in an hour</strong>. According to the meaning of the question, when &#x2F; is not divisible, it needs to be rounded up.</li>
</ul>
<p>Note: When the guessing speed of the “binary search” algorithm is just enough to make Koko eat the bananas within the specified time, you should try a smaller speed to ensure that you can eat the bananas within the specified time.<br>This is because the question asks about “minimum speed”.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(nlogm) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minEatingSpeed</span>(<span class="params">self, piles: <span class="type">List</span>[<span class="built_in">int</span>], h: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        l = <span class="number">1</span></span><br><span class="line">        r = <span class="built_in">max</span>(piles)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> l &lt; r:</span><br><span class="line">            mid = l + (r-l)//<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.canFinish(piles, mid, h):</span><br><span class="line">                r = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l = mid</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> l == r-<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>.canFinish(piles, l, h):</span><br><span class="line">                    r = l </span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> r </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">canFinish</span>(<span class="params">self, piles, speed, hour</span>):</span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> pile <span class="keyword">in</span> piles:</span><br><span class="line">            total+= math.ceil(pile/speed)</span><br><span class="line">            <span class="keyword">if</span> total &gt; hour:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Official Solution: Binary Search (More readable version)</span></span><br><span class="line"><span class="comment"># O(nlogm) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minEatingSpeed</span>(<span class="params">self, piles: <span class="type">List</span>[<span class="built_in">int</span>], h: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:  </span><br><span class="line">        <span class="comment"># Initalize the left and right boundaries     </span></span><br><span class="line">        left = <span class="number">1</span></span><br><span class="line">        right = <span class="built_in">max</span>(piles)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            <span class="comment"># Get the middle index between left and right boundary indexes.</span></span><br><span class="line">            <span class="comment"># hour_spent stands for the total hour Koko spends.</span></span><br><span class="line">            middle = (left + right) // <span class="number">2</span>            </span><br><span class="line">            hour_spent = <span class="number">0</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Iterate over the piles and calculate hour_spent.</span></span><br><span class="line">            <span class="comment"># We increase the hour_spent by ceil(pile / middle)</span></span><br><span class="line">            <span class="keyword">for</span> pile <span class="keyword">in</span> piles:</span><br><span class="line">                hour_spent += math.ceil(pile / middle)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Check if middle is a workable speed, and cut the search space by half.</span></span><br><span class="line">            <span class="keyword">if</span> hour_spent &lt;= h:</span><br><span class="line">                right = middle</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = middle + <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Once the left and right boundaries coincide, we find the target value,</span></span><br><span class="line">        <span class="comment"># that is, the minimum workable eating speed.</span></span><br><span class="line">        <span class="keyword">return</span> right</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/koko-eating-bananas/">875. Koko Eating Bananas</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/koko-eating-bananas/discuss/2122369/HexPython-Binary-Search">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LC890 - Find and Replace Pattern</title>
    <url>/2022/06/12/LC890FindandReplacePattern/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.</p>
<p>A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.</p>
<p>Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.</p>
<p>Example 1:</p>
<p>Input: words &#x3D; [“abc”,”deq”,”mee”,”aqq”,”dkd”,”ccc”], pattern &#x3D; “abb”<br>Output: [“mee”,”aqq”]<br>Explanation: “mee” matches the pattern because there is a permutation {a -&gt; m, b -&gt; e, …}.<br>“ccc” does not match the pattern because {a -&gt; c, b -&gt; c, …} is not a permutation, since a and b map to the same letter.<br>Example 2:</p>
<p>Input: words &#x3D; [“a”,”b”,”c”], pattern &#x3D; “a”<br>Output: [“a”,”b”,”c”]</p>
<p>Constraints:</p>
<p>1 &lt;&#x3D; pattern.length &lt;&#x3D; 20<br>1 &lt;&#x3D; words.length &lt;&#x3D; 50<br>words[i].length &#x3D;&#x3D; pattern.length<br>pattern and words[i] are lowercase English letters.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>According to the topic of the use rule, traverse each word, check all the words existing in each word one by one, and determine whether the mapping is satisfied.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(nm) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findAndReplacePattern</span>(<span class="params">self, words: <span class="type">List</span>[<span class="built_in">str</span>], pattern: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">str</span>]:</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            dic_pattern = &#123;&#125;</span><br><span class="line">            dic_words = &#123;&#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(word)):</span><br><span class="line">                <span class="keyword">if</span> pattern[i] <span class="keyword">not</span> <span class="keyword">in</span> dic_pattern:</span><br><span class="line">                    dic_pattern[pattern[i]] = word[i]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> dic_pattern[pattern[i]] != word[i]:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> word[i] <span class="keyword">not</span> <span class="keyword">in</span> dic_words:</span><br><span class="line">                    dic_words[word[i]] = pattern[i]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> dic_words[word[i]] != pattern[i]:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> i == <span class="built_in">len</span>(word)-<span class="number">1</span>:</span><br><span class="line">                    res.append(word)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/find-and-replace-pattern/">890. Find and Replace Pattern</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/find-and-replace-pattern/discuss/2140722/HexPython-Hashmap">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Hashmap</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1051 - Height Checker</title>
    <url>/2022/06/14/LC1051HeightChecker/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.</p>
<p>You are given an integer array heights representing the current order that the students are standing in. Each heights[i] is the height of the ith student in line (0-indexed).</p>
<p>Return the number of indices where heights[i] !&#x3D; expected[i].</p>
<p>Example 1:</p>
<p>Input: heights &#x3D; [1,1,4,2,1,3]<br>Output: 3<br>Explanation:<br>heights:  [1,1,4,2,1,3]<br>expected: [1,1,1,2,3,4]<br>Indices 2, 4, and 5 do not match.<br>Example 2:</p>
<p>Input: heights &#x3D; [5,1,2,3,4]<br>Output: 5<br>Explanation:<br>heights:  [5,1,2,3,4]<br>expected: [1,2,3,4,5]<br>All indices do not match.<br>Example 3:</p>
<p>Input: heights &#x3D; [1,2,3,4,5]<br>Output: 0<br>Explanation:<br>heights:  [1,2,3,4,5]<br>expected: [1,2,3,4,5]<br>All indices match.</p>
<p>Constraints:</p>
<p>1 &lt;&#x3D; heights.length &lt;&#x3D; 100<br>1 &lt;&#x3D; heights[i] &lt;&#x3D; 100</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Sort the array heights and store it in the variable expected</li>
<li>Count the number of heights[i] ≠ expected[i]</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#O(nlogn) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">heightChecker</span>(<span class="params">self, heights: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        expected = <span class="built_in">sorted</span>(heights)</span><br><span class="line">        cnt =<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(heights)):</span><br><span class="line">            <span class="keyword">if</span> expected[i] != heights[i]:</span><br><span class="line">                cnt+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> cnt</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/height-checker/">1051. Height Checker</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/height-checker/discuss/2148931/HexPython-Sorting">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>easy</tag>
        <tag>Sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>LC406 - Queue Reconstruction by Height</title>
    <url>/2022/06/14/LC406QueueReconstructionbyHeight/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] &#x3D; [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.</p>
<p>Reconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] &#x3D; [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).</p>
<p>Example 1:</p>
<p>Input: people &#x3D; [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]<br>Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]<br>Explanation:<br>Person 0 has height 5 with no other people taller or the same height in front.<br>Person 1 has height 7 with no other people taller or the same height in front.<br>Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.<br>Person 3 has height 6 with one person taller or the same height in front, which is person 1.<br>Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.<br>Person 5 has height 7 with one person taller or the same height in front, which is person 1.<br>Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.<br>Example 2:</p>
<p>Input: people &#x3D; [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]<br>Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]</p>
<p>Constraints:</p>
<p>1 &lt;&#x3D; people.length &lt;&#x3D; 2000<br>0 &lt;&#x3D; hi &lt;&#x3D; 106<br>0 &lt;&#x3D; ki &lt; people.length<br>It is guaranteed that the queue can be reconstructed.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Sort people by height in descending order, same height by location in ascending order</li>
<li>Inserted by position value from big to small, because the big one is inserted first, the current position is the position of the inserted column.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n^2) time | O(logn) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reconstructQueue</span>(<span class="params">self, people: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        people.sort(key=<span class="keyword">lambda</span> x:(-x[<span class="number">0</span>], x[<span class="number">1</span>]))</span><br><span class="line">        res = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> h, idx <span class="keyword">in</span> people:</span><br><span class="line">            res.insert(idx, (h, idx))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment">## Another way of coding</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reconstructQueue</span>(<span class="params">self, people: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        people.sort(key = <span class="keyword">lambda</span> x: (-x[<span class="number">0</span>], x[<span class="number">1</span>]))</span><br><span class="line">        res = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> h, p <span class="keyword">in</span> people:</span><br><span class="line">            res[p:p] = [[h, p]]</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>Time complexity: O(n^2), where n is the length of people, requires O(nlogn) sorting, and then takes O(n^2) time to traverse each person into the queue</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">people = [[<span class="number">7</span>,<span class="number">0</span>],[<span class="number">4</span>,<span class="number">4</span>],[<span class="number">7</span>,<span class="number">1</span>],[<span class="number">5</span>,<span class="number">0</span>],[<span class="number">6</span>,<span class="number">1</span>],[<span class="number">5</span>,<span class="number">2</span>]]</span><br><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> people:</span><br><span class="line">    ans[i[<span class="number">1</span>]:i[<span class="number">1</span>]] = [i]</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"></span><br><span class="line"><span class="comment">## insert</span></span><br><span class="line">ans[i[<span class="number">1</span>]:i[<span class="number">1</span>]] = [i] == ans.insert(i[<span class="number">1</span>], i)</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/queue-reconstruction-by-height/">406. Queue Reconstruction by Height</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/queue-reconstruction-by-height/discuss/2149019/HexPython-Sorting-Greedy">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Sorting</tag>
        <tag>Greedy</tag>
        <tag>medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LC498 - Diagonal Traverse</title>
    <url>/2022/06/14/LC498DiagonalTraverse/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.</p>
<p>Example 1:</p>


<p>Input: mat &#x3D; [[1,2,3],[4,5,6],[7,8,9]]<br>Output: [1,2,4,7,5,3,6,8,9]<br>Example 2:</p>
<p>Input: mat &#x3D; [[1,2],[3,4]]<br>Output: [1,2,3,4]</p>
<p>Constraints:</p>
<p>m &#x3D;&#x3D; mat.length<br>n &#x3D;&#x3D; mat[i].length<br>1 &lt;&#x3D; m, n &lt;&#x3D; 104<br>1 &lt;&#x3D; m * n &lt;&#x3D; 104<br>-105 &lt;&#x3D; mat[i][j] &lt;&#x3D; 105</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Assuming n &#x3D; row, m &#x3D; column, the current point is (i,j), since each traversal is on the line i+j&#x3D;z, so write (i,z-i), z is from 0 to m+n-2</p>
<p>Use i to traverse, the point of each traversal is (i, z-i), there are two inequalities<br><strong>0&lt;&#x3D;i&lt;&#x3D;n-1</strong><br><strong>0&lt;&#x3D;z-i&lt;&#x3D;m-1, that is, z-m+1&lt;&#x3D;i&lt;&#x3D;z</strong></p>
<p>So the lower bound is: max(0,z-m+1)<br>The upper bound is: min(n-1,z)</p>
<p>Then traverse from the upper bound to the lower bound, and from the next to the upper bound, and both the upper and lower bounds can be obtained.</p>
<img src="/2022/06/14/LC498DiagonalTraverse/diagonal.png" class="" title="diagonal">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(nm) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findDiagonalOrder</span>(<span class="params">self, mat: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        row = <span class="built_in">len</span>(mat)</span><br><span class="line">        col = <span class="built_in">len</span>(mat[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 0: bottom to top, 1: top to bottom</span></span><br><span class="line">        direction = <span class="number">0</span> </span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">range</span>(row+col-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> direction:</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="number">0</span>, line - col +<span class="number">1</span>), <span class="built_in">min</span>(row-<span class="number">1</span>, line)+<span class="number">1</span>):</span><br><span class="line">                    res.append(mat[item][line-item])</span><br><span class="line">                direction = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">min</span>(row-<span class="number">1</span>, line), <span class="built_in">max</span>(<span class="number">0</span>, line-col+<span class="number">1</span>)-<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                    res.append(mat[item][line-item])</span><br><span class="line">                direction = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/diagonal-traverse/">498. Diagonal Traverse</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/diagonal-traverse/discuss/2149383/HexPython-Math-Simulation">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Simulation</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1037 - Valid Boomerang</title>
    <url>/2022/06/08/LC1037ValidBoomerang/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array points where points[i] &#x3D; [xi, yi] represents a point on the X-Y plane, return true if these points are a boomerang.</p>
<p>A boomerang is a set of three points that are all distinct and not in a straight line.</p>
<p>Example 1:</p>
<p>Input: points &#x3D; [[1,1],[2,3],[3,2]]<br>Output: true<br>Example 2:</p>
<p>Input: points &#x3D; [[1,1],[2,2],[3,3]]<br>Output: false</p>
<p>Constraints:</p>
<p>points.length &#x3D;&#x3D; 3<br>points[i].length &#x3D;&#x3D; 2<br>0 &lt;&#x3D; xi, yi &lt;&#x3D; 100</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Formula: (y2 - y1) * (x3 - x2) !&#x3D; (y3 - y2) * (x2 - x1)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isBoomerang</span>(<span class="params">self, points: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        (x1, y1), (x2, y2), (x3, y3) = points</span><br><span class="line">        <span class="keyword">return</span> (y2 - y1) * (x3 - x2) != (y3 - y2) * (x2 - x1)</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/valid-boomerang/">1037. Valid Boomerang</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/valid-boomerang/discuss/2126713/HexPython-Math">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>easy</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1588 - Sum of All Odd Length Subarrays</title>
    <url>/2022/06/16/LC1588SumofAllOddLengthSubarrays/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of positive integers arr, return the sum of all possible odd-length subarrays of arr.</p>
<p>A subarray is a contiguous subsequence of the array.</p>
<p>Example 1:</p>
<p>Input: arr &#x3D; [1,4,2,5,3]<br>Output: 58<br>Explanation: The odd-length subarrays of arr and their sums are:<br>[1] &#x3D; 1<br>[4] &#x3D; 4<br>[2] &#x3D; 2<br>[5] &#x3D; 5<br>[3] &#x3D; 3<br>[1,4,2] &#x3D; 7<br>[4,2,5] &#x3D; 11<br>[2,5,3] &#x3D; 10<br>[1,4,2,5,3] &#x3D; 15<br>If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 &#x3D; 58<br>Example 2:</p>
<p>Input: arr &#x3D; [1,2]<br>Output: 3<br>Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.<br>Example 3:</p>
<p>Input: arr &#x3D; [10,11,12]<br>Output: 66</p>
<p>Constraints:</p>
<p>1 &lt;&#x3D; arr.length &lt;&#x3D; 100<br>1 &lt;&#x3D; arr[i] &lt;&#x3D; 1000</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># O(n^3) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sumOddLengthSubarrays</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> odd <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(arr)+<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">            cur = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> cur + odd &lt;= <span class="built_in">len</span>(arr):</span><br><span class="line">                summ = <span class="built_in">sum</span>(arr[cur:cur+odd])</span><br><span class="line">                cur+=<span class="number">1</span></span><br><span class="line">                result += summ</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h3 id="Prefix-Sum"><a href="#Prefix-Sum" class="headerlink" title="Prefix Sum"></a>Prefix Sum</h3><ul>
<li>Prefix sum, num[i] represents the sum of 0 ~ i numbers, then num[i] &#x3D; num[i] + sum(0 ~ i - 1)</li>
<li>Therefore, you only need to find the odd length (denoted as i) that is less than the length of the arr array, and then calculate the difference between the lengths num[j + i] - num[j] in turn.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n^2) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sumOddLengthSubarrays</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        summ = [<span class="number">0</span>]</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">            summ.append(summ[-<span class="number">1</span>]+i)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> odd <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(arr)+<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">            left = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> left+odd &lt; <span class="built_in">len</span>(summ):</span><br><span class="line">                res+= summ[left+odd]-summ[left]</span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>


<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/sum-of-all-odd-length-subarrays/">532. K-diff Pairs in an Array</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/sum-of-all-odd-length-subarrays/discuss/2156720/HexPython-Prefix-Sum">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>easy</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>LC303 - Range Sum Quey - Immutable</title>
    <url>/2022/06/16/LC303RangeSumQuey-Immutable/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an integer array nums, handle multiple queries of the following type:</p>
<p>Calculate the sum of the elements of nums between indices left and right inclusive where left &lt;&#x3D; right.<br>Implement the NumArray class:</p>
<p>NumArray(int[] nums) Initializes the object with the integer array nums.<br>int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + … + nums[right]).</p>
<p>Example 1:</p>
<p>Input<br>[“NumArray”, “sumRange”, “sumRange”, “sumRange”]<br>[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]<br>Output<br>[null, 1, -1, -3]</p>
<p>Explanation<br>NumArray numArray &#x3D; new NumArray([-2, 0, 3, -5, 2, -1]);<br>numArray.sumRange(0, 2); &#x2F;&#x2F; return (-2) + 0 + 3 &#x3D; 1<br>numArray.sumRange(2, 5); &#x2F;&#x2F; return 3 + (-5) + 2 + (-1) &#x3D; -1<br>numArray.sumRange(0, 5); &#x2F;&#x2F; return (-2) + 0 + 3 + (-5) + 2 + (-1) &#x3D; -3</p>
<p>Constraints:</p>
<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 104<br>-105 &lt;&#x3D; nums[i] &lt;&#x3D; 105<br>0 &lt;&#x3D; left &lt;&#x3D; right &lt; nums.length<br>At most 104 calls will be made to sumRange.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Basic Prefix sum problem<br>Many other prefix sum problems can be solved according to this logic</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">        <span class="variable language_">self</span>.summ = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="variable language_">self</span>.summ.append(<span class="variable language_">self</span>.summ[-<span class="number">1</span>] + i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sumRange</span>(<span class="params">self, left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.summ[right+<span class="number">1</span>] - <span class="variable language_">self</span>.summ[left]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = NumArray(nums)</span></span><br><span class="line"><span class="comment"># param_1 = obj.sumRange(left,right)</span></span><br></pre></td></tr></table></figure>



<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/range-sum-query-immutable/">303. Range Sum Query - Immutable</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/range-sum-query-immutable/discuss/2156748/HexPrefix-Sum">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>easy</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>LC532 - K-Diff Pairs in an Array</title>
    <url>/2022/06/16/LC532K-diffPairsinanArray/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.</p>
<p>A k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:</p>
<p>0 &lt;&#x3D; i, j &lt; nums.length<br>i !&#x3D; j<br>nums[i] - nums[j] &#x3D;&#x3D; k<br>Notice that |val| denotes the absolute value of val.</p>
<p>Example 1:</p>
<p>Input: nums &#x3D; [3,1,4,1,5], k &#x3D; 2<br>Output: 2<br>Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).<br>Although we have two 1s in the input, we should only return the number of unique pairs.<br>Example 2:</p>
<p>Input: nums &#x3D; [1,2,3,4,5], k &#x3D; 1<br>Output: 4<br>Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).<br>Example 3:</p>
<p>Input: nums &#x3D; [1,3,1,5,4], k &#x3D; 0<br>Output: 1<br>Explanation: There is one 0-diff pair in the array, (1, 1).</p>
<p>Constraints:</p>
<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 104<br>-107 &lt;&#x3D; nums[i] &lt;&#x3D; 107<br>0 &lt;&#x3D; k &lt;&#x3D; 107</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><ul>
<li>Sort the <code>nums</code> list</li>
<li>Then, maintain two pointers <code>i</code>, <code>j</code>, and guarantee <code>i &lt; j &lt; n</code>, if <code>nums[j] = nums[i] + k</code> is counted in the answer</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(nlogn) time | O(nlogn) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findPairs</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = <span class="built_in">set</span>()</span><br><span class="line">        l, r = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        nums.sort()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> r &lt; <span class="built_in">len</span>(nums):</span><br><span class="line">            left, right = nums[l], nums[r]</span><br><span class="line">            <span class="keyword">if</span> right - left == k:</span><br><span class="line">                <span class="keyword">if</span> l &lt; r <span class="keyword">and</span> (left, right) <span class="keyword">not</span> <span class="keyword">in</span> ans:</span><br><span class="line">                    ans.add((left, right))</span><br><span class="line">                r+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> right-left &lt; k:</span><br><span class="line">                r +=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> right - left &gt; k:</span><br><span class="line">                l +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(ans)</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/k-diff-pairs-in-an-array/">532. K-diff Pairs in an Array</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/k-diff-pairs-in-an-array/discuss/2156693/HexPython-Sorting%2BTwoPointers">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Sorting</tag>
        <tag>medium</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>LC508 - Most Frequent SubtreeSum</title>
    <url>/2022/06/19/LC508MostFrequentSubtreeSum/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the root of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.<br>The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).</p>
<p>Example 1:</p>
<img src="/2022/06/19/LC508MostFrequentSubtreeSum/freq1-tree.jpg" class="" title="freq1-tree">
<p>Input: root &#x3D; [5,2,-3]<br>Output: [2,-3,4]</p>
<p>Example 2:</p>
<img src="/2022/06/19/LC508MostFrequentSubtreeSum/freq1-tree.jpg" class="" title="freq1-tree">
<p>Input: root &#x3D; [5,2,-5]<br>Output: [2]</p>
<p>Constraints:<br>The number of nodes in the tree is in the range [1, 104].<br>-105 &lt;&#x3D; Node.val &lt;&#x3D; 105</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The case means:</p>
<p>example 1: Input [5,2,-3], then the subtree sum is 5 + 2 - 3 &#x3D; 4, subtree 2, subtree -3, so the number of occurrences of each is equal, and directly returns [2,- 3,4].</p>
<p>example 2: Input [5,2,-5], subtree 2, subtree-5, and subtree and 5 + 2 - 5 &#x3D; 2, so the maximum number of occurrences is 2.</p>
<ul>
<li>Traverse Order: left -&gt; right -&gt; root.</li>
<li>The value of the update root is the sum of the left subtree and right subtree.</li>
<li>Store the number of occurrences of the sum in the dictionary</li>
<li>Use max() to find the number with the largest value in the dictionary, traverse the dictionary, store the value and the key of the largest number in ans, and return ans</li>
</ul>
<img src="/2022/06/19/LC508MostFrequentSubtreeSum/dfs.png" class="" title="dfs">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findFrequentTreeSum</span>(<span class="params">self, root: TreeNode</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        summ = &#123;&#125;</span><br><span class="line">        ans = []</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.dfs(root, summ)</span><br><span class="line">        maxVal = <span class="built_in">max</span>(summ.values())</span><br><span class="line">        <span class="keyword">for</span> key, val <span class="keyword">in</span> summ.items():</span><br><span class="line">            <span class="keyword">if</span> val == maxVal:</span><br><span class="line">                ans.append(key)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">self, root, summ</span>):</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        <span class="variable language_">self</span>.dfs(root.left, summ)</span><br><span class="line">        <span class="variable language_">self</span>.dfs(root.right, summ)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> root.left:</span><br><span class="line">            root.val += root.left.val</span><br><span class="line">        <span class="keyword">if</span> root.right:</span><br><span class="line">            root.val += root.right.val</span><br><span class="line">        <span class="keyword">if</span> root.val <span class="keyword">not</span> <span class="keyword">in</span> summ:</span><br><span class="line">            summ[root.val] =<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            summ[root.val]+=<span class="number">1</span></span><br></pre></td></tr></table></figure>



<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/most-frequent-subtree-sum/">508. Most Frequent Subtree Sum</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/most-frequent-subtree-sum/discuss/2170382/HexPython-DFS">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Depth First Search</tag>
      </tags>
  </entry>
  <entry>
    <title>LC209 - Minimum Size Subarray Sum</title>
    <url>/2022/06/10/LC209MinimumSizeSubarraySum/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, …, numsr-1, numsr] of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.</p>
<p>Example 1:</p>
<p>Input: target &#x3D; 7, nums &#x3D; [2,3,1,2,4,3]<br>Output: 2<br>Explanation: The subarray [4,3] has the minimal length under the problem constraint.<br>Example 2:</p>
<p>Input: target &#x3D; 4, nums &#x3D; [1,4,4]<br>Output: 1<br>Example 3:</p>
<p>Input: target &#x3D; 11, nums &#x3D; [1,1,1,1,1,1,1,1]<br>Output: 0</p>
<p>Constraints:</p>
<p>1 &lt;&#x3D; target &lt;&#x3D; 109<br>1 &lt;&#x3D; nums.length &lt;&#x3D; 105<br>1 &lt;&#x3D; nums[\i] &lt;&#x3D; 105</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Initialize left&#x3D;right&#x3D;0, and call the index closed interval [left, right] a window.</li>
<li>Continuously increase the right pointer to expand the window until the string in the window meets the requirements (satisfies &gt;&#x3D; target).</li>
<li>Stop increasing the right, and instead increase the left to shrink the window until the string in the window no longer meets the requirements</li>
<li>At the same time, each time left is increased, a round of results must be recorded.</li>
<li>Repeat steps until right reaches the end of the string.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) sapce</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minSubArrayLen</span>(<span class="params">self, target: <span class="built_in">int</span>, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        summ = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            summ.append(summ[-<span class="number">1</span>]+i)</span><br><span class="line">        i, j = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">        ans = <span class="built_in">len</span>(nums)+<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(summ):</span><br><span class="line">            <span class="keyword">if</span> summ[j] - summ[i] &lt; target:</span><br><span class="line">                j+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, j-i)</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> ans == <span class="built_in">len</span>(nums)+<span class="number">1</span> <span class="keyword">else</span> ans</span><br></pre></td></tr></table></figure>

<p>optimize the complexity of space from linear to to constant.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minSubArrayLen</span>(<span class="params">self, target: <span class="built_in">int</span>, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        left, right = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        res = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> right &lt; <span class="built_in">len</span>(nums):</span><br><span class="line">            total += nums[right]</span><br><span class="line">            <span class="keyword">while</span> total &gt;= target:</span><br><span class="line">                res = <span class="built_in">min</span>(res, right-left+<span class="number">1</span>)</span><br><span class="line">                total -= nums[left]</span><br><span class="line">                left+=<span class="number">1</span></span><br><span class="line">            right +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> res == <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">else</span> res</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/minimum-size-subarray-sum/">209. Minimum Size Subarray Sum</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/minimum-size-subarray-sum/discuss/2133172/HexPython-Sliding-Window">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Prefix Sum</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1109 - Corporate Flight Bookings</title>
    <url>/2022/06/10/LC1109CorporateFlightBookings/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>There are n flights that are labeled from 1 to n.</p>
<p>You are given an array of flight bookings bookings, where bookings[i] &#x3D; [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range.</p>
<p>Return an array answer of length n, where answer[i] is the total number of seats reserved for flight i.</p>
<p>Example 1:</p>
<p>Input: bookings &#x3D; [[1,2,10],[2,3,20],[2,5,25]], n &#x3D; 5<br>Output: [10,55,45,25,25]<br>Explanation:<br>Flight labels:        1   2   3   4   5<br>Booking 1 reserved:  10  10<br>Booking 2 reserved:      20  20<br>Booking 3 reserved:      25  25  25  25<br>Total seats:         10  55  45  25  25<br>Hence, answer &#x3D; [10,55,45,25,25]<br>Example 2:</p>
<p>Input: bookings &#x3D; [[1,2,10],[2,2,15]], n &#x3D; 2<br>Output: [10,25]<br>Explanation:<br>Flight labels:        1   2<br>Booking 1 reserved:  10  10<br>Booking 2 reserved:      15<br>Total seats:         10  25<br>Hence, answer &#x3D; [10,25]</p>
<p>Constraints:</p>
<p>1 &lt;&#x3D; n &lt;&#x3D; 2 * 104<br>1 &lt;&#x3D; bookings.length &lt;&#x3D; 2 * 104<br>bookings[i].length &#x3D;&#x3D; 3<br>1 &lt;&#x3D; firsti &lt;&#x3D; lasti &lt;&#x3D; n<br>1 &lt;&#x3D; seatsi &lt;&#x3D; 104</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><img src="/2022/06/10/LC1109CorporateFlightBookings/prefixsum.png" class="" title="prefixsum">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#前缀和 O(n^2) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">corpFlightBookings</span>(<span class="params">self, bookings: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        answer = [<span class="number">0</span>] * (n+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> start, end, value <span class="keyword">in</span> bookings:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end+<span class="number">1</span>):</span><br><span class="line">                answer[i] += value</span><br><span class="line">        <span class="keyword">return</span> answer[<span class="number">1</span>:]</span><br></pre></td></tr></table></figure>

<p>The idea of the difference method:</p>
<ul>
<li>Start index first, accumulate the number of seats</li>
<li>At the end of index last+1, subtract the current number of seats</li>
<li>Because the flight after the last, there is no current seat</li>
<li>When subtracting first, and then adding prefixes, they will actually cancel each other out</li>
<li>It is easy to understand how the idea of difference solves this problem by drawing an array.<img src="/2022/06/10/LC1109CorporateFlightBookings/differencearray.png" class="" title="differencearray">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#O(n) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">corpFlightBookings</span>(<span class="params">self, bookings: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], n: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        diff = [<span class="number">0</span>] * (n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> start, end, value <span class="keyword">in</span> bookings:</span><br><span class="line">            diff[start] += value</span><br><span class="line">            <span class="keyword">if</span> end &lt; n:</span><br><span class="line">                diff[end+<span class="number">1</span>] -= value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(diff)):</span><br><span class="line">            diff[i] += diff[i-<span class="number">1</span>] </span><br><span class="line">        <span class="keyword">return</span> diff[<span class="number">1</span>:]</span><br></pre></td></tr></table></figure></li>
</ul>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/corporate-flight-bookings/">1109. Corporate Flight Bookings</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/corporate-flight-bookings/discuss/2134803/HexPython-Difference-Array">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Difference Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LC497 - Random Pointin Non-Overlapping Rectangles</title>
    <url>/2022/06/10/LC497RandomPointinNon-overlappingRectangles/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an array of non-overlapping axis-aligned rectangles rects where rects[i] &#x3D; [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.</p>
<p>Any integer point inside the space covered by one of the given rectangles should be equally likely to be returned.</p>
<p>Note that an integer point is a point that has integer coordinates.</p>
<p>Implement the Solution class:</p>
<p>Solution(int[][] rects) Initializes the object with the given rectangles rects.<br>int[] pick() Returns a random integer point [u, v] inside the space covered by one of the given rectangles.</p>
<img src="/2022/06/10/LC497RandomPointinNon-overlappingRectangles/lc-pickrandomrec.jpg" class="" title="lc-pickrandomrec">

<p>Example 1:</p>
<p>Input<br>[“Solution”, “pick”, “pick”, “pick”, “pick”, “pick”]<br>[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]<br>Output<br>[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]</p>
<p>Explanation<br>Solution solution &#x3D; new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);<br>solution.pick(); &#x2F;&#x2F; return [1, -2]<br>solution.pick(); &#x2F;&#x2F; return [1, -1]<br>solution.pick(); &#x2F;&#x2F; return [-1, -2]<br>solution.pick(); &#x2F;&#x2F; return [-2, -2]<br>solution.pick(); &#x2F;&#x2F; return [0, 0]</p>
<p>Constraints:</p>
<p>1 &lt;&#x3D; rects.length &lt;&#x3D; 100<br>rects[i].length &#x3D;&#x3D; 4<br>-109 &lt;&#x3D; ai &lt; xi &lt;&#x3D; 109<br>-109 &lt;&#x3D; bi &lt; yi &lt;&#x3D; 109<br>xi - ai &lt;&#x3D; 2000<br>yi - bi &lt;&#x3D; 2000<br>All the rectangles do not overlap.<br>At most 104 calls will be made to pick.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Calculate prefixes and arrays.</li>
<li>The last bit in the prefix sum array stores the total number of coordinate points at this time, so we choose a random number within this range.</li>
<li>See which interval the number is in the prefix and array, each interval represents a different rectangle. Since their weights are different, the subscript of each rectangle is selected according to its prefix and the number in the array. As shown in the figure below, the probability of selecting rectangle one is 9&#x2F;37, the probability of selecting rectangle two is 12&#x2F;37, and the probability of selecting square three is 16&#x2F;37.</li>
<li>When a rectangle has been selected fairly after the above process is completed, we then randomly return a point in its rectangle according to the method in step disassembly</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, rects: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>):</span><br><span class="line">        <span class="variable language_">self</span>.rects = rects</span><br><span class="line">        <span class="variable language_">self</span>.presum = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> ai, bi, xi, yi <span class="keyword">in</span> rects:</span><br><span class="line">            <span class="variable language_">self</span>.presum.append(<span class="variable language_">self</span>.presum[-<span class="number">1</span>]+(xi-ai+<span class="number">1</span>) * (yi-bi+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pick</span>(<span class="params">self</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        val = random.randint(<span class="number">1</span>, <span class="variable language_">self</span>.presum[-<span class="number">1</span>])</span><br><span class="line">        idx = bisect.bisect_left(<span class="variable language_">self</span>.presum, val) -<span class="number">1</span></span><br><span class="line">        ai, bi, xi, yi = <span class="variable language_">self</span>.rects[idx]</span><br><span class="line">        <span class="keyword">return</span> [random.randint(ai, xi), random.randint(bi, yi)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Solution(rects)</span></span><br><span class="line"><span class="comment"># param_1 = obj.pick()</span></span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/random-point-in-non-overlapping-rectangles/">497. Random Point in Non-overlapping Rectangles</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/random-point-in-non-overlapping-rectangles/discuss/2133116/HexPython-Prefix-Sum">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>LC798 - Smallest Rotation With Highest Score</title>
    <url>/2022/06/10/LC798SmallestRotationwithHighestScore/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Discription"><a href="#Discription" class="headerlink" title="Discription"></a>Discription</h2><p>You are given an array nums. You can rotate it by a non-negative integer k so that the array becomes [nums[k], nums[k + 1], … nums[nums.length - 1], nums[0], nums[1], …, nums[k-1]]. Afterward, any entries that are less than or equal to their index are worth one point.</p>
<p>For example, if we have nums &#x3D; [2,4,1,3,0], and we rotate by k &#x3D; 2, it becomes [1,3,0,2,4]. This is worth 3 points because 1 &gt; 0 [no points], 3 &gt; 1 [no points], 0 &lt;&#x3D; 2 [one point], 2 &lt;&#x3D; 3 [one point], 4 &lt;&#x3D; 4 [one point].<br>Return the rotation index k that corresponds to the highest score we can achieve if we rotated nums by it. If there are multiple answers, return the smallest such index k.</p>
<p>Example 1:</p>
<p>Input: nums &#x3D; [2,3,1,4,0]<br>Output: 3<br>Explanation: Scores for each k are listed below:<br>k &#x3D; 0,  nums &#x3D; [2,3,1,4,0],    score 2<br>k &#x3D; 1,  nums &#x3D; [3,1,4,0,2],    score 3<br>k &#x3D; 2,  nums &#x3D; [1,4,0,2,3],    score 3<br>k &#x3D; 3,  nums &#x3D; [4,0,2,3,1],    score 4<br>k &#x3D; 4,  nums &#x3D; [0,2,3,1,4],    score 3<br>So we should choose k &#x3D; 3, which has the highest score.<br>Example 2:</p>
<p>Input: nums &#x3D; [1,3,0,2,4]<br>Output: 0<br>Explanation: nums will always have 3 points no matter how it shifts.<br>So we will choose the smallest k, which is 0.</p>
<p>Constraints:</p>
<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 105<br>0 &lt;&#x3D; nums[i] &lt; nums.length</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>A number num, the final and coordinate difference is less than or equal to 0, there is only one range, that is, the coordinates are in <code>[num, n-1]</code><br>, and the time difference between <code>[0, num-1]</code> will obviously be greater than 0.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Take nums=[2,3,1,4,0] as an example to illustrate</span><br><span class="line">        i=0,nums[i]=2 To score, it needs to be adjusted to the 2~4 position, and it needs to be adjusted 1~3 steps</span><br><span class="line">        i=1,nums[i]=3 To score, it needs to be adjusted to the 3~4 position, and it needs to be adjusted for 2~3 steps</span><br><span class="line">        i=2,nums[i]=1 To score, you need to adjust to 1~4 position, you need to adjust 0~1 and 3~4 steps (3~1)</span><br><span class="line">        i=3,nums[i]=4 To score, it needs to be adjusted to the 4~4 position, and it needs to be adjusted 4~4 steps</span><br><span class="line">        i=4,nums[i]=0 To score, you need to adjust to 0~4 position, you need to adjust 0~4 steps</span><br><span class="line">        To sum up, for each nums[i], the number of arguments k wants to make the upper and lower bounds of the number score: [(i+1)%n,(i+n-nums[i])%n]</span><br><span class="line">        For i=2, nums[i]=1 is a special case, the upper and lower bounds 3 and 1 can also be calculated by the formula, and 0 and 4 need to be supplemented by themselves</span><br><span class="line">        Finally, we count the range coverage of k corresponding to each nums[i], k represents the score in a certain coverage times, and the minimum value of k corresponding to the highest score (the most coverage times) is the answer</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#O(n) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bestRotation</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        diff = [<span class="number">0</span>] * <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            low = (i+<span class="number">1</span>)% <span class="built_in">len</span>(nums)</span><br><span class="line">            high = (i - v + <span class="built_in">len</span>(nums)+<span class="number">1</span>)%<span class="built_in">len</span>(nums)</span><br><span class="line">            diff[low] +=<span class="number">1</span> <span class="comment"># start </span></span><br><span class="line">            diff[high] -=<span class="number">1</span> <span class="comment"># end+1 </span></span><br><span class="line">            <span class="keyword">if</span> low &gt;= high:</span><br><span class="line">                diff[<span class="number">0</span>] +=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        current = <span class="number">0</span></span><br><span class="line">        maxi = <span class="number">0</span></span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(diff):</span><br><span class="line">            current += v</span><br><span class="line">            <span class="keyword">if</span> current&gt;maxi:</span><br><span class="line">                maxi = current</span><br><span class="line">                idx = i</span><br><span class="line">        <span class="keyword">return</span> idx</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/smallest-rotation-with-highest-score/">798. Smallest Rotation with Highest Score</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/smallest-rotation-with-highest-score/discuss/2134859/HexPython-Difference-Array">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>hard</tag>
        <tag>Difference Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LC560 - Subarray Sum Equals K</title>
    <url>/2022/06/10/LC560SubarraySumEqualsK/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.</p>
<p>A subarray is a contiguous non-empty sequence of elements within an array.</p>
<p>Example 1:</p>
<p>Input: nums &#x3D; [1,1,1], k &#x3D; 2<br>Output: 2<br>Example 2:</p>
<p>Input: nums &#x3D; [1,2,3], k &#x3D; 3<br>Output: 2</p>
<p>Constraints:</p>
<p>1 &lt;&#x3D; nums.length &lt;&#x3D; 2 * 104<br>-1000 &lt;&#x3D; nums[i] &lt;&#x3D; 1000<br>-107 &lt;&#x3D; k &lt;&#x3D; 107</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Each element corresponds to a “prefix sum”</li>
<li>Traverse the array to find the historical prefix sum of “subtract it &#x3D;&#x3D; k” in the map based on the current “prefix sum”</li>
<li>The difference between the current “prefix sum” and the historical prefix sum is a sub-array. If the historical prefix sum occurs c times, it means that the current item finds c sub-arrays and the sum is equal to k.</li>
<li>During the traversal process, c is continuously added to count, and finally returns count</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n^2) time | O(n) space-- Time Out Exceed</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subarraySum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        presum = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(nums):</span><br><span class="line">            presum.append(presum[-<span class="number">1</span>] + v)</span><br><span class="line"></span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(presum)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(presum)):</span><br><span class="line">                <span class="keyword">if</span> presum[j] - presum[i] == k:</span><br><span class="line">                    cnt+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> cnt</span><br></pre></td></tr></table></figure>

<h3 id="Prefix-Sum-Hash-Table"><a href="#Prefix-Sum-Hash-Table" class="headerlink" title="Prefix Sum + Hash Table"></a>Prefix Sum + Hash Table</h3><p>We need to find the interval that satisfies the sum K. At this time, presum is known, and k is also known. We only need to find the number of presum - k intervals to get the number of k intervals.</p>
<img src="/2022/06/10/LC560SubarraySumEqualsK/560.png" class="" width="560">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subarraySum</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        presum = &#123;<span class="number">0</span>:<span class="number">1</span>&#125;</span><br><span class="line">        cur = <span class="number">0</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            cur += i</span><br><span class="line">            <span class="keyword">if</span> cur - k <span class="keyword">in</span> presum:</span><br><span class="line">                res += presum[cur-k]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cur <span class="keyword">not</span> <span class="keyword">in</span> presum:</span><br><span class="line">                presum[cur] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                presum[cur] += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>



<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/subarray-sum-equals-k/">560. Subarray Sum Equals K</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/subarray-sum-equals-k/discuss/2134757/HexPython-Prefix-Sum">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Hashmap</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>LC528 - Random Pick With Weight</title>
    <url>/2022/06/21/LC528RandomPickwithWeight/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.<br>You need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] &#x2F; sum(w).<br>For example, if w &#x3D; [1, 3], the probability of picking index 0 is 1 &#x2F; (1 + 3) &#x3D; 0.25 (i.e., 25%), and the probability of picking index 1 is 3 &#x2F; (1 + 3) &#x3D; 0.75 (i.e., 75%).</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input</span><br><span class="line">[&quot;Solution&quot;,&quot;pickIndex&quot;]</span><br><span class="line">[[[1]],[]]</span><br><span class="line">Output</span><br><span class="line">[null,0]</span><br><span class="line">Explanation</span><br><span class="line">Solution solution = new Solution([1]);</span><br><span class="line">solution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example 2:</span><br><span class="line">Input</span><br><span class="line">[&quot;Solution&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;,&quot;pickIndex&quot;]</span><br><span class="line">[[[1,3]],[],[],[],[],[]]</span><br><span class="line">Output</span><br><span class="line">[null,1,1,1,1,0]</span><br><span class="line">Explanation</span><br><span class="line">Solution solution = new Solution([1, 3]);</span><br><span class="line">solution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.</span><br><span class="line">solution.pickIndex(); // return 1</span><br><span class="line">solution.pickIndex(); // return 1</span><br><span class="line">solution.pickIndex(); // return 1</span><br><span class="line">solution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.</span><br><span class="line">Since this is a randomization problem, multiple answers are allowed.</span><br><span class="line">All of the following outputs can be considered correct:</span><br><span class="line">[null,1,1,1,1,0]</span><br><span class="line">[null,1,1,1,1,1]</span><br><span class="line">[null,1,1,1,0,0]</span><br><span class="line">[null,1,1,1,0,1]</span><br><span class="line">[null,1,0,1,0,0]</span><br><span class="line">......</span><br><span class="line">and so on.</span><br></pre></td></tr></table></figure>

<p>Constraints:</p>
<p>1 &lt;&#x3D; w.length &lt;&#x3D; 104<br>1 &lt;&#x3D; w[i] &lt;&#x3D; 105<br>pickIndex will be called at most 104 times.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><img src="/2022/06/21/LC528RandomPickwithWeight/weight.png" class="" title="weight">
<p>Selected by weight, here I am directly calling the random.randInt() function of Python. But this will only generate random numbers, not selected by weight. We can record the prefix sum, which is actually the sum of all numbers.</p>
<p>For example, the prefix sum of [1,3] is [1,4]. That is, if a random number of [1,4] is generated at this time, 1 corresponds to 1, and the random number 2,3,4 corresponds to the prefix and 4, which just satisfies the weight of 1:3.</p>
<p>And for w &#x3D; [a,b,c,d] corresponding prefix and ws &#x3D; [a,a+b,a+b+c,a+b+c+d] we can directly generate 0 to a+b+c +d-1 random number.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, w: <span class="type">List</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">        <span class="variable language_">self</span>.summ = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(w)):</span><br><span class="line">            <span class="variable language_">self</span>.summ.append(<span class="variable language_">self</span>.summ[-<span class="number">1</span>]+w[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pickIndex</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        val = random.randint(<span class="number">1</span>, <span class="variable language_">self</span>.summ[-<span class="number">1</span>])</span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.summ):</span><br><span class="line">            <span class="keyword">if</span> v &gt;= val:</span><br><span class="line">                idx = i -<span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> idx</span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Solution(w)</span></span><br><span class="line"><span class="comment"># param_1 = obj.pickIndex()</span></span><br></pre></td></tr></table></figure>

<h3 id="Bisect-Library"><a href="#Bisect-Library" class="headerlink" title="Bisect Library"></a>Bisect Library</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#import the module</span></span><br><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"></span><br><span class="line"><span class="comment">#given sorted list of numbers</span></span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">25</span>,<span class="number">49</span>,<span class="number">55</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#given element to be inserted into the list</span></span><br><span class="line">ele = <span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#get index where to insert the element</span></span><br><span class="line">idx = bisect.bisect_left(nums, ele)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print the index</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Insert element <span class="subst">&#123;ele&#125;</span> at index <span class="subst">&#123;idx&#125;</span> in nums list to maintain sorted order.&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, w: <span class="type">List</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">        <span class="variable language_">self</span>.summ = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> w:</span><br><span class="line">            <span class="variable language_">self</span>.summ.append(<span class="variable language_">self</span>.summ[-<span class="number">1</span>]+i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.summ)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pickIndex</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        num = random.randint(<span class="number">1</span>, <span class="variable language_">self</span>.summ[-<span class="number">1</span>])</span><br><span class="line">        idx = bisect.bisect_left(<span class="variable language_">self</span>.summ, num)</span><br><span class="line">        <span class="keyword">return</span> idx-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Solution(w)</span></span><br><span class="line"><span class="comment"># param_1 = obj.pickIndex()</span></span><br></pre></td></tr></table></figure>



<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/random-pick-with-weight/">528. Random Pick with Weight</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/random-pick-with-weight/discuss/2177196/HexPython-prefix-Sum">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Prefix Sum</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Development（Kotlin）- First Android App</title>
    <url>/2022/06/20/AndroidDevelopment-Kotlin/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Day1-Build-Your-First-Android-App"><a href="#Day1-Build-Your-First-Android-App" class="headerlink" title="Day1: Build Your First Android App"></a>Day1: Build Your First Android App</h1><h2 id="Folder-Structure-of-an-Adroid-App"><a href="#Folder-Structure-of-an-Adroid-App" class="headerlink" title="Folder Structure of an Adroid App"></a>Folder Structure of an Adroid App</h2><img src="/2022/06/20/AndroidDevelopment-Kotlin/d1-1.png" class="" title="d1-1">

<h3 id="AndroidMainfest-xml"><a href="#AndroidMainfest-xml" class="headerlink" title="AndroidMainfest.xml"></a><strong>AndroidMainfest.xml</strong></h3><ul>
<li>Contains information that a device needs to run the app</li>
<li>An intermediate between android os and our application</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// intent-filter: launch activity -&gt; Launch MainActivity activity first</span></span><br><span class="line">&lt;activity</span><br><span class="line">    android:name=<span class="string">&quot;.MainActivity&quot;</span></span><br><span class="line">    android:exported=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;category android:name=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/activity&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>contains the package details of the application: <code>package=&quot;com.example.kotlinexe1&quot;</code></li>
<li>can add permissions<ul>
<li>deal with the rest api: we need to provide permission to use the internet connection</li>
</ul>
</li>
</ul>
<h3 id="Java-folder"><a href="#Java-folder" class="headerlink" title="Java folder"></a><strong>Java folder</strong></h3><img src="/2022/06/20/AndroidDevelopment-Kotlin/d1-2.png" class="" title="d1-2">

<ul>
<li>contains all the source code files we created<ul>
<li>source code</li>
<li>test files</li>
</ul>
</li>
</ul>
<h3 id="Jave-generated"><a href="#Jave-generated" class="headerlink" title="Jave (generated)"></a><strong>Jave (generated)</strong></h3><p>android studio will generate lots of classes for us and they will be stored in this folder</p>
<p>Kotlin language has created on top of Java language and Java library. Kotline is the more mordern version of Java, so that they haven’t changed the folder name to Kotlin</p>
<h3 id="res-folder"><a href="#res-folder" class="headerlink" title="res folder"></a><strong>res folder</strong></h3><img src="/2022/06/20/AndroidDevelopment-Kotlin/d1-3.png" class="" title="d1-3">
<p>contains all non-code resources, does not contain Kotlin files but all other resources</p>
<ul>
<li>drawable: contains all the images (all the format)</li>
<li>layout: contains all the xml layout files<ul>
<li>activity_main.xml is the view</li>
<li>MainActivity.kt is the controller file of that view</li>
</ul>
</li>
<li>mipmap: contains icon images with all different size</li>
<li>values: contains xml files to hold different default values of the project<ul>
<li>defined colors</li>
<li>defined strings</li>
<li>themes sub folder: contain details about the theme of the project<ul>
<li>new themes xml files inside this themes folder</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a><strong>Gradle</strong></h3><img src="/2022/06/20/AndroidDevelopment-Kotlin/d1-4.png" class="" title="d1-4">
<p>is a automated build system</p>
<ul>
<li><p>no need to worry about the different configurations, different libraries.</p>
</li>
<li><p>build.gradle:</p>
<ul>
<li>app level gradle file, whenever we add a new plugin to the project, we need to define it here</li>
</ul>
  <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;org.jetbrains.kotlin.android&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>app level gradle filem, we need to add dependencies here</li>
</ul>
  <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;androidx.core:core-ktx:1.7.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;androidx.appcompat:appcompat:1.3.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.google.android.material:material:1.4.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;androidx.constraintlayout:constraintlayout:2.0.4&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;junit:junit:4.13.2&#x27;</span></span><br><span class="line">    androidTestImplementation <span class="string">&#x27;androidx.test.ext:junit:1.1.3&#x27;</span></span><br><span class="line">    androidTestImplementation <span class="string">&#x27;androidx.test.espresso:espresso-core:3.4.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<img src="/2022/06/20/AndroidDevelopment-Kotlin/d1-5.png" class="" title="d1-5">
<h2 id="Build-Your-First-Android-App"><a href="#Build-Your-First-Android-App" class="headerlink" title="Build Your First Android App"></a>Build Your First Android App</h2><h3 id="activity-main-xml"><a href="#activity-main-xml" class="headerlink" title="activity_main.xml"></a>activity_main.xml</h3><img src="/2022/06/20/AndroidDevelopment-Kotlin/d1-6.png" class="" title="d1-6">

<p><strong>activity_main.xml</strong></p>
<ul>
<li>code mode</li>
<li>split mode</li>
<li>design mode</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    xmlns:app=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="line">    xmlns:tools=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="line">    android:layout_width=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    android:layout_height=<span class="string">&quot;match_parent&quot;</span></span><br><span class="line">    tools:context=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:layout_width=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:layout_height=<span class="string">&quot;wrap_content&quot;</span></span><br><span class="line">        android:text=<span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">        app:layout_constraintBottom_toBottomOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintLeft_toLeftOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintRight_toRightOf=<span class="string">&quot;parent&quot;</span></span><br><span class="line">        app:layout_constraintTop_toTopOf=<span class="string">&quot;parent&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Layout type</strong> </p>
<ul>
<li>constraint layout</li>
<li>linear layout</li>
<li>box layout</li>
</ul>
<h3 id="UI-Layout-Validation"><a href="#UI-Layout-Validation" class="headerlink" title="UI Layout Validation"></a><strong>UI Layout Validation</strong></h3><img src="/2022/06/20/AndroidDevelopment-Kotlin/d1-7.png" class="" title="d1-7">


<p>provided many different screen size</p>
<h3 id="MainActivity-kt"><a href="#MainActivity-kt" class="headerlink" title="MainActivity.kt"></a>MainActivity.kt</h3><p>MainActivity.kt is the layout controller class of the activity_main.xml layout</p>
<p>The activity_main.xml file has connected to the class through this <code>setContentView</code> function</p>
<p>In Android, <code>onCreate</code> function is called when the activity is first created</p>
<p><code>super.onCreate(savedInstanceState)</code> provides us the bundle containing the activities previously frozen state if there was one </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.kotlinexe1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.widget.Button</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">AppCompatActivity</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> greetingTextView = findViewById&lt;TextView&gt;(R.id.txt_hello)</span><br><span class="line">        <span class="keyword">val</span> inputField = findViewById&lt;EditText&gt;(R.id.txt_name)</span><br><span class="line">        <span class="keyword">val</span> submitButton = findViewById&lt;Button&gt;(R.id.btn_submit)</span><br><span class="line"></span><br><span class="line">        submitButton.setOnClickListener()&#123;</span><br><span class="line">            <span class="keyword">val</span> enteredName = inputField.text.toString()</span><br><span class="line">            <span class="keyword">val</span> message = <span class="string">&quot;Welcome <span class="variable">$enteredName</span>!&quot;</span></span><br><span class="line">            greetingTextView.text = message</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/2022/06/20/AndroidDevelopment-Kotlin/d1-8-1.png" class="" title="d1-8-1"></div><div class="group-picture-column" style="width: 50%;"><img src="/2022/06/20/AndroidDevelopment-Kotlin/d1-8-2.png" class="" title="d1-8-2"></div></div></div></div>


<p><strong>Toast.makeText(context: Context!, text: CharSequence!)</strong></p>
<p>for the context, we can provide either application context or activity context. </p>
<ul>
<li>applicaton context: <code>Toast.makeText(*applicationContext*)</code></li>
<li>activity context: <code>Toast.makeText(this@MainActivity, &quot;Please enter your name!&quot;, Toast.*LENGTH_SHORT*).show()</code></li>
</ul>
<aside>
💡 Difference: They are both instances of context class but the application context is tied to the life cycle of entire application, while the activity context is tied to the life cycle of an activity.

</aside>

<aside>
💡 A parameter is the variable listed inside the parenthesis in the function definition 
An argument is the value that is sent to the function when it is called

</aside>

<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.kotlinexe1</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.view.View.VISIBLE</span><br><span class="line"><span class="keyword">import</span> android.widget.Button</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">AppCompatActivity</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> greetingTextView = findViewById&lt;TextView&gt;(R.id.txt_hello)</span><br><span class="line">        <span class="keyword">val</span> inputField = findViewById&lt;EditText&gt;(R.id.txt_name)</span><br><span class="line">        <span class="keyword">val</span> submitButton = findViewById&lt;Button&gt;(R.id.btn_submit)</span><br><span class="line">        <span class="keyword">val</span> offersButton = findViewById&lt;Button&gt;(R.id.btn_viewoffers)</span><br><span class="line"></span><br><span class="line">        submitButton.setOnClickListener()&#123;</span><br><span class="line">            <span class="keyword">val</span> enteredName = inputField.text.toString()</span><br><span class="line">            <span class="keyword">if</span> (enteredName == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                greetingTextView.text = <span class="string">&quot;Welcome!&quot;</span></span><br><span class="line">                offersButton</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">&quot;Please enter your name!&quot;</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">val</span> message = <span class="string">&quot;Welcome <span class="variable">$enteredName</span>!&quot;</span></span><br><span class="line">                greetingTextView.text = message</span><br><span class="line">                inputField.text.clear()</span><br><span class="line">                offersButton.visibility = VISIBLE</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/2022/06/20/AndroidDevelopment-Kotlin/d1-9-1.png" class="" title="d1-9-1"></div><div class="group-picture-column" style="width: 50%;"><img src="/2022/06/20/AndroidDevelopment-Kotlin/d1-9-2.png" class="" title="d1-9-2"></div></div></div></div>

<p>navigate to next activity</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">offersButton.setOnClickListener()&#123;</span><br><span class="line">  <span class="comment">// current activity, next activity</span></span><br><span class="line">  <span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, MainActivity2::<span class="keyword">class</span>.java)</span><br><span class="line">  startActivity(intent)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h3><p>In general, intents are used to move between some android component like (activity, service, broadcast receivers …etc) some time you need to pass some value between these components so you need to use <strong>putextra</strong> in the sender component and <strong>getextra</strong> in the receiver for example :</p>
<p>in the sender :</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, MainActivity2::<span class="keyword">class</span>.java)</span><br><span class="line">intent.putExtra(<span class="string">&quot;USER&quot;</span>, enteredName) <span class="comment">// name, value</span></span><br><span class="line">startActivity(intent)</span><br></pre></td></tr></table></figure>

<p>in the reciver:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> userName = intent.getStringExtra(<span class="string">&quot;USER&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>note that you need to pass the same key to retrieve your value</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/2022/06/20/AndroidDevelopment-Kotlin/d1-10-1.png" class="" title="d1-10-1"></div><div class="group-picture-column" style="width: 50%;"><img src="/2022/06/20/AndroidDevelopment-Kotlin/d1-10-2.png" class="" title="d1-10-2"></div></div></div></div>




<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.youtube.com/watch?v=BCSlZIUj18Y">YouTube - Day 01: Build Your First Android App</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Android Development</category>
      </categories>
      <tags>
        <tag>video course</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1893 - Check if All the Integers in a Range Are Covered</title>
    <url>/2022/06/20/LC1893CheckifAlltheIntegersinaRangeAreCovered/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a 2D integer array ranges and two integers left and right. Each ranges[i] &#x3D; [starti, endi] represents an inclusive interval between starti and endi.<br>Return true if each integer in the inclusive range [left, right] is covered by at least one interval in ranges. Return false otherwise.<br>An integer x is covered by an interval ranges[i] &#x3D; [starti, endi] if starti &lt;&#x3D; x &lt;&#x3D; endi.</p>
<p>Example 1:<br>Input: ranges &#x3D; [[1,2],[3,4],[5,6]], left &#x3D; 2, right &#x3D; 5<br>Output: true<br>Explanation: Every integer between 2 and 5 is covered:</p>
<ul>
<li>2 is covered by the first range.</li>
<li>3 and 4 are covered by the second range.</li>
<li>5 is covered by the third range.</li>
</ul>
<p>Example 2:<br>Input: ranges &#x3D; [[1,10],[10,20]], left &#x3D; 21, right &#x3D; 21<br>Output: false<br>Explanation: 21 is not covered by any range.</p>
<p>Constraints:<br>1 &lt;&#x3D; ranges.length &lt;&#x3D; 50<br>1 &lt;&#x3D; starti &lt;&#x3D; endi &lt;&#x3D; 50<br>1 &lt;&#x3D; left &lt;&#x3D; right &lt;&#x3D; 50</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><h3 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h3><p>Store all the numbers that appear in ranges in the set of nums, and then traverse the range from left to right, if the numbers are all in nums, return True, if there are numbers that are not included, return False</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isCovered</span>(<span class="params">self, ranges: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        nums = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> start, end <span class="keyword">in</span> ranges:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> nums:</span><br><span class="line">                    nums.add(i)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(left, right+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> nums:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p><strong>optimized version</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isCovered</span>(<span class="params">self, ranges: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(left, right+<span class="number">1</span>):</span><br><span class="line">            flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> start, end <span class="keyword">in</span> ranges:</span><br><span class="line">                <span class="keyword">if</span> start &lt;= i &lt;= end:</span><br><span class="line">                    flag = <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="Difference-Array"><a href="#Difference-Array" class="headerlink" title="Difference Array"></a>Difference Array</h3><p>Traverse ranges, starting from ranges[0] to calculate the covered changes.</p>
<img src="/2022/06/20/LC1893CheckifAlltheIntegersinaRangeAreCovered/example1-1.png" class="" title="example1-1">
<img src="/2022/06/20/LC1893CheckifAlltheIntegersinaRangeAreCovered/example1-2.png" class="" title="example1-2">
<img src="/2022/06/20/LC1893CheckifAlltheIntegersinaRangeAreCovered/example1-3.png" class="" title="example1-3">
<img src="/2022/06/20/LC1893CheckifAlltheIntegersinaRangeAreCovered/example1-4.png" class="" title="example1-4">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) time</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isCovered</span>(<span class="params">self, ranges: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        diff = [<span class="number">0</span>] * <span class="number">52</span></span><br><span class="line">        <span class="comment"># get difference array</span></span><br><span class="line">        <span class="keyword">for</span> start, end <span class="keyword">in</span> ranges:</span><br><span class="line">            diff[start] += <span class="number">1</span></span><br><span class="line">            diff[end+<span class="number">1</span>] -=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># prefix sum</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">52</span>):</span><br><span class="line">            diff[i] += diff[i-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(left, right+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> diff[i] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行用时：24 ms, 在所有 Python3 提交中击败了98.94%的用户</span></span><br><span class="line"><span class="comment"># 内存消耗：14.7 MB, 在所有 Python3 提交中击败了99.29%的用户</span></span><br></pre></td></tr></table></figure>





<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/check-if-all-the-integers-in-a-range-are-covered/">1893. Check if All the Integers in a Range Are Covered</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/check-if-all-the-integers-in-a-range-are-covered/discuss/2174438/HexPython-Brute-Force-Difference-Array">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>easy</tag>
        <tag>Difference Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1089 - Duplicate Zeros</title>
    <url>/2022/06/17/LC1089DuplicateZeros/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right.</p>
<p>Note that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.</p>
<p>Example 1:</p>
<p>Input: arr &#x3D; [1,0,2,3,0,4,5,0]<br>Output: [1,0,0,2,3,0,0,4]<br>Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]<br>Example 2:</p>
<p>Input: arr &#x3D; [1,2,3]<br>Output: [1,2,3]<br>Explanation: After calling your function, the input array is modified to: [1,2,3]</p>
<p>Constraints:</p>
<p>1 &lt;&#x3D; arr.length &lt;&#x3D; 104<br>0 &lt;&#x3D; arr[i] &lt;&#x3D; 9</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Simulation"><a href="#Simulation" class="headerlink" title="Simulation"></a>Simulation</h3><ul>
<li><p>A combination of python’s built-in functions pop and insert is used.</p>
</li>
<li><p>The time complexity of insert is O(n)</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Lists:</span><br><span class="line">                               Complexity</span><br><span class="line">Operation     | Example      | Class         | Notes</span><br><span class="line">--------------+--------------+---------------+-------------------------------</span><br><span class="line">Index         | l[i]         | O(1)          |</span><br><span class="line">Store         | l[i] = 0     | O(1)          |</span><br><span class="line">Length        | len(l)       | O(1)          |</span><br><span class="line">Append        | l.append(5)  | O(1)          |</span><br><span class="line">Clear         | l.clear()    | O(1)          | similar to l = []</span><br><span class="line"></span><br><span class="line">Slice         | l[a:b]       | O(b-a)        | l[1:5]:O(l)/l[:]:O(len(l)-0)=O(N)</span><br><span class="line">Extend        | l.extend(...)| O(len(...))   | depends only on len of extension</span><br><span class="line">Construction  | list(...)    | len(...)      | depends on lenghth of argument</span><br><span class="line"></span><br><span class="line">check ==, !=  | l1 == l2     | O(N)          |</span><br><span class="line">Insert        | l[a:b] = ... | O(N)          |</span><br><span class="line">Delete        | del l[i]     | O(N)          |</span><br><span class="line">Remove        | l.remove(...)| O(N)          |</span><br><span class="line">Containment   | x in/not in l| O(N)          | searches list</span><br><span class="line">Copy          | l.copy()     | O(N)          | Same as l[:] which is O(N)</span><br><span class="line">Pop           | l.pop(...)   | O(N)          |</span><br><span class="line">Pop           | l.pop()      | O(1)          | same as l.pop(-1), popping at end</span><br><span class="line">Extreme value | min(l)/max(l)| O(N)          |</span><br><span class="line">Reverse       | l.reverse()  | O(N)          |</span><br><span class="line">Iteration     | for v in l:  | O(N)          |</span><br><span class="line"></span><br><span class="line">Sort          | l.sort()     | O(N Log N)    | key/reverse doesn&#x27;t change this</span><br><span class="line">Multiply      | k*l          | O(k N)        | 5*l is O(N): len(l)*l is O(N**2)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n^2) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">duplicateZeros</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify arr in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> idx &lt; <span class="built_in">len</span>(arr):</span><br><span class="line">            <span class="keyword">if</span> arr[idx] == <span class="number">0</span>:</span><br><span class="line">                arr.pop()</span><br><span class="line">                arr.insert(idx, <span class="number">0</span>)</span><br><span class="line">                idx+=<span class="number">1</span></span><br><span class="line">            idx+=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="Two-Pointers"><a href="#Two-Pointers" class="headerlink" title="Two Pointers"></a>Two Pointers</h3><p>Traverse the number of zeros and the end position of the data,<br>Imagine that each zero is pushed onto the stack twice, and the traversal ends when the stack is as long as the array. Pops elements from the top of the stack in order.</p>
<p>A pointer left represents the data position (the top of the stack), and a pointer represents the write position (the current write position of the original array)</p>
<img src="/2022/06/17/LC1089DuplicateZeros/1089_Duplicate_Zeros_5.png" class="" title="1089_Duplicate_Zeros">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">duplicateZeros</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Do not return anything, modify arr in-place instead.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        left = -<span class="number">1</span></span><br><span class="line">        top_idx = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> top_idx &lt; <span class="built_in">len</span>(arr):</span><br><span class="line">            left+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> arr[left]:</span><br><span class="line">                top_idx+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                top_idx+=<span class="number">2</span></span><br><span class="line">            </span><br><span class="line">        right = <span class="built_in">len</span>(arr)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> top_idx == <span class="built_in">len</span>(arr) +<span class="number">1</span>:</span><br><span class="line">            arr[right] = <span class="number">0</span></span><br><span class="line">            right -=<span class="number">1</span></span><br><span class="line">            left -=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> right &gt;=<span class="number">0</span>:</span><br><span class="line">            arr[right] = arr[left]</span><br><span class="line">            right -=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> arr[left] == <span class="number">0</span>:</span><br><span class="line">                arr[right] = arr[left]</span><br><span class="line">                right -=<span class="number">1</span></span><br><span class="line">            left-=<span class="number">1</span></span><br></pre></td></tr></table></figure>



<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/duplicate-zeros/">1089. Duplicate Zeros</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/duplicate-zeros/discuss/2160356/HexPython3-Two-Pointers">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>easy</tag>
        <tag>Simulation</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Development（Kotlin）- Kotlin Language Fundamentals &amp; Activity Life Cycle</title>
    <url>/2022/06/22/AndroidDevelopmentDay2/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="Day2-Kotlin-Language-Fundamentals-Activity-Life-Cycle"><a href="#Day2-Kotlin-Language-Fundamentals-Activity-Life-Cycle" class="headerlink" title="Day2: Kotlin Language Fundamentals &amp; Activity Life Cycle"></a>Day2: Kotlin Language Fundamentals &amp; Activity Life Cycle</h1><h2 id="Kotlin-Fundamentals"><a href="#Kotlin-Fundamentals" class="headerlink" title="Kotlin Fundamentals"></a>Kotlin Fundamentals</h2><p><a href="https://kotlinlang.org/docs/home.html">Kotlin Docs | Kotlin</a></p>
<p><a href="https://kotlinlang.org/docs/keyword-reference.html#hard-keywords">Keywords and operators | Kotlin</a></p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"> ~/ brew install kotlin</span><br><span class="line"> ~/ kotlin -version</span><br><span class="line">Kotlin version <span class="number">1.5</span><span class="number">.31</span>-release-<span class="number">548</span> (JRE <span class="number">17.0</span><span class="number">.2</span>+<span class="number">8</span>-LTS-<span class="number">86</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Create-and-Run-an-Application"><a href="#Create-and-Run-an-Application" class="headerlink" title="Create and Run an Application"></a>Create and Run an Application</h3><p>Create a simple application in Kotlin that displays <code>&quot;Hello, World!&quot;</code>. In your favorite editor, create a new file called <code>hello.kt</code> with the following lines:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kotlinc hello.kt -include-runtime -d hello.jar &amp;&amp; java -jar hello.jar</span><br></pre></td></tr></table></figure>

<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><ul>
<li><strong>What is compilation?</strong><ul>
<li>Compilation is the process that translates the program written in a programming language into byte codes that the system can run.</li>
</ul>
</li>
<li><strong>What is a program?</strong><ul>
<li>A program is a set of instructions we provide to a system to get a task done.</li>
</ul>
</li>
</ul>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><ul>
<li><code>fun</code> declares a <a href="https://kotlinlang.org/docs/functions.html">function</a>.<ul>
<li>unit for the functions that do not return anything. The type with only one value: the <code>Unit</code> object. This type corresponds to the <code>void</code> type in Java.</li>
</ul>
</li>
<li><code>val</code> declares a read-only <a href="https://kotlinlang.org/docs/properties.html">property</a> or <a href="https://kotlinlang.org/docs/basic-syntax.html#variables">local variable</a>.</li>
<li><code>var</code> declares a mutable <a href="https://kotlinlang.org/docs/properties.html">property</a> or <a href="https://kotlinlang.org/docs/basic-syntax.html#variables">local variable</a>.<ul>
<li>Variables must either have a type annotation or be initialized</li>
</ul>
</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> first_name = <span class="number">12</span></span><br><span class="line">    <span class="keyword">var</span> second_name = <span class="number">8</span></span><br><span class="line">    cal(first_name, second_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> summ = getAddition(<span class="number">39</span>, <span class="number">32</span>)</span><br><span class="line">    println(<span class="string">&quot;Total is <span class="variable">$summ</span> - example1&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;Total is <span class="subst">$&#123;getAddition(<span class="number">1</span>,<span class="number">2</span>, <span class="number">10</span>)&#125;</span> - example2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fruits : List&lt;String&gt; = listOf(<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mongo&quot;</span>)</span><br><span class="line">    getFruits(fruits)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">cal</span><span class="params">(first_name: <span class="type">Int</span>, second_name: <span class="type">Int</span> )</span></span>:<span class="built_in">Unit</span>&#123; <span class="comment">//a type annotation is required on a value parameters</span></span><br><span class="line">    println(<span class="string">&quot;------------------------------------&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;Calculation Started:&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;First number is <span class="variable">$first_name</span>&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;Second number is <span class="variable">$second_name</span>&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;Addition of them is <span class="subst">$&#123;first_name+second_name&#125;</span>&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;Subtraction of them is <span class="subst">$&#123;first_name-second_name&#125;</span>&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;Calculation Ended.&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;------------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getAddition</span><span class="params">(num1: <span class="type">Int</span>, num2:<span class="type">Int</span>)</span></span>: <span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// overloaded function</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getAddition</span><span class="params">(num1: <span class="type">Int</span>, num2: <span class="type">Int</span>, num3: <span class="type">Int</span>)</span></span>:<span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2+num3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for each</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getFruits</span><span class="params">(fruits: <span class="type">List</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    println(<span class="string">&quot;Size of the fruit is <span class="subst">$&#123;fruits.size&#125;</span>.&quot;</span>)</span><br><span class="line">    fruits.forEach&#123;</span><br><span class="line">        i -&gt; println(<span class="string">&quot;This is <span class="variable">$i</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Android-Activity-Lifecycle"><a href="#Android-Activity-Lifecycle" class="headerlink" title="Android Activity Lifecycle"></a>Android Activity Lifecycle</h2><img src="/2022/06/22/AndroidDevelopmentDay2/lifecycle.png" class="" title="lifecycle">

<p>Fragments life cycle is similiar to activity life cycle.</p>
<h3 id="onCreate"><a href="#onCreate" class="headerlink" title="onCreate()"></a>onCreate()</h3><ul>
<li>When we launch the activity, it comes to onCreate() state. At that time, android system will invoke activity instances on create callback function. In the onCreate() function, we perform basic application start up logic that should happen only once for the entire life of the activity. onCreate() is the must have function.</li>
<li>onCreate() function is the only compulsory lifecycle function. The other lifecycle functions are optional. We don’t have to overwrite them unless we need to use them.</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">java.lang.Object</span><br><span class="line">   ↳	android.content.Context</span><br><span class="line"> 	   ↳	android.content.ContextWrapper</span><br><span class="line"> 	 	   ↳	android.view.ContextThemeWrapper</span><br><span class="line"> 	 	 	   ↳	android.app.Activity</span><br><span class="line"> 	 	 	 	   ↳	androidx.activity.ComponentActivity</span><br><span class="line"> 	 	 	 	 	   ↳	androidx.fragment.app.FragmentActivity</span><br><span class="line"> 	 	 	 	 	 	   ↳	androidx.appcompat.app.AppCompatActivity</span><br></pre></td></tr></table></figure>

<h3 id="onStart"><a href="#onStart" class="headerlink" title="onStart()"></a>onStart()</h3><ul>
<li>After the onCreate() method finishes execution, the activity enters to the onStart() state.</li>
<li>The onStart() function of the activity class prepares the activity to enter the foreground and become interactive.<ul>
<li>Foreground is where the app initializes, and the code that creates the user interface</li>
</ul>
</li>
</ul>
<h3 id="onResume"><a href="#onResume" class="headerlink" title="onResume()"></a>onResume()</h3><ul>
<li>The system calls the onStart() and onResume() in a quick succesion.</li>
<li>During the onResume() state, app comes to the foreground. This is the state which the activity interacts with the user</li>
<li>Common practice:<ul>
<li>reconnecting with the server to load media files</li>
<li>initialize the camera</li>
</ul>
</li>
</ul>
<h3 id="Activity-Running"><a href="#Activity-Running" class="headerlink" title="Activity Running"></a>Activity Running</h3><p>When this happen, onResume() function will be called. Activity stays in the resumed state until something happens to take focus away from it.</p>
<h3 id="onPause"><a href="#onPause" class="headerlink" title="onPause()"></a>onPause()</h3><ul>
<li>when following events happen, activity will transit to onPause() state.<ul>
<li>user navigates into another activity</li>
<li>user receives the phone call</li>
<li>device screens turning off</li>
<li>screen rotation</li>
</ul>
</li>
<li>If the activity returns to the onResume() state from onPause() state, the system once again calls onResume() method.</li>
<li>if our app requires something to initialize every time it resumed, we should overwrite the onResume() function and add code there</li>
<li>The system calls the onPause() function and take the activity to onPause() state as soon as the user is leaving our activity</li>
<li>When app is moving from foreground to the background, we should use the onPause() overridden function to pause the activity</li>
</ul>
<h3 id="onStop"><a href="#onStop" class="headerlink" title="onStop()"></a>onStop()</h3><ul>
<li>After the onPause() state, if the app is not moving to the resumed state, the system may transit activity to the stop state. When that happen, activity instance will  be still there in the memory but user interface will be destroyed.</li>
<li>If the user navigates back to the app, the system will invoke on onReseart() and onStart() functions to create the user interface again</li>
</ul>
<h3 id="onDestroy"><a href="#onDestroy" class="headerlink" title="onDestroy()"></a>onDestroy()</h3><ul>
<li>this function is called when the system destroying the activity.<ul>
<li>When we programmatically ignore the finish function to intentionally destroy the activity</li>
<li>When the user makes a configuration change: rotate the screen or change the language [when this happen, the system will tempororarily destroy the activity and recreate it again in working onCreate function call.]</li>
</ul>
</li>
</ul>
<h3 id="Simulation"><a href="#Simulation" class="headerlink" title="Simulation"></a>Simulation</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">AppCompatActivity</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        Log.i(<span class="string">&quot;HEX&quot;</span>, <span class="string">&quot;MainActivity: onCreate()&quot;</span>)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart()</span><br><span class="line">        Log.i(<span class="string">&quot;HEX&quot;</span>, <span class="string">&quot;MainActivity: OnStart()&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResume</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume()</span><br><span class="line">        Log.i(<span class="string">&quot;HEX&quot;</span>, <span class="string">&quot;MainActivity: OnResume()&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPause</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause()</span><br><span class="line">        Log.i(<span class="string">&quot;HEX&quot;</span>, <span class="string">&quot;MainActivity: onPause()&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStop</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop()</span><br><span class="line">        Log.i(<span class="string">&quot;HEX&quot;</span>, <span class="string">&quot;MainActivity: onStop()&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy()</span><br><span class="line">        Log.i(<span class="string">&quot;HEX&quot;</span>, <span class="string">&quot;MainActivity: onDestroy()&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Monitor how MainActivity and MainActivity2 transit to life cycle states</p>
<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2022/06/22/AndroidDevelopmentDay2/onStart2.png" class="" title="onStart2"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2022/06/22/AndroidDevelopmentDay2/step2-2.png" class="" title="step2-2"></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/2022/06/22/AndroidDevelopmentDay2/step3-2.png" class="" title="step3-2"></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="/2022/06/22/AndroidDevelopmentDay2/step4-2.png" class="" title="step4-2"></div></div></div></div>

<ol>
<li>Launch the app<ul>
<li>MainActivity: onCreate(), onStart(), onResume()</li>
</ul>
</li>
</ol>
<img src="/2022/06/22/AndroidDevelopmentDay2/onStart1.png" class="" title="onStart1">


<ol start="2">
<li>Navigate to MainActivity2<ul>
<li>MainActivity: onPause()</li>
<li>MainActivity2: onCreate(), onStart(), onResume()</li>
<li>MainActivity: onStop()</li>
</ul>
</li>
</ol>
<img src="/2022/06/22/AndroidDevelopmentDay2/step2-1.png" class="" title="step2-1">

<ol start="3">
<li>Click on the back button, navigate back to MainActivity1<ul>
<li>MainActivity2: onPause()</li>
<li>MainActivity1: onCreate(), onStart(), onResume()</li>
<li>MainActivity: onStop(), onDestroy()</li>
</ul>
</li>
</ol>
<img src="/2022/06/22/AndroidDevelopmentDay2/step3-1.png" class="" title="step3-1">

<ol start="4">
<li>Rorate the screen<ul>
<li>MainActivity1: onPause(), onStop(), onDestroy()</li>
<li>MainActivity1: onCreate(), onStart(), onResume()</li>
</ul>
</li>
</ol>
<img src="/2022/06/22/AndroidDevelopmentDay2/step4-1.png" class="" title="step4-1">

<h2 id="Object-Oriented-Kotlin"><a href="#Object-Oriented-Kotlin" class="headerlink" title="Object Oriented Kotlin"></a>Object Oriented Kotlin</h2><h3 id="Instance-Object"><a href="#Instance-Object" class="headerlink" title="Instance &#x3D; Object"></a>Instance &#x3D; Object</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;Car is starting&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> car = Car()</span><br><span class="line">    car.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h3><p>Kotlins allows us to define the primary constructor embedded with the class definition</p>
<p>with init block, we can add more instances or variables when we call this class. </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Driver</span>(name: String)&#123;</span><br><span class="line">		<span class="comment">// field variable/property</span></span><br><span class="line">    <span class="keyword">var</span> driverName = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">var</span> car = Car()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>&#123;</span><br><span class="line">        driverName = name</span><br><span class="line">        car.start()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showDetails</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;Driver name is <span class="subst">$&#123;driverName&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> driver = Driver(<span class="string">&quot;Hex&quot;</span>)</span><br><span class="line">    driver.showDetails()</span><br><span class="line">    driver.driverName = <span class="string">&quot;Hannah&quot;</span></span><br><span class="line">    driver.showDetails()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Lateinit</strong></p>
<p>When we use Lateinit, we need to always provide the object type</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Driver</span>(name: String)&#123;</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> driverName : String</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>&#123;</span><br><span class="line">        driverName = name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showDetails</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;Driver name is <span class="variable">$driverName</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> driver = Driver(<span class="string">&quot;Hex&quot;</span>)</span><br><span class="line">    driver.showDetails()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>another way: to put field variable in the ()</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Driver</span>(<span class="keyword">var</span> name: String)&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showDetails</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;Driver name is <span class="variable">$name</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> driver = Driver(<span class="string">&quot;Hex&quot;</span>)</span><br><span class="line">    driver.showDetails()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>If we use the init block, every time we create an instance of the class, the block will be executed. That means the code inside the init block is the first to be executed when the class is instantiated</li>
<li>the function in the class will only be executed only if we invoke that function</li>
</ul>
<p><strong>difference between property and a parameter</strong></p>
<ul>
<li>name is a property<ul>
<li>functions can directly access a property or a field variable</li>
</ul>
</li>
<li>credit is a parameter</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Driver</span>(<span class="keyword">var</span> name: String, credit: <span class="built_in">Int</span>)&#123;</span><br><span class="line">		<span class="comment">// field variable can be accessed by functions</span></span><br><span class="line">    <span class="keyword">var</span> totalCredit = <span class="number">50</span></span><br><span class="line">    <span class="keyword">init</span>&#123;</span><br><span class="line">        totalCredit+= credit</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showDetails</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;Driver name is <span class="variable">$name</span> and total credit is <span class="variable">$totalCredit</span>.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> driver = Driver(<span class="string">&quot;Hex&quot;</span>, <span class="number">27</span>)</span><br><span class="line">    driver.showDetails()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Visibility-Modifiers"><a href="#Visibility-Modifiers" class="headerlink" title="Visibility Modifiers"></a>Visibility Modifiers</h3><ul>
<li>public: visible to all the classes</li>
<li>private: only visible to itself<ul>
<li>99% of time we should make propery of a class private</li>
</ul>
</li>
<li>protected: only visible to itself and its inherited classes</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Driver</span>(<span class="keyword">var</span> name: String, credit: <span class="built_in">Int</span>)&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> totalCredit = <span class="number">50</span></span><br><span class="line">    <span class="keyword">init</span>&#123;</span><br><span class="line">        totalCredit+= credit</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showDetails</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;Driver name is <span class="variable">$name</span> and total credit is <span class="variable">$totalCredit</span>.&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> driver = Driver(<span class="string">&quot;Hex&quot;</span>, <span class="number">27</span>)</span><br><span class="line">    driver.showDetails()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>In Kotlin, all classes are <strong>final</strong> by default.</p>
<p>To permit the derived classes to inherit from the base class, we must use the <strong>open</strong> keyword in front of the base class</p>
<p>Child class can:</p>
<ul>
<li>inherit the parent class’ property and function</li>
<li>override parent classes functions. [need to make base function open before overriding]</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxSpeed = <span class="number">30</span></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;Car is starting&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCar</span> : <span class="type">Car</span>()&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;MyCar is starting&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> car = Car()</span><br><span class="line">    car.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> myCar = MyCar()</span><br><span class="line">    myCar.maxSpeed = <span class="number">240</span></span><br><span class="line">    println(myCar.maxSpeed)</span><br><span class="line">    myCar.start()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h3><ul>
<li>An interface can be implemented by a class in order to use its defined functionality</li>
<li>It is a way to provide a description or a contract for classes in object-oriented programming</li>
<li>Interfaces provide a predefined structure for a class so other classes can deal with our class properly</li>
<li>Interfaces in Kotlin can contain declarations of abstract methods as well as method implementations<ul>
<li>Abstract methods are those don’t have method body</li>
</ul>
</li>
<li>In Kotline, interfaces can also contain method declarations</li>
<li>If we want to inherit the interface for a class, we must implement its abstract methods too</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SpeedController</span>&#123;</span><br><span class="line">    <span class="comment">//abstract methods</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">accelerate</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">decelerate</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// non-abstract method declaration</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getBrandId</span><span class="params">()</span></span>:String&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ABC&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> maxSpeed = <span class="number">30</span></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;Car is starting&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCar</span> : <span class="type">Car</span>(), SpeedController&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;MyCar is starting. Brand id is <span class="subst">$&#123;getBrandId()&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// without this implementation, you will receive an error &quot;speedController.kt:19:1: error: class &#x27;MyCar&#x27; is not abstract and does not implement abstract member public abstract fun accelerate(): Unit defined in SpeedController&quot;</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">accelerate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;Accelerate&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">decelerate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;Decelerate&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> car = Car()</span><br><span class="line">    car.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> myCar = MyCar()</span><br><span class="line">    myCar.maxSpeed = <span class="number">240</span></span><br><span class="line">    println(myCar.maxSpeed)</span><br><span class="line">    myCar.start()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Function-vs-Method"><a href="#Function-vs-Method" class="headerlink" title="Function vs Method"></a>Function vs Method</h3><ul>
<li>Function is a piece of code that is called by name that can pass data to operate on</li>
<li>Method is a piece of code that is called by name that is associated with an object</li>
</ul>
<p>In the most of time, they refer to the same thing. </p>
<p>In general, methods are functions that belong to a class but not all functions are methods</p>
<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.youtube.com/watch?v=BCSlZIUj18Y">YouTube - Day 02: Kotlin Language Fundamentals &amp; Activity Life Cycle</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Android Development</category>
      </categories>
      <tags>
        <tag>video course</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>LC513 - Find Bottom Left Tree Value</title>
    <url>/2022/06/22/LC513FindBottomLeftTreeValue/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the root of a binary tree, return the leftmost value in the last row of the tree.</p>
<p>Example 1:</p>
<img src="/2022/06/22/LC513FindBottomLeftTreeValue/tree1.jpg" class="" title="tree1">
<p>Input: root &#x3D; [2,1,3]<br>Output: 1</p>
<p>Example 2:</p>
<img src="/2022/06/22/LC513FindBottomLeftTreeValue/tree2.jpg" class="" title="tree2">
<p>Input: root &#x3D; [1,2,3,4,null,5,6,null,null,7]<br>Output: 7</p>
<p>Constraints:<br>The number of nodes in the tree is in the range [1, 104].<br>-231 &lt;&#x3D; Node.val &lt;&#x3D; 231 - 1</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><ul>
<li>Traverse the tree from left to right, level by level</li>
<li>Save the first node of each layer</li>
<li>The answer saved by traversing to the bottom layer is the value in the lower left corner of the tree</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(nm) time | O(n) space</span></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findBottomLeftValue</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">        queue = [root]</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            level_len = <span class="built_in">len</span>(queue)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(level_len):</span><br><span class="line">                pop_node = queue.pop(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                    ans = pop_node.val</span><br><span class="line">                <span class="keyword">if</span> pop_node.left:</span><br><span class="line">                    queue.append(pop_node.left)</span><br><span class="line">                <span class="keyword">if</span> pop_node.right:</span><br><span class="line">                    queue.append(pop_node.right)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<ul>
<li>Traverse the tree from right to left, level by level</li>
<li>The last node traversed is the leftmost value of the tree</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findBottomLeftValue</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">        queue = [root]</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            pop_node = queue.pop(<span class="number">0</span>)</span><br><span class="line">            ans = pop_node.val</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> pop_node.right:</span><br><span class="line">                queue.append(pop_node.right)</span><br><span class="line">            <span class="keyword">if</span> pop_node.left:</span><br><span class="line">                queue.append(pop_node.left)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="comment">#Runtime: 41 ms, faster than 97.73% of Python3 online submissions for Find Bottom Left Tree Value.</span></span><br><span class="line"><span class="comment">#Memory Usage: 16.3 MB, less than 62.72% of Python3 online submissions for Find Bottom Left Tree Value.</span></span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/find-bottom-left-tree-value/">513. Find Bottom Left Tree Value</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/find-bottom-left-tree-value/discuss/2180416/HexPython-BFS">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Breadth First Search</tag>
        <tag>medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1537 - Get the Maximum Score</title>
    <url>/2022/06/23/LC1537GettheMaximumScore/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given two sorted arrays of distinct integers nums1 and nums2.<br>A valid path is defined as follows:</p>
<ul>
<li>Choose array nums1 or nums2 to traverse (from index-0).</li>
<li>Traverse the current array from left to right.</li>
<li>If you are reading any value that is present in nums1 and nums2 you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).</li>
<li>The score is defined as the sum of uniques values in a valid path.<br>Return the maximum score you can obtain of all possible valid paths. Since the answer may be too large, return it modulo 10^9 + 7.</li>
</ul>
<p>Example 1:</p>
<img src="/2022/06/23/LC1537GettheMaximumScore/sample_1_1893.png" class="" title="sample_1_1893">
<p>Input: nums1 &#x3D; [2,4,5,8,10], nums2 &#x3D; [4,6,8,9]<br>Output: 30<br>Explanation: Valid paths:<br>[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)<br>[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)<br>The maximum is obtained with the path in green [2,4,6,8,10].</p>
<p>Example 2:<br>Input: nums1 &#x3D; [1,3,5,7,9], nums2 &#x3D; [3,5,100]<br>Output: 109<br>Explanation: Maximum sum is obtained with the path [1,3,5,100].</p>
<p>Example 3:<br>Input: nums1 &#x3D; [1,2,3,4,5], nums2 &#x3D; [6,7,8,9,10]<br>Output: 40<br>Explanation: There are no common elements between nums1 and nums2.<br>Maximum sum is obtained with the path [6,7,8,9,10].</p>
<p>Constraints:<br>1 &lt;&#x3D; nums1.length, nums2.length &lt;&#x3D; 105<br>1 &lt;&#x3D; nums1[i], nums2[i] &lt;&#x3D; 107<br>nums1 and nums2 are strictly increasing.</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><img src="/2022/06/23/LC1537GettheMaximumScore/twopointers.jpg" class="" title="twopointers">

<p>Definition: “fork” – encountered a value that exists in both nums1 and nums2</p>
<ul>
<li>Use two pointers i, j to traverse the arrays nums1 and nums2 from the beginning, respectively, the current sum is recorded as sum1, sum2</li>
<li>In order for the two pointers to meet at the fork, we take advantage of the ordering of the array and move the pointer with the smaller value forward one step at a time.</li>
<li>At the fork, we assign sum1 and sum2 to the larger of the two (greedy), plus the value of the current fork, so that both pointers move forward (it can be understood that this fork is the new starting point) , and update the base value to the larger sum of the previous two paths, and start again).</li>
<li>Repeat this cycle until a path comes to an end.</li>
<li>Two paths, one of which may not be completed, so we add the remaining numbers in the array to it.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxSum</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        i, j, sum1, sum2 = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        mod = <span class="number">1000000007</span></span><br><span class="line">        len1 = <span class="built_in">len</span>(nums1)</span><br><span class="line">        len2 = <span class="built_in">len</span>(nums2)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> i &lt; len1 <span class="keyword">and</span> j &lt; len2:</span><br><span class="line">            num1 = nums1[i]</span><br><span class="line">            num2 = nums2[j]</span><br><span class="line">            <span class="keyword">if</span> num1 &lt; num2:</span><br><span class="line">                sum1 += num1</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> num1 &gt; num2:</span><br><span class="line">                sum2 += num2</span><br><span class="line">                j+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sum1 = sum2 = (<span class="built_in">max</span>(sum1, sum2) + num1) % mod</span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line">                j+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; len1:</span><br><span class="line">            sum1+=<span class="built_in">sum</span>(nums1[i:])</span><br><span class="line">        <span class="keyword">if</span> j &lt; len2:</span><br><span class="line">            sum2+=<span class="built_in">sum</span>(nums2[j:])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(sum1, sum2)%mod</span><br></pre></td></tr></table></figure>

<h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>In most programming competitions, we are required to answer the result in 10^9+7 modulo. The reason behind this is, if problem constraints are large integers, only efficient algorithms can solve them in an allowed limited time.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mod = <span class="number">1000000007</span></span><br><span class="line">mod = <span class="built_in">int</span>(math.<span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">9</span>)+<span class="number">7</span>)</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/get-the-maximum-score/">1537. Get the Maximum Score</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/get-the-maximum-score/discuss/2187134/PythonTwo-Pointers">Hex Solution</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>hard</tag>
        <tag>Greedy</tag>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>LC731 - My Calendar II</title>
    <url>/2022/06/25/LC729MyCalendarII/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a triple booking.<br>A triple booking happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.).<br>The event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start &lt;&#x3D; x &lt; end.<br>Implement the MyCalendarTwo class:<br>MyCalendarTwo() Initializes the calendar object.<br>boolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a triple booking. Otherwise, return false and do not add the event to the calendar.</p>
<p>Example 1:<br>Input<br>[“MyCalendarTwo”, “book”, “book”, “book”, “book”, “book”, “book”]<br>[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]<br>Output<br>[null, true, true, true, false, true, true]<br>Explanation<br>MyCalendarTwo myCalendarTwo &#x3D; new MyCalendarTwo();<br>myCalendarTwo.book(10, 20); &#x2F;&#x2F; return True, The event can be booked.<br>myCalendarTwo.book(50, 60); &#x2F;&#x2F; return True, The event can be booked.<br>myCalendarTwo.book(10, 40); &#x2F;&#x2F; return True, The event can be double booked.<br>myCalendarTwo.book(5, 15);  &#x2F;&#x2F; return False, The event cannot be booked, because it would result in a triple booking.<br>myCalendarTwo.book(5, 10); &#x2F;&#x2F; return True, The event can be booked, as it does not use time 10 which is already double booked.<br>myCalendarTwo.book(25, 55); &#x2F;&#x2F; return True, The event can be booked, as the time in [25, 40) will be double booked with the third event, the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.</p>
<p>Constraints:<br>0 &lt;&#x3D; start &lt; end &lt;&#x3D; 109<br>At most 1000 calls will be made to book.</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><ul>
<li>A sorted dictionary needs to be maintained, where the key is the value of start and end in each time period, and the value is the number of occurrences corresponding to it</li>
<li>In differential thinking, we only need to maintain start and end (end is not included). Just set start +&#x3D;1, end -&#x3D;1</li>
<li>Then add them one by one using the prefix sum, so you can know how many times this schedule overlaps. According to the meaning of the question, if the overlap value &gt; 2, return False.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#O(n^2) time | O(n) space</span></span><br><span class="line"><span class="keyword">from</span> sortedcontainers <span class="keyword">import</span> SortedDict</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCalendarTwo</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.booking = SortedDict()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">book</span>(<span class="params">self, start: <span class="built_in">int</span>, end: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> start <span class="keyword">in</span> <span class="variable language_">self</span>.booking:</span><br><span class="line">            <span class="variable language_">self</span>.booking[start] +=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.booking[start] = <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> end <span class="keyword">in</span> <span class="variable language_">self</span>.booking:</span><br><span class="line">            <span class="variable language_">self</span>.booking[end] -=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.booking[end] =-<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        presum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="variable language_">self</span>.booking.items():</span><br><span class="line">            presum+=v</span><br><span class="line">            <span class="keyword">if</span> presum &gt;<span class="number">2</span>:</span><br><span class="line">                <span class="variable language_">self</span>.booking[start] -=<span class="number">1</span></span><br><span class="line">                <span class="variable language_">self</span>.booking[end] +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyCalendarTwo object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyCalendarTwo()</span></span><br><span class="line"><span class="comment"># param_1 = obj.book(start,end)</span></span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/my-calendar-i/">729. My Calendar I</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/my-calendar-ii/">731. My Calendar II</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/my-calendar-iii/">732. My Calendar III</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Difference Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LC729 - My Calendar I</title>
    <url>/2022/06/25/LC729MyCalendarI/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.<br>A double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).<br>The event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start &lt;&#x3D; x &lt; end.<br>Implement the MyCalendar class:<br>MyCalendar() Initializes the calendar object.<br>boolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.</p>
<p>Example 1:<br>Input<br>[“MyCalendar”, “book”, “book”, “book”]<br>[[], [10, 20], [15, 25], [20, 30]]<br>Output<br>[null, true, false, true]<br>Explanation<br>MyCalendar myCalendar &#x3D; new MyCalendar();<br>myCalendar.book(10, 20); &#x2F;&#x2F; return True<br>myCalendar.book(15, 25); &#x2F;&#x2F; return False, It can not be booked because time 15 is already booked by another event.<br>myCalendar.book(20, 30); &#x2F;&#x2F; return True, The event can be booked, as the first event takes every time less than 20, but not including 20.</p>
<p>Constraints:<br>0 &lt;&#x3D; start &lt; end &lt;&#x3D; 109<br>At most 1000 calls will be made to book.</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><h3 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h3><ul>
<li>Check whether [start, end] can be added to MyCalendar, which can be compared by comparing the relationship between [s,e] and [start, end]<ul>
<li>e ≤ start or end ≤ s are all satisfied</li>
<li>That is, e &gt; start and end &gt; s, there is overlap</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#O(n^2) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCalendar</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.booking = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">book</span>(<span class="params">self, start: <span class="built_in">int</span>, end: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">for</span> s, e <span class="keyword">in</span> <span class="variable language_">self</span>.booking:</span><br><span class="line">            <span class="keyword">if</span> e &lt;= start:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> s &gt;= end:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="variable language_">self</span>.booking.append((start, end))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyCalendar object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyCalendar()</span></span><br><span class="line"><span class="comment"># param_1 = obj.book(start,end)</span></span><br></pre></td></tr></table></figure>
<h3 id="SortedDict"><a href="#SortedDict" class="headerlink" title="SortedDict"></a>SortedDict</h3><p>Similar to the first method, but this method uses a SortedDict to store the data. This ordered dictionary is useful for handling boundaries in the next method.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n^2) time | O(n) space</span></span><br><span class="line"><span class="keyword">from</span> sortedcontainers <span class="keyword">import</span> SortedDict</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCalendar</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.booking = SortedDict()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">book</span>(<span class="params">self, start: <span class="built_in">int</span>, end: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">for</span> s, e <span class="keyword">in</span> <span class="variable language_">self</span>.booking.items():</span><br><span class="line">            <span class="keyword">if</span> e &lt;= start:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> s &gt;= end:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="variable language_">self</span>.booking[start] = end</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyCalendar object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyCalendar()</span></span><br><span class="line"><span class="comment"># param_1 = obj.book(start,end)</span></span><br></pre></td></tr></table></figure>

<h3 id="Difference-Array"><a href="#Difference-Array" class="headerlink" title="Difference Array"></a>Difference Array</h3><p><strong>This method can be used in MyCalendar2 and MyCalendar3</strong></p>
<ul>
<li><p>A sorted dictionary needs to be maintained, where the key is the value of start and end in each time period, and the value is the number of occurrences corresponding to it</p>
</li>
<li><p>In differential thinking, we only need to maintain start and end (end is not included). Just set start +&#x3D;1, end -&#x3D;1</p>
</li>
<li><p>Then add them one by one using the prefix sum, so you can know how many times this schedule overlaps. According to the meaning of the question, if there is overlap, return False</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n^2) time | O(n) space</span></span><br><span class="line"><span class="keyword">from</span> sortedcontainers <span class="keyword">import</span> SortedDict</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCalendar</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.booking = SortedDict()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">book</span>(<span class="params">self, start: <span class="built_in">int</span>, end: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">if</span> start <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.booking:</span><br><span class="line">            <span class="variable language_">self</span>.booking[start] =<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.booking[start]+=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> end <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.booking:</span><br><span class="line">            <span class="variable language_">self</span>.booking[end] =-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.booking[end] -=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        presum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="variable language_">self</span>.booking.items():</span><br><span class="line">            presum+=v</span><br><span class="line">            <span class="keyword">if</span> presum &gt; <span class="number">1</span>:</span><br><span class="line">                <span class="variable language_">self</span>.booking[start] -=<span class="number">1</span></span><br><span class="line">                <span class="variable language_">self</span>.booking[end] +=<span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyCalendar object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyCalendar()</span></span><br><span class="line"><span class="comment"># param_1 = obj.book(start,end)</span></span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/my-calendar-i/">729. My Calendar I</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/my-calendar-ii/">731. My Calendar II</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/my-calendar-iii/">732. My Calendar III</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Brute Force</tag>
        <tag>Difference Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LC732 - My Calenar III</title>
    <url>/2022/06/25/LC732MyCalenarIII/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.)<br>You are given some events [start, end), after each given event, return an integer k representing the maximum k-booking between all the previous events.<br>Implement the MyCalendarThree class:<br>MyCalendarThree() Initializes the object.<br>int book(int start, int end) Returns an integer k representing the largest integer such that there exists a k-booking in the calendar.</p>
<p>Example 1:<br>Input<br>[“MyCalendarThree”, “book”, “book”, “book”, “book”, “book”, “book”]<br>[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]<br>Output<br>[null, 1, 1, 2, 3, 3, 3]</p>
<p>Explanation<br>MyCalendarThree myCalendarThree &#x3D; new MyCalendarThree();<br>myCalendarThree.book(10, 20); &#x2F;&#x2F; return 1, The first event can be booked and is disjoint, so the maximum k-booking is a 1-booking.<br>myCalendarThree.book(50, 60); &#x2F;&#x2F; return 1, The second event can be booked and is disjoint, so the maximum k-booking is a 1-booking.<br>myCalendarThree.book(10, 40); &#x2F;&#x2F; return 2, The third event [10, 40) intersects the first event, and the maximum k-booking is a 2-booking.<br>myCalendarThree.book(5, 15); &#x2F;&#x2F; return 3, The remaining events cause the maximum K-booking to be only a 3-booking.<br>myCalendarThree.book(5, 10); &#x2F;&#x2F; return 3<br>myCalendarThree.book(25, 55); &#x2F;&#x2F; return 3</p>
<p>Constraints:<br>0 &lt;&#x3D; start &lt; end &lt;&#x3D; 109<br>At most 400 calls will be made to book.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>A sorted dictionary needs to be maintained, where the key is the value of start and end in each time period, and the value is the number of occurrences corresponding to it</li>
<li>In differential thinking, we only need to maintain start and end (end is not included). Just set start +&#x3D;1, end -&#x3D;1</li>
<li>Then add them one by one using the prefix sum, so you can know how many times this schedule overlaps. According to the meaning of the question, keep the maximum value and return the maximum value.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n^2) time | O(n) space</span></span><br><span class="line"><span class="keyword">from</span> sortedcontainers <span class="keyword">import</span> SortedDict</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCalendarThree</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.booking = SortedDict()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">book</span>(<span class="params">self, start: <span class="built_in">int</span>, end: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> start <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.booking:</span><br><span class="line">            <span class="variable language_">self</span>.booking[start] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.booking[start] +=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> end <span class="keyword">not</span> <span class="keyword">in</span> <span class="variable language_">self</span>.booking:</span><br><span class="line">            <span class="variable language_">self</span>.booking[end] =-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.booking[end] -=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        presum = <span class="number">0</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="variable language_">self</span>.booking.items():</span><br><span class="line">            presum += v</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, presum)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyCalendarThree object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyCalendarThree()</span></span><br><span class="line"><span class="comment"># param_1 = obj.book(start,end)</span></span><br></pre></td></tr></table></figure>



<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/my-calendar-i/">729. My Calendar I</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/my-calendar-ii/">731. My Calendar II</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">3.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/my-calendar-iii/">732. My Calendar III</a><a href="#fnref:3" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Difference Array</tag>
      </tags>
  </entry>
  <entry>
    <title>LC30 - Substring With Concatenation of All Words</title>
    <url>/2022/06/24/LC30SubstringwithConcatenationofAllWords/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given a string s and an array of strings words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, and without any intervening characters.<br>You can return the answer in any order.</p>
<p>Example 1:<br>Input: s &#x3D; “barfoothefoobarman”, words &#x3D; [“foo”,”bar”]<br>Output: [0,9]<br>Explanation: Substrings starting at index 0 and 9 are “barfoo” and “foobar” respectively.<br>The output order does not matter, returning [9,0] is fine too.</p>
<p>Example 2:<br>Input: s &#x3D; “wordgoodgoodgoodbestword”, words &#x3D; [“word”,”good”,”best”,”word”]<br>Output: []</p>
<p>Example 3:<br>Input: s &#x3D; “barfoofoobarthefoobarman”, words &#x3D; [“bar”,”foo”,”the”]<br>Output: [6,9,12]</p>
<p>Constraints:<br>1 &lt;&#x3D; s.length &lt;&#x3D; 104<br>s consists of lower-case English letters.<br>1 &lt;&#x3D; words.length &lt;&#x3D; 5000<br>1 &lt;&#x3D; words[i].length &lt;&#x3D; 30<br>words[i] consists of lower-case English letters.</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>Solved with a sliding window and two HashMaps.</p>
<ul>
<li>We store all the words in the HashMap, the key directly stores the word, and the value stores the number of occurrences of the word (because the given word may be repeated, so it may be 1 or 2 or other).</li>
<li>Scan the words of the substring, if the word currently scanned is in the previous HashMap, store the word in the new HashMap</li>
<li>The substring scan ends, if all the words of the substring match, then the substring is one of the ones we are looking for</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findSubstring</span>(<span class="params">self, s: <span class="built_in">str</span>, words: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        hashWords = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> hashWords:</span><br><span class="line">                hashWords[word] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hashWords[word] +=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        i, j = <span class="number">0</span>, <span class="built_in">len</span>(words)*<span class="built_in">len</span>(words[<span class="number">0</span>])-<span class="number">1</span></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(s):</span><br><span class="line">            sub = s[i:j+<span class="number">1</span>]</span><br><span class="line">            temp = &#123;&#125;</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, j-i+<span class="number">1</span>, <span class="built_in">len</span>(words[<span class="number">0</span>])):</span><br><span class="line">                cur = sub[k:k+<span class="built_in">len</span>(words[<span class="number">0</span>])]</span><br><span class="line">                <span class="keyword">if</span> cur <span class="keyword">not</span> <span class="keyword">in</span> temp:</span><br><span class="line">                    temp[cur] =<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    temp[cur]+=<span class="number">1</span></span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> temp == hashWords:</span><br><span class="line">                ans.append(i)</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<p>use libraray <strong>collections.Counter</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findSubstring</span>(<span class="params">self, s: <span class="built_in">str</span>, words: <span class="type">List</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        wl, wsl = <span class="built_in">len</span>(words[<span class="number">0</span>]), <span class="built_in">len</span>(words)</span><br><span class="line">        i, j = <span class="number">0</span>, wl*wsl -<span class="number">1</span></span><br><span class="line">        ans = []</span><br><span class="line">        </span><br><span class="line">        wordsHash = collections.Counter(words)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(s):</span><br><span class="line">            sub = s[i:j+<span class="number">1</span>]</span><br><span class="line">            subs = []</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, j-i+<span class="number">1</span>, wl):</span><br><span class="line">                subs.append(sub[k:k+wl])</span><br><span class="line">            </span><br><span class="line">            subsHash = collections.Counter(subs)</span><br><span class="line">            <span class="keyword">if</span> wordsHash == subsHash:</span><br><span class="line">                ans.append(i)</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Counter</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; myList = [1,1,2,3,4,5,3,2,3,4,2,1,2,3]</span><br><span class="line">&gt;&gt;&gt; print Counter(myList)</span><br><span class="line">Counter(&#123;2: 4, 3: 4, 1: 3, 4: 2, 5: 1&#125;)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; print Counter(myList).items()</span><br><span class="line">[(1, 3), (2, 4), (3, 4), (4, 2), (5, 1)]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; print Counter(myList).keys()</span><br><span class="line">[1, 2, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; print Counter(myList).values()</span><br><span class="line">[3, 4, 4, 2, 1]</span><br></pre></td></tr></table></figure>



<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/substring-with-concatenation-of-all-words/">30. Substring with Concatenation of All Words</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>hard</tag>
        <tag>Hashmap</tag>
        <tag>Two Pointers</tag>
        <tag>Sliding Window</tag>
      </tags>
  </entry>
  <entry>
    <title>LC535 - Encode and Decode TinyURL</title>
    <url>/2022/06/29/LC535EndoceandDecodeTinyURL/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Note: This is a companion problem to the System Design problem: Design TinyURL.<br>TinyURL is a URL shortening service where you enter a URL such as <a href="https://leetcode.com/problems/design-tinyurl">https://leetcode.com/problems/design-tinyurl</a> and it returns a short URL such as <a href="http://tinyurl.com/4e9iAk">http://tinyurl.com/4e9iAk</a>. Design a class to encode a URL and decode a tiny URL.<br>There is no restriction on how your encode&#x2F;decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.<br>Implement the Solution class:<br>Solution() Initializes the object of the system.<br>String encode(String longUrl) Returns a tiny URL for the given longUrl.<br>String decode(String shortUrl) Returns the original long URL for the given shortUrl. It is guaranteed that the given shortUrl was encoded by the same object.</p>
<p>Example 1:<br>Input: url &#x3D; “<a href="https://leetcode.com/problems/design-tinyurl">https://leetcode.com/problems/design-tinyurl</a>“<br>Output: “<a href="https://leetcode.com/problems/design-tinyurl">https://leetcode.com/problems/design-tinyurl</a>“<br>Explanation:<br>Solution obj &#x3D; new Solution();<br>string tiny &#x3D; obj.encode(url); &#x2F;&#x2F; returns the encoded tiny url.<br>string ans &#x3D; obj.decode(tiny); &#x2F;&#x2F; returns the original url after deconding it.</p>
<p>Constraints:<br>1 &lt;&#x3D; url.length &lt;&#x3D; 104<br>url is guranteed to be a valid URL.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul>
<li>Hash algorithm, accepts incoming content, and obtains a string of hash values after operation<ul>
<li>As long as the incoming content is the same, the obtained hash value must be the same</li>
<li>Cannot be converted into content by hash value</li>
<li>As long as the hash algorithm used remains the same, the length of the obtained hash value is fixed no matter how large the content to be verified is</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Codec</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">map</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">self, longUrl: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Encodes a URL to a shortened URL.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        message = longUrl.encode()</span><br><span class="line">        en = hashlib.md5(message).hexdigest()</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">map</span>[en] = longUrl</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;https://hex.com/<span class="subst">&#123;en&#125;</span>&quot;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">self, shortUrl: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Decodes a shortened URL to its original URL.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        key = shortUrl.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.<span class="built_in">map</span>[key]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># codec = Codec()</span></span><br><span class="line"><span class="comment"># codec.decode(codec.encode(url))</span></span><br></pre></td></tr></table></figure>

<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># encode it to bytes using UTF-8 encoding</span></span><br><span class="line">message = <span class="string">&quot;Some text to hash&quot;</span>.encode()</span><br><span class="line"><span class="comment"># hash with MD5 (not recommended)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;MD5:&quot;</span>, hashlib.md5(message).hexdigest())</span><br><span class="line"><span class="comment"># hash with SHA-2 (SHA-256 &amp; SHA-512)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SHA-256:&quot;</span>, hashlib.sha256(message).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SHA-512:&quot;</span>, hashlib.sha512(message).hexdigest())</span><br><span class="line"><span class="comment"># hash with SHA-3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SHA-3-256:&quot;</span>, hashlib.sha3_256(message).hexdigest())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;SHA-3-512:&quot;</span>, hashlib.sha3_512(message).hexdigest())</span><br><span class="line"><span class="comment"># hash with BLAKE2</span></span><br><span class="line"><span class="comment"># 256-bit BLAKE2 (or BLAKE2s)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;BLAKE2c:&quot;</span>, hashlib.blake2s(message).hexdigest())</span><br><span class="line"><span class="comment"># 512-bit BLAKE2 (or BLAKE2b)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;BLAKE2b:&quot;</span>, hashlib.blake2b(message).hexdigest())</span><br></pre></td></tr></table></figure>




<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/encode-and-decode-tinyurl/">535. Encode and Decode TinyURL</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.thepythoncode.com/article/hashing-functions-in-python-using-hashlib">How to Use Hashing Algorithms in Python using hashlib</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Hashmap</tag>
      </tags>
  </entry>
  <entry>
    <title>LC515 - Find Largest Value in Each TreeRow</title>
    <url>/2022/06/24/LC515FindLargestValueinEachTreeRow/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).<br>Example 1:</p>
<img src="/2022/06/24/LC515FindLargestValueinEachTreeRow/e1.jpg" class="" title="e1">

<p>Input: root &#x3D; [1,3,2,5,3,null,9]<br>Output: [1,3,9]</p>
<p>Example 2:<br>Input: root &#x3D; [1,2,3]<br>Output: [1,3]</p>
<p>Constraints:<br>The number of nodes in the tree will be in the range [0, 104].<br>-231 &lt;&#x3D; Node.val &lt;&#x3D; 231 - 1</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><img src="/2022/06/24/LC515FindLargestValueinEachTreeRow/bfs.png" class="" title="bfs">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">largestValues</span>(<span class="params">self, root: <span class="type">Optional</span>[TreeNode]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">        queue = collections.deque([root])</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            l = <span class="built_in">len</span>(queue)</span><br><span class="line">            maxi = <span class="built_in">float</span>(<span class="string">&#x27;-inf&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">                pop_node = queue.popleft()</span><br><span class="line">                maxi = <span class="built_in">max</span>(maxi, pop_node.val)</span><br><span class="line">                <span class="keyword">if</span> pop_node.left:</span><br><span class="line">                    queue.append(pop_node.left)</span><br><span class="line">                <span class="keyword">if</span> pop_node.right:</span><br><span class="line">                    queue.append(pop_node.right)</span><br><span class="line">            ans.append(maxi)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>

<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/find-largest-value-in-each-tree-row/">515. Find Largest Value in Each Tree Row</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Breadth First Search</tag>
        <tag>medium</tag>
      </tags>
  </entry>
  <entry>
    <title>LC710 - Random Pick With Blacklist</title>
    <url>/2022/06/26/LC710RandomPickwithBlacklist/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>You are given an integer n and an array of unique integers blacklist. Design an algorithm to pick a random integer in the range [0, n - 1] that is not in blacklist. Any integer that is in the mentioned range and not in blacklist should be equally likely to be returned.<br>Optimize your algorithm such that it minimizes the number of calls to the built-in random function of your language.<br>Implement the Solution class:<br>Solution(int n, int[] blacklist) Initializes the object with the integer n and the blacklisted integers blacklist.<br>int pick() Returns a random integer in the range [0, n - 1] and not in blacklist.</p>
<p>Example 1:<br>Input<br>[“Solution”, “pick”, “pick”, “pick”, “pick”, “pick”, “pick”, “pick”]<br>[[7, [2, 3, 5]], [], [], [], [], [], [], []]<br>Output<br>[null, 0, 4, 1, 6, 1, 0, 4]<br>Explanation<br>Solution solution &#x3D; new Solution(7, [2, 3, 5]);<br>solution.pick(); &#x2F;&#x2F; return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick,<br>                 &#x2F;&#x2F; 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1&#x2F;4).<br>solution.pick(); &#x2F;&#x2F; return 4<br>solution.pick(); &#x2F;&#x2F; return 1<br>solution.pick(); &#x2F;&#x2F; return 6<br>solution.pick(); &#x2F;&#x2F; return 1<br>solution.pick(); &#x2F;&#x2F; return 0<br>solution.pick(); &#x2F;&#x2F; return 4</p>
<p>Constraints:<br>1 &lt;&#x3D; n &lt;&#x3D; 109<br>0 &lt;&#x3D; blacklist.length &lt;&#x3D; min(105, n - 1)<br>0 &lt;&#x3D; blacklist[i] &lt; n<br>All the values of blacklist are unique.<br>At most 2 * 104 calls will be made to pick.</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>There are N numbers in total, of which there are len(blacklist) numbers on the blacklist, and N-len(blacklist) numbers on the whitelist. In order to use random.randint(0, self.white_len - 1) to get white_len numbers randomly One of the list numbers, using the mapping to handle numbers in the first white_len positions that are not part of the whitelist.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Solution O(m) time, Pick O(1) time | O(m) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n: <span class="built_in">int</span>, blacklist: <span class="type">List</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">        <span class="variable language_">self</span>.wl = n - <span class="built_in">len</span>(blacklist)</span><br><span class="line">        blacks = [i <span class="keyword">for</span> i <span class="keyword">in</span> blacklist <span class="keyword">if</span> i &lt; <span class="variable language_">self</span>.wl]</span><br><span class="line">        whites = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.wl, n) <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> blacklist] </span><br><span class="line">        <span class="variable language_">self</span>.blackwhite = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(blacks)):</span><br><span class="line">            <span class="variable language_">self</span>.blackwhite[blacks[i]] = whites[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pick</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        num = random.randint(<span class="number">0</span>, <span class="variable language_">self</span>.wl-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> num <span class="keyword">in</span> <span class="variable language_">self</span>.blackwhite:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.blackwhite[num]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Solution(n, blacklist)</span></span><br><span class="line"><span class="comment"># param_1 = obj.pick()</span></span><br></pre></td></tr></table></figure>
<p>Version2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n: <span class="built_in">int</span>, blacklist: <span class="type">List</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">        <span class="variable language_">self</span>.bound = n - <span class="built_in">len</span>(blacklist)</span><br><span class="line">        blacks = [i <span class="keyword">for</span> i <span class="keyword">in</span> blacklist <span class="keyword">if</span> i &gt;= <span class="variable language_">self</span>.bound]</span><br><span class="line">        <span class="variable language_">self</span>.pairs = &#123;&#125;</span><br><span class="line">		<span class="comment"># idx is the starting point of the latter list to filter out white items</span></span><br><span class="line">        idx = <span class="variable language_">self</span>.bound</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> blacklist:</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="variable language_">self</span>.bound:</span><br><span class="line">                <span class="keyword">while</span> idx <span class="keyword">in</span> blacks:</span><br><span class="line">                    idx +=<span class="number">1</span></span><br><span class="line">                <span class="variable language_">self</span>.pairs[i] = idx</span><br><span class="line">                idx+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pick</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        num = random.randint(<span class="number">0</span>, <span class="variable language_">self</span>.bound-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> num <span class="keyword">in</span> <span class="variable language_">self</span>.pairs:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.pairs[num]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Solution(n, blacklist)</span></span><br><span class="line"><span class="comment"># param_1 = obj.pick()</span></span><br></pre></td></tr></table></figure>



<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/random-pick-with-blacklist/">710. Random Pick with Blacklist</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>medium</tag>
        <tag>Hashmap</tag>
      </tags>
  </entry>
  <entry>
    <title>LC1175 - Prime Arrangements</title>
    <url>/2022/06/30/LC1175PrimeArrangements/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)<br>(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)<br>Since the answer may be large, return the answer modulo 10^9 + 7.</p>
<p>Example 1:<br>Input: n &#x3D; 5<br>Output: 12<br>Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.</p>
<p>Example 2:<br>Input: n &#x3D; 100<br>Output: 682289015</p>
<p>Constraints:<br>1 &lt;&#x3D; n &lt;&#x3D; 100</p>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ol>
<li>First get the number of prime numbers in n numbers</li>
<li>Then get the number of non-prime numbers &#x3D; n - the number of prime numbers</li>
<li>The answer is obtained by multiplying the number of permutations of prime numbers by the number of permutations of non-primes.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numPrimeArrangements</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        primecnt = <span class="number">0</span></span><br><span class="line">        mod = <span class="number">1e9</span>+<span class="number">7</span></span><br><span class="line">        ans = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, i):</span><br><span class="line">                <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                primecnt+=<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, primecnt+<span class="number">1</span>):</span><br><span class="line">            ans *= i</span><br><span class="line">            ans %= mod</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n-primecnt+<span class="number">1</span>):</span><br><span class="line">            ans *= i </span><br><span class="line">            ans %= mod</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(ans)</span><br></pre></td></tr></table></figure>

<h2 id="How-to-find-prime-numbers-in-a-range"><a href="#How-to-find-prime-numbers-in-a-range" class="headerlink" title="How to find prime numbers in a range"></a>How to find prime numbers in a range</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = [];</span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, i):</span><br><span class="line">        <span class="keyword">if</span> (i % j == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">		<span class="comment"># This else executes only if break is NEVER reached and loop terminated after all iterations.</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num.append(i)</span><br><span class="line"><span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure>

<h2 id="Factorial"><a href="#Factorial" class="headerlink" title="Factorial"></a>Factorial</h2><h3 id="For-Loop"><a href="#For-Loop" class="headerlink" title="For Loop"></a>For Loop</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ans = <span class="number">1</span></span><br><span class="line">mod = <span class="number">1e9</span>+<span class="number">7</span></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">		ans *= i</span><br><span class="line">		<span class="comment"># if the number is too large</span></span><br><span class="line">		ans %= mod</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>

<h3 id="Reduce-Function"><a href="#Reduce-Function" class="headerlink" title="Reduce Function"></a>Reduce Function</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">n = <span class="number">10</span></span><br><span class="line">ans = reduce(<span class="keyword">lambda</span> x, y: x*y, <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>

<h3 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">n</span>):</span><br><span class="line">		<span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">or</span> n ==<span class="number">1</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">				<span class="keyword">return</span> (n*factorial(n-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">ans = factorial(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>



<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style: none; padding-left: 0; margin-left: 40px"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">1.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://leetcode.com/problems/prime-arrangements/">1175. Prime Arrangements</a><a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px; margin-left: -40px">2.</span><span style="display: inline-block; vertical-align: top; margin-left: 10px;"><a href="https://www.geeksforgeeks.org/using-else-conditional-statement-with-for-loop-in-python/">Using else conditional statement with for loop in python</a><a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>easy</tag>
        <tag>Math</tag>
      </tags>
  </entry>
</search>
